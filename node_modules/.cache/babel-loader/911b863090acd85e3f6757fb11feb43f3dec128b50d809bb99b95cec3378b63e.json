{"ast":null,"code":"/**\n * @module ol/style/RegularShape\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { asColorLike } from '../colorlike.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { defaultFillStyle, defaultLineCap, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultStrokeStyle } from '../render/canvas.js';\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] Outer radius of a star.\n * @property {number} [radius2] Inner radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n */\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\n * @property {number} strokeWidth\n * @property {number} size\n * @property {CanvasLineCap} lineCap\n * @property {Array<number>} lineDash\n * @property {number} lineDashOffset\n * @property {CanvasLineJoin} lineJoin\n * @property {number} miterLimit\n */\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nvar RegularShape = /** @class */function (_super) {\n  __extends(RegularShape, _super);\n  /**\n   * @param {Options} options Options.\n   */\n  function RegularShape(options) {\n    var _this = this;\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: 1,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0]\n    }) || this;\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    _this.canvas_ = {};\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.hitDetectionCanvas_ = null;\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    _this.fill_ = options.fill !== undefined ? options.fill : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.origin_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.points_ = options.points;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.radius_ = options.radius !== undefined ? options.radius : options.radius1;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.radius2_ = options.radius2;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.angle_ = options.angle !== undefined ? options.angle : 0;\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    _this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.anchor_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.imageSize_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.hitDetectionImageSize_ = null;\n    _this.render();\n    return _this;\n  }\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  RegularShape.prototype.clone = function () {\n    var style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice()\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  RegularShape.prototype.getAnchor = function () {\n    return this.anchor_;\n  };\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  RegularShape.prototype.getAngle = function () {\n    return this.angle_;\n  };\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  RegularShape.prototype.getFill = function () {\n    return this.fill_;\n  };\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  RegularShape.prototype.getHitDetectionImage = function () {\n    if (!this.hitDetectionCanvas_) {\n      var renderOptions = this.createRenderOptions();\n      this.createHitDetectionCanvas_(renderOptions);\n    }\n    return this.hitDetectionCanvas_;\n  };\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  RegularShape.prototype.getImage = function (pixelRatio) {\n    if (!this.canvas_[pixelRatio || 1]) {\n      var renderOptions = this.createRenderOptions();\n      var context = createCanvasContext2D(renderOptions.size * pixelRatio || 1, renderOptions.size * pixelRatio || 1);\n      this.draw_(renderOptions, context, 0, 0, pixelRatio || 1);\n      this.canvas_[pixelRatio || 1] = context.canvas;\n    }\n    return this.canvas_[pixelRatio || 1];\n  };\n  /*\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * */\n  RegularShape.prototype.getPixelRatio = function (pixelRatio) {\n    return pixelRatio;\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  RegularShape.prototype.getImageSize = function () {\n    return this.imageSize_;\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Size of the hit-detection image.\n   */\n  RegularShape.prototype.getHitDetectionImageSize = function () {\n    return this.hitDetectionImageSize_;\n  };\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  RegularShape.prototype.getImageState = function () {\n    return ImageState.LOADED;\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  RegularShape.prototype.getOrigin = function () {\n    return this.origin_;\n  };\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  RegularShape.prototype.getPoints = function () {\n    return this.points_;\n  };\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  RegularShape.prototype.getRadius = function () {\n    return this.radius_;\n  };\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  RegularShape.prototype.getRadius2 = function () {\n    return this.radius2_;\n  };\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  RegularShape.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  RegularShape.prototype.getStroke = function () {\n    return this.stroke_;\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  RegularShape.prototype.listenImageChange = function (listener) {};\n  /**\n   * Load not yet loaded URI.\n   */\n  RegularShape.prototype.load = function () {};\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  RegularShape.prototype.unlistenImageChange = function (listener) {};\n  /**\n   * @returns {RenderOptions}  The render options\n   * @protected\n   */\n  RegularShape.prototype.createRenderOptions = function () {\n    var lineCap = defaultLineCap;\n    var lineJoin = defaultLineJoin;\n    var miterLimit = 0;\n    var lineDash = null;\n    var lineDashOffset = 0;\n    var strokeStyle;\n    var strokeWidth = 0;\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      lineCap = this.stroke_.getLineCap();\n      if (lineCap === undefined) {\n        lineCap = defaultLineCap;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n    var size = 2 * (this.radius_ + strokeWidth) + 1;\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit\n    };\n  };\n  /**\n   * @protected\n   */\n  RegularShape.prototype.render = function () {\n    var renderOptions = this.createRenderOptions();\n    var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n    this.draw_(renderOptions, context, 0, 0, 1);\n    this.canvas_[1] = context.canvas;\n    // canvas.width and height are rounded to the closest integer\n    var size = context.canvas.width;\n    var imageSize = size;\n    var displacement = this.getDisplacement();\n    this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];\n    this.createHitDetectionCanvas_(renderOptions);\n    this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];\n    this.size_ = [size, size];\n    this.imageSize_ = [imageSize, imageSize];\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  RegularShape.prototype.draw_ = function (renderOptions, context, x, y, pixelRatio) {\n    var i, angle0, radiusC;\n    // reset transform\n    context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n    // then move to (x, y)\n    context.translate(x, y);\n    context.beginPath();\n    var points = this.points_;\n    if (points === Infinity) {\n      context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineCap = renderOptions.lineCap;\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n    context.closePath();\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  RegularShape.prototype.createHitDetectionCanvas_ = function (renderOptions) {\n    this.hitDetectionCanvas_ = this.getImage(1);\n    if (this.fill_) {\n      var color = this.fill_.getColor();\n      // determine if fill is transparent (or pattern or gradient)\n      var opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        var context = createCanvasContext2D(renderOptions.size, renderOptions.size);\n        this.hitDetectionCanvas_ = context.canvas;\n        this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n  RegularShape.prototype.drawHitDetectionCanvas_ = function (renderOptions, context, x, y) {\n    // move to (x, y)\n    context.translate(x, y);\n    context.beginPath();\n    var points = this.points_;\n    if (points === Infinity) {\n      context.arc(renderOptions.size / 2, renderOptions.size / 2, this.radius_, 0, 2 * Math.PI, true);\n    } else {\n      var radius2 = this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      var i = void 0,\n        radiusC = void 0,\n        angle0 = void 0;\n      for (i = 0; i <= points; i++) {\n        angle0 = i * 2 * Math.PI / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(renderOptions.size / 2 + radiusC * Math.cos(angle0), renderOptions.size / 2 + radiusC * Math.sin(angle0));\n      }\n    }\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.stroke();\n    }\n    context.closePath();\n  };\n  return RegularShape;\n}(ImageStyle);\nexport default RegularShape;","map":{"version":3,"names":["ImageState","ImageStyle","asArray","asColorLike","createCanvasContext2D","defaultFillStyle","defaultLineCap","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultStrokeStyle","RegularShape","_super","__extends","options","_this","rotateWithView","undefined","call","opacity","rotation","scale","displacement","canvas_","hitDetectionCanvas_","fill_","fill","origin_","points_","points","radius_","radius","radius1","radius2_","radius2","angle_","angle","stroke_","stroke","anchor_","size_","imageSize_","hitDetectionImageSize_","render","prototype","clone","style","getFill","getPoints","getRadius","getRadius2","getAngle","getStroke","getRotation","getRotateWithView","getDisplacement","slice","setOpacity","getOpacity","setScale","getScale","getAnchor","getHitDetectionImage","renderOptions","createRenderOptions","createHitDetectionCanvas_","getImage","pixelRatio","context","size","draw_","canvas","getPixelRatio","getImageSize","getHitDetectionImageSize","getImageState","LOADED","getOrigin","getSize","listenImageChange","listener","load","unlistenImageChange","lineCap","lineJoin","miterLimit","lineDash","lineDashOffset","strokeStyle","strokeWidth","getColor","getWidth","getLineDash","getLineDashOffset","getLineJoin","getLineCap","getMiterLimit","width","imageSize","x","y","i","angle0","radiusC","setTransform","translate","beginPath","Infinity","arc","Math","PI","lineTo","cos","sin","color","fillStyle","lineWidth","setLineDash","closePath","Array","isArray","length","drawHitDetectionCanvas_"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/style/RegularShape.js"],"sourcesContent":["/**\n * @module ol/style/RegularShape\n */\n\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {asColorLike} from '../colorlike.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {\n  defaultFillStyle,\n  defaultLineCap,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultStrokeStyle,\n} from '../render/canvas.js';\n\n/**\n * Specify radius for regular polygons, or radius1 and radius2 for stars.\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} points Number of points for stars and regular polygons. In case of a polygon, the number of points\n * is the number of sides.\n * @property {number} [radius] Radius of a regular polygon.\n * @property {number} [radius1] Outer radius of a star.\n * @property {number} [radius2] Inner radius of a star.\n * @property {number} [angle=0] Shape's angle in radians. A value of 0 will have one of the shape's point facing up.\n * @property {Array<number>} [displacement=[0,0]] Displacement of the shape\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {boolean} [rotateWithView=false] Whether to rotate the shape with the view.\n */\n\n/**\n * @typedef {Object} RenderOptions\n * @property {import(\"../colorlike.js\").ColorLike} [strokeStyle]\n * @property {number} strokeWidth\n * @property {number} size\n * @property {CanvasLineCap} lineCap\n * @property {Array<number>} lineDash\n * @property {number} lineDashOffset\n * @property {CanvasLineJoin} lineJoin\n * @property {number} miterLimit\n */\n\n/**\n * @classdesc\n * Set regular shape style for vector features. The resulting shape will be\n * a regular polygon when `radius` is provided, or a star when `radius1` and\n * `radius2` are provided.\n * @api\n */\nclass RegularShape extends ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: 1,\n      rotateWithView: rotateWithView,\n      rotation: options.rotation !== undefined ? options.rotation : 0,\n      scale: 1,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n    });\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = {};\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.hitDetectionCanvas_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./Fill.js\").default}\n     */\n    this.fill_ = options.fill !== undefined ? options.fill : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.points_ = options.points;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.radius_ =\n      options.radius !== undefined ? options.radius : options.radius1;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.radius2_ = options.radius2;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.angle_ = options.angle !== undefined ? options.angle : 0;\n\n    /**\n     * @private\n     * @type {import(\"./Stroke.js\").default}\n     */\n    this.stroke_ = options.stroke !== undefined ? options.stroke : null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.hitDetectionImageSize_ = null;\n\n    this.render();\n  }\n\n  /**\n   * Clones the style.\n   * @return {RegularShape} The cloned style.\n   * @api\n   */\n  clone() {\n    const style = new RegularShape({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      points: this.getPoints(),\n      radius: this.getRadius(),\n      radius2: this.getRadius2(),\n      angle: this.getAngle(),\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    return this.anchor_;\n  }\n\n  /**\n   * Get the angle used in generating the shape.\n   * @return {number} Shape's rotation in radians.\n   * @api\n   */\n  getAngle() {\n    return this.angle_;\n  }\n\n  /**\n   * Get the fill style for the shape.\n   * @return {import(\"./Fill.js\").default} Fill style.\n   * @api\n   */\n  getFill() {\n    return this.fill_;\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionCanvas_) {\n      const renderOptions = this.createRenderOptions();\n\n      this.createHitDetectionCanvas_(renderOptions);\n    }\n    return this.hitDetectionCanvas_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    if (!this.canvas_[pixelRatio || 1]) {\n      const renderOptions = this.createRenderOptions();\n\n      const context = createCanvasContext2D(\n        renderOptions.size * pixelRatio || 1,\n        renderOptions.size * pixelRatio || 1\n      );\n\n      this.draw_(renderOptions, context, 0, 0, pixelRatio || 1);\n\n      this.canvas_[pixelRatio || 1] = context.canvas;\n    }\n    return this.canvas_[pixelRatio || 1];\n  }\n\n  /*\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * */\n  getPixelRatio(pixelRatio) {\n    return pixelRatio;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.imageSize_;\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Size of the hit-detection image.\n   */\n  getHitDetectionImageSize() {\n    return this.hitDetectionImageSize_;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return ImageState.LOADED;\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    return this.origin_;\n  }\n\n  /**\n   * Get the number of points for generating the shape.\n   * @return {number} Number of points for stars and regular polygons.\n   * @api\n   */\n  getPoints() {\n    return this.points_;\n  }\n\n  /**\n   * Get the (primary) radius for the shape.\n   * @return {number} Radius.\n   * @api\n   */\n  getRadius() {\n    return this.radius_;\n  }\n\n  /**\n   * Get the secondary radius for the shape.\n   * @return {number|undefined} Radius2.\n   * @api\n   */\n  getRadius2() {\n    return this.radius2_;\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @return {import(\"../size.js\").Size} Size.\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * Get the stroke style for the shape.\n   * @return {import(\"./Stroke.js\").default} Stroke style.\n   * @api\n   */\n  getStroke() {\n    return this.stroke_;\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {}\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {}\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {}\n\n  /**\n   * @returns {RenderOptions}  The render options\n   * @protected\n   */\n  createRenderOptions() {\n    let lineCap = defaultLineCap;\n    let lineJoin = defaultLineJoin;\n    let miterLimit = 0;\n    let lineDash = null;\n    let lineDashOffset = 0;\n    let strokeStyle;\n    let strokeWidth = 0;\n\n    if (this.stroke_) {\n      strokeStyle = this.stroke_.getColor();\n      if (strokeStyle === null) {\n        strokeStyle = defaultStrokeStyle;\n      }\n      strokeStyle = asColorLike(strokeStyle);\n      strokeWidth = this.stroke_.getWidth();\n      if (strokeWidth === undefined) {\n        strokeWidth = defaultLineWidth;\n      }\n      lineDash = this.stroke_.getLineDash();\n      lineDashOffset = this.stroke_.getLineDashOffset();\n      lineJoin = this.stroke_.getLineJoin();\n      if (lineJoin === undefined) {\n        lineJoin = defaultLineJoin;\n      }\n      lineCap = this.stroke_.getLineCap();\n      if (lineCap === undefined) {\n        lineCap = defaultLineCap;\n      }\n      miterLimit = this.stroke_.getMiterLimit();\n      if (miterLimit === undefined) {\n        miterLimit = defaultMiterLimit;\n      }\n    }\n\n    const size = 2 * (this.radius_ + strokeWidth) + 1;\n\n    return {\n      strokeStyle: strokeStyle,\n      strokeWidth: strokeWidth,\n      size: size,\n      lineCap: lineCap,\n      lineDash: lineDash,\n      lineDashOffset: lineDashOffset,\n      lineJoin: lineJoin,\n      miterLimit: miterLimit,\n    };\n  }\n\n  /**\n   * @protected\n   */\n  render() {\n    const renderOptions = this.createRenderOptions();\n\n    const context = createCanvasContext2D(\n      renderOptions.size,\n      renderOptions.size\n    );\n\n    this.draw_(renderOptions, context, 0, 0, 1);\n\n    this.canvas_[1] = context.canvas;\n\n    // canvas.width and height are rounded to the closest integer\n    const size = context.canvas.width;\n    const imageSize = size;\n    const displacement = this.getDisplacement();\n\n    this.hitDetectionImageSize_ = [renderOptions.size, renderOptions.size];\n    this.createHitDetectionCanvas_(renderOptions);\n\n    this.anchor_ = [size / 2 - displacement[0], size / 2 + displacement[1]];\n    this.size_ = [size, size];\n    this.imageSize_ = [imageSize, imageSize];\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The rendering context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   * @param {number} pixelRatio The pixel ratio.\n   */\n  draw_(renderOptions, context, x, y, pixelRatio) {\n    let i, angle0, radiusC;\n\n    // reset transform\n    context.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\n    // then move to (x, y)\n    context.translate(x, y);\n\n    context.beginPath();\n\n    let points = this.points_;\n    if (points === Infinity) {\n      context.arc(\n        renderOptions.size / 2,\n        renderOptions.size / 2,\n        this.radius_,\n        0,\n        2 * Math.PI,\n        true\n      );\n    } else {\n      const radius2 =\n        this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      for (i = 0; i <= points; i++) {\n        angle0 = (i * 2 * Math.PI) / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(\n          renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0)\n        );\n      }\n    }\n\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n      if (color === null) {\n        color = defaultFillStyle;\n      }\n      context.fillStyle = asColorLike(color);\n      context.fill();\n    }\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (context.setLineDash && renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.lineCap = renderOptions.lineCap;\n      context.lineJoin = renderOptions.lineJoin;\n      context.miterLimit = renderOptions.miterLimit;\n      context.stroke();\n    }\n    context.closePath();\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   */\n  createHitDetectionCanvas_(renderOptions) {\n    this.hitDetectionCanvas_ = this.getImage(1);\n    if (this.fill_) {\n      let color = this.fill_.getColor();\n\n      // determine if fill is transparent (or pattern or gradient)\n      let opacity = 0;\n      if (typeof color === 'string') {\n        color = asArray(color);\n      }\n      if (color === null) {\n        opacity = 1;\n      } else if (Array.isArray(color)) {\n        opacity = color.length === 4 ? color[3] : 1;\n      }\n      if (opacity === 0) {\n        // if a transparent fill style is set, create an extra hit-detection image\n        // with a default fill style\n        const context = createCanvasContext2D(\n          renderOptions.size,\n          renderOptions.size\n        );\n        this.hitDetectionCanvas_ = context.canvas;\n\n        this.drawHitDetectionCanvas_(renderOptions, context, 0, 0);\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {RenderOptions} renderOptions Render options.\n   * @param {CanvasRenderingContext2D} context The context.\n   * @param {number} x The origin for the symbol (x).\n   * @param {number} y The origin for the symbol (y).\n   */\n  drawHitDetectionCanvas_(renderOptions, context, x, y) {\n    // move to (x, y)\n    context.translate(x, y);\n\n    context.beginPath();\n\n    let points = this.points_;\n    if (points === Infinity) {\n      context.arc(\n        renderOptions.size / 2,\n        renderOptions.size / 2,\n        this.radius_,\n        0,\n        2 * Math.PI,\n        true\n      );\n    } else {\n      const radius2 =\n        this.radius2_ !== undefined ? this.radius2_ : this.radius_;\n      if (radius2 !== this.radius_) {\n        points = 2 * points;\n      }\n      let i, radiusC, angle0;\n      for (i = 0; i <= points; i++) {\n        angle0 = (i * 2 * Math.PI) / points - Math.PI / 2 + this.angle_;\n        radiusC = i % 2 === 0 ? this.radius_ : radius2;\n        context.lineTo(\n          renderOptions.size / 2 + radiusC * Math.cos(angle0),\n          renderOptions.size / 2 + radiusC * Math.sin(angle0)\n        );\n      }\n    }\n\n    context.fillStyle = defaultFillStyle;\n    context.fill();\n    if (this.stroke_) {\n      context.strokeStyle = renderOptions.strokeStyle;\n      context.lineWidth = renderOptions.strokeWidth;\n      if (renderOptions.lineDash) {\n        context.setLineDash(renderOptions.lineDash);\n        context.lineDashOffset = renderOptions.lineDashOffset;\n      }\n      context.stroke();\n    }\n    context.closePath();\n  }\n}\n\nexport default RegularShape;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}