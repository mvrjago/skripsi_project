{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/reproj/Image\n */\nimport { ERROR_THRESHOLD } from './common.js';\nimport EventType from '../events/EventType.js';\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport Triangulation from './Triangulation.js';\nimport { calculateSourceResolution, render as renderReprojected } from '../reproj.js';\nimport { getCenter, getHeight, getIntersection, getWidth } from '../extent.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\n */\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nvar ReprojImage = /** @class */function (_super) {\n  __extends(ReprojImage, _super);\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {object=} opt_contextOptions Properties to set on the canvas context.\n   */\n  function ReprojImage(sourceProj, targetProj, targetExtent, targetResolution, pixelRatio, getImageFunction, opt_contextOptions) {\n    var _this = this;\n    var maxSourceExtent = sourceProj.getExtent();\n    var maxTargetExtent = targetProj.getExtent();\n    var limitedTargetExtent = maxTargetExtent ? getIntersection(targetExtent, maxTargetExtent) : targetExtent;\n    var targetCenter = getCenter(limitedTargetExtent);\n    var sourceResolution = calculateSourceResolution(sourceProj, targetProj, targetCenter, targetResolution);\n    var errorThresholdInPixels = ERROR_THRESHOLD;\n    var triangulation = new Triangulation(sourceProj, targetProj, limitedTargetExtent, maxSourceExtent, sourceResolution * errorThresholdInPixels, targetResolution);\n    var sourceExtent = triangulation.calculateSourceExtent();\n    var sourceImage = getImageFunction(sourceExtent, sourceResolution, pixelRatio);\n    var state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    var sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n    _this = _super.call(this, targetExtent, targetResolution, sourcePixelRatio, state) || this;\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    _this.targetProj_ = targetProj;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.maxSourceExtent_ = maxSourceExtent;\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    _this.triangulation_ = triangulation;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.targetResolution_ = targetResolution;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.targetExtent_ = targetExtent;\n    /**\n     * @private\n     * @type {import(\"../ImageBase.js\").default}\n     */\n    _this.sourceImage_ = sourceImage;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.sourcePixelRatio_ = sourcePixelRatio;\n    /**\n     * @private\n     * @type {object}\n     */\n    _this.contextOptions_ = opt_contextOptions;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.canvas_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.sourceListenerKey_ = null;\n    return _this;\n  }\n  /**\n   * Clean up.\n   */\n  ReprojImage.prototype.disposeInternal = function () {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n  ReprojImage.prototype.getImage = function () {\n    return this.canvas_;\n  };\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  ReprojImage.prototype.getProjection = function () {\n    return this.targetProj_;\n  };\n  /**\n   * @private\n   */\n  ReprojImage.prototype.reproject_ = function () {\n    var sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      var width = getWidth(this.targetExtent_) / this.targetResolution_;\n      var height = getHeight(this.targetExtent_) / this.targetResolution_;\n      this.canvas_ = renderReprojected(width, height, this.sourcePixelRatio_, this.sourceImage_.getResolution(), this.maxSourceExtent_, this.targetResolution_, this.targetExtent_, this.triangulation_, [{\n        extent: this.sourceImage_.getExtent(),\n        image: this.sourceImage_.getImage()\n      }], 0, undefined, this.contextOptions_);\n    }\n    this.state = sourceState;\n    this.changed();\n  };\n  /**\n   * Load not yet loaded URI.\n   */\n  ReprojImage.prototype.load = function () {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      var sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(this.sourceImage_, EventType.CHANGE, function (e) {\n          var sourceState = this.sourceImage_.getState();\n          if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n            this.unlistenSource_();\n            this.reproject_();\n          }\n        }, this);\n        this.sourceImage_.load();\n      }\n    }\n  };\n  /**\n   * @private\n   */\n  ReprojImage.prototype.unlistenSource_ = function () {\n    unlistenByKey( /** @type {!import(\"../events.js\").EventsKey} */this.sourceListenerKey_);\n    this.sourceListenerKey_ = null;\n  };\n  return ReprojImage;\n}(ImageBase);\nexport default ReprojImage;","map":{"version":3,"names":["ERROR_THRESHOLD","EventType","ImageBase","ImageState","Triangulation","calculateSourceResolution","render","renderReprojected","getCenter","getHeight","getIntersection","getWidth","listen","unlistenByKey","ReprojImage","_super","__extends","sourceProj","targetProj","targetExtent","targetResolution","pixelRatio","getImageFunction","opt_contextOptions","_this","maxSourceExtent","getExtent","maxTargetExtent","limitedTargetExtent","targetCenter","sourceResolution","errorThresholdInPixels","triangulation","sourceExtent","calculateSourceExtent","sourceImage","state","IDLE","EMPTY","sourcePixelRatio","getPixelRatio","call","targetProj_","maxSourceExtent_","triangulation_","targetResolution_","targetExtent_","sourceImage_","sourcePixelRatio_","contextOptions_","canvas_","sourceListenerKey_","prototype","disposeInternal","LOADING","unlistenSource_","getImage","getProjection","reproject_","sourceState","getState","LOADED","width","height","getResolution","extent","image","undefined","changed","load","ERROR","CHANGE","e"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/reproj/Image.js"],"sourcesContent":["/**\n * @module ol/reproj/Image\n */\nimport {ERROR_THRESHOLD} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport ImageBase from '../ImageBase.js';\nimport ImageState from '../ImageState.js';\nimport Triangulation from './Triangulation.js';\nimport {\n  calculateSourceResolution,\n  render as renderReprojected,\n} from '../reproj.js';\nimport {getCenter, getHeight, getIntersection, getWidth} from '../extent.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../extent.js\").Extent, number, number) : import(\"../ImageBase.js\").default} FunctionType\n */\n\n/**\n * @classdesc\n * Class encapsulating single reprojected image.\n * See {@link module:ol/source/Image~ImageSource}.\n */\nclass ReprojImage extends ImageBase {\n  /**\n   * @param {import(\"../proj/Projection.js\").default} sourceProj Source projection (of the data).\n   * @param {import(\"../proj/Projection.js\").default} targetProj Target projection.\n   * @param {import(\"../extent.js\").Extent} targetExtent Target extent.\n   * @param {number} targetResolution Target resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {FunctionType} getImageFunction\n   *     Function returning source images (extent, resolution, pixelRatio).\n   * @param {object=} opt_contextOptions Properties to set on the canvas context.\n   */\n  constructor(\n    sourceProj,\n    targetProj,\n    targetExtent,\n    targetResolution,\n    pixelRatio,\n    getImageFunction,\n    opt_contextOptions\n  ) {\n    const maxSourceExtent = sourceProj.getExtent();\n    const maxTargetExtent = targetProj.getExtent();\n\n    const limitedTargetExtent = maxTargetExtent\n      ? getIntersection(targetExtent, maxTargetExtent)\n      : targetExtent;\n\n    const targetCenter = getCenter(limitedTargetExtent);\n    const sourceResolution = calculateSourceResolution(\n      sourceProj,\n      targetProj,\n      targetCenter,\n      targetResolution\n    );\n\n    const errorThresholdInPixels = ERROR_THRESHOLD;\n\n    const triangulation = new Triangulation(\n      sourceProj,\n      targetProj,\n      limitedTargetExtent,\n      maxSourceExtent,\n      sourceResolution * errorThresholdInPixels,\n      targetResolution\n    );\n\n    const sourceExtent = triangulation.calculateSourceExtent();\n    const sourceImage = getImageFunction(\n      sourceExtent,\n      sourceResolution,\n      pixelRatio\n    );\n    const state = sourceImage ? ImageState.IDLE : ImageState.EMPTY;\n    const sourcePixelRatio = sourceImage ? sourceImage.getPixelRatio() : 1;\n\n    super(targetExtent, targetResolution, sourcePixelRatio, state);\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.targetProj_ = targetProj;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.maxSourceExtent_ = maxSourceExtent;\n\n    /**\n     * @private\n     * @type {!import(\"./Triangulation.js\").default}\n     */\n    this.triangulation_ = triangulation;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.targetResolution_ = targetResolution;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.targetExtent_ = targetExtent;\n\n    /**\n     * @private\n     * @type {import(\"../ImageBase.js\").default}\n     */\n    this.sourceImage_ = sourceImage;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.sourcePixelRatio_ = sourcePixelRatio;\n\n    /**\n     * @private\n     * @type {object}\n     */\n    this.contextOptions_ = opt_contextOptions;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceListenerKey_ = null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    if (this.state == ImageState.LOADING) {\n      this.unlistenSource_();\n    }\n    super.disposeInternal();\n  }\n\n  /**\n   * @return {HTMLCanvasElement} Image.\n   */\n  getImage() {\n    return this.canvas_;\n  }\n\n  /**\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  getProjection() {\n    return this.targetProj_;\n  }\n\n  /**\n   * @private\n   */\n  reproject_() {\n    const sourceState = this.sourceImage_.getState();\n    if (sourceState == ImageState.LOADED) {\n      const width = getWidth(this.targetExtent_) / this.targetResolution_;\n      const height = getHeight(this.targetExtent_) / this.targetResolution_;\n\n      this.canvas_ = renderReprojected(\n        width,\n        height,\n        this.sourcePixelRatio_,\n        this.sourceImage_.getResolution(),\n        this.maxSourceExtent_,\n        this.targetResolution_,\n        this.targetExtent_,\n        this.triangulation_,\n        [\n          {\n            extent: this.sourceImage_.getExtent(),\n            image: this.sourceImage_.getImage(),\n          },\n        ],\n        0,\n        undefined,\n        this.contextOptions_\n      );\n    }\n    this.state = sourceState;\n    this.changed();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.state == ImageState.IDLE) {\n      this.state = ImageState.LOADING;\n      this.changed();\n\n      const sourceState = this.sourceImage_.getState();\n      if (sourceState == ImageState.LOADED || sourceState == ImageState.ERROR) {\n        this.reproject_();\n      } else {\n        this.sourceListenerKey_ = listen(\n          this.sourceImage_,\n          EventType.CHANGE,\n          function (e) {\n            const sourceState = this.sourceImage_.getState();\n            if (\n              sourceState == ImageState.LOADED ||\n              sourceState == ImageState.ERROR\n            ) {\n              this.unlistenSource_();\n              this.reproject_();\n            }\n          },\n          this\n        );\n        this.sourceImage_.load();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  unlistenSource_() {\n    unlistenByKey(\n      /** @type {!import(\"../events.js\").EventsKey} */ (this.sourceListenerKey_)\n    );\n    this.sourceListenerKey_ = null;\n  }\n}\n\nexport default ReprojImage;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}