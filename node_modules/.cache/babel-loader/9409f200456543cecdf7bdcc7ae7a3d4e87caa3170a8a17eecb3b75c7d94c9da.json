{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, { fromCircle, makeRegular } from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { FALSE, TRUE } from '../functions.js';\nimport { always, noModifierKeys, shiftKeyOnly } from '../events/condition.js';\nimport { boundingExtent, getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../extent.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { fromUserCoordinate, getUserProjection } from '../proj.js';\nimport { getChangeEventType } from '../Object.js';\nimport { squaredDistance as squaredCoordinateDistance } from '../coordinate.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/GeometryType.js\").default} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default=,\n *     import(\"../proj/Projection.js\").default=):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nvar Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle'\n};\n/**\n * @enum {string}\n */\nvar DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nvar DrawEvent = /** @class */function (_super) {\n  __extends(DrawEvent, _super);\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  function DrawEvent(type, feature) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    _this.feature = feature;\n    return _this;\n  }\n  return DrawEvent;\n}(Event);\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nvar Draw = /** @class */function (_super) {\n  __extends(Draw, _super);\n  /**\n   * @param {Options} options Options.\n   */\n  function Draw(options) {\n    var _this = this;\n    var pointerOptions = /** @type {import(\"./Pointer.js\").Options} */options;\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n    _this = _super.call(this, pointerOptions) || this;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.shouldHandle_ = false;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    _this.downPx_ = null;\n    /**\n     * @type {?}\n     * @private\n     */\n    _this.downTimeout_;\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    _this.lastDragTime_;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.freehand_ = false;\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource}\n     * @private\n     */\n    _this.source_ = options.source ? options.source : null;\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>}\n     * @private\n     */\n    _this.features_ = options.features ? options.features : null;\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    _this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/GeometryType.js\").default}\n     * @private\n     */\n    _this.type_ = /** @type {import(\"../geom/GeometryType.js\").default} */options.type;\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    _this.mode_ = getMode(_this.type_);\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    _this.stopClick_ = !!options.stopClick;\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    _this.minPoints_ = options.minPoints ? options.minPoints : _this.mode_ === Mode.POLYGON ? 3 : 2;\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    _this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.finishCondition_ = options.finishCondition ? options.finishCondition : TRUE;\n    var geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      if (_this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function geometryFunction(coordinates, opt_geometry, projection) {\n          var circle = opt_geometry ? /** @type {Circle} */opt_geometry : new Circle([NaN, NaN]);\n          var center = fromUserCoordinate(coordinates[0], projection);\n          var squaredLength = squaredCoordinateDistance(center, fromUserCoordinate(coordinates[1], projection));\n          circle.setCenterAndRadius(center, Math.sqrt(squaredLength));\n          var userProjection = getUserProjection();\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n          return circle;\n        };\n      } else {\n        var Constructor_1;\n        var mode_1 = _this.mode_;\n        if (mode_1 === Mode.POINT) {\n          Constructor_1 = Point;\n        } else if (mode_1 === Mode.LINE_STRING) {\n          Constructor_1 = LineString;\n        } else if (mode_1 === Mode.POLYGON) {\n          Constructor_1 = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function geometryFunction(coordinates, opt_geometry, projection) {\n          var geometry = opt_geometry;\n          if (geometry) {\n            if (mode_1 === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([coordinates[0].concat([coordinates[0][0]])]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor_1(coordinates);\n          }\n          return geometry;\n        };\n      }\n    }\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    _this.geometryFunction_ = geometryFunction;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.dragVertexDelay_ = options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    _this.finishCoordinate_ = null;\n    /**\n     * Sketch feature.\n     * @type {Feature}\n     * @private\n     */\n    _this.sketchFeature_ = null;\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n    _this.sketchPoint_ = null;\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    _this.sketchCoords_ = null;\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n    _this.sketchLine_ = null;\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    _this.sketchLineCoords_ = null;\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    _this.squaredClickTolerance_ = options.clickTolerance ? options.clickTolerance * options.clickTolerance : 36;\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true\n    });\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    _this.geometryName_ = options.geometryName;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : noModifierKeys;\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.freehandCondition_;\n    if (options.freehand) {\n      _this.freehandCondition_ = always;\n    } else {\n      _this.freehandCondition_ = options.freehandCondition ? options.freehandCondition : shiftKeyOnly;\n    }\n    _this.addEventListener(getChangeEventType(InteractionProperty.ACTIVE), _this.updateState_);\n    return _this;\n  }\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  Draw.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n    this.updateState_();\n  };\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Draw.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  Draw.prototype.handleEvent = function (event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.preventDefault();\n    }\n    this.freehand_ = this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    var move = event.type === MapBrowserEventType.POINTERMOVE;\n    var pass = true;\n    if (!this.freehand_ && this.lastDragTime_ && event.type === MapBrowserEventType.POINTERDRAG) {\n      var now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (this.freehand_ && event.type === MapBrowserEventType.POINTERDRAG && this.sketchFeature_ !== null) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (this.freehand_ && event.type === MapBrowserEventType.POINTERDOWN) {\n      pass = false;\n    } else if (move) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.preventDefault();\n        }\n      } else if (event.originalEvent.pointerType == 'mouse' || event.type === MapBrowserEventType.POINTERDRAG && this.downTimeout_ === undefined) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n    return _super.prototype.handleEvent.call(this, event) && pass;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Draw.prototype.handleDownEvent = function (event) {\n    this.shouldHandle_ = !this.freehand_;\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(function () {\n        this.handlePointerMove_(new MapBrowserEvent(MapBrowserEventType.POINTERMOVE, event.map, event.originalEvent, false, event.frameState));\n      }.bind(this), this.dragVertexDelay_);\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Draw.prototype.handleUpEvent = function (event) {\n    var pass = true;\n    if (this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n    this.handlePointerMove_(event);\n    var circleMode = this.mode_ === Mode.CIRCLE;\n    if (this.shouldHandle_) {\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n        if (this.mode_ === Mode.POINT) {\n          this.finishDrawing();\n        }\n      } else if (this.freehand_ || circleMode) {\n        this.finishDrawing();\n      } else if (this.atFinish_(event)) {\n        if (this.finishCondition_(event)) {\n          this.finishDrawing();\n        }\n      } else {\n        this.addToDrawing_(event.coordinate);\n      }\n      pass = false;\n    } else if (this.freehand_) {\n      this.abortDrawing();\n    }\n    if (!pass && this.stopClick_) {\n      event.stopPropagation();\n    }\n    return pass;\n  };\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n  Draw.prototype.handlePointerMove_ = function (event) {\n    if (this.downPx_ && (!this.freehand_ && this.shouldHandle_ || this.freehand_ && !this.shouldHandle_)) {\n      var downPx = this.downPx_;\n      var clickPx = event.pixel;\n      var dx = downPx[0] - clickPx[0];\n      var dy = downPx[1] - clickPx[1];\n      var squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_ ? squaredDistance > this.squaredClickTolerance_ : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n  };\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  Draw.prototype.atFinish_ = function (event) {\n    var at = false;\n    if (this.sketchFeature_) {\n      var potentiallyDone = false;\n      var potentiallyFinishCoordinates = [this.finishCoordinate_];\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        var sketchCoords = /** @type {PolyCoordType} */this.sketchCoords_;\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [sketchCoords[0][0], sketchCoords[0][sketchCoords[0].length - 2]];\n      }\n      if (potentiallyDone) {\n        var map = event.map;\n        for (var i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          var finishCoordinate = potentiallyFinishCoordinates[i];\n          var finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          var pixel = event.pixel;\n          var dx = pixel[0] - finishPixel[0];\n          var dy = pixel[1] - finishPixel[1];\n          var snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.createOrUpdateSketchPoint_ = function (event) {\n    var coordinates = event.coordinate.slice();\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  };\n  /**\n   * Start the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.startDrawing_ = function (event) {\n    var start = event.coordinate;\n    var projection = event.map.getView().getProjection();\n    this.finishCoordinate_ = start;\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    var geometry = this.geometryFunction_(this.sketchCoords_, undefined, projection);\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Modify the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  Draw.prototype.modifyDrawing_ = function (event) {\n    var coordinate = event.coordinate;\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = event.map.getView().getProjection();\n    var coordinates, last;\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_( /** @type {!LineCoordType} */this.sketchCoords_, geometry, projection);\n    if (this.sketchPoint_) {\n      var sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    /** @type {LineString} */\n    var sketchLineGeom;\n    if (geometry.getType() == GeometryType.POLYGON && this.mode_ !== Mode.POLYGON) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n      var ring = geometry.getLinearRing(0);\n      sketchLineGeom = this.sketchLine_.getGeometry();\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(ring.getFlatCoordinates(), ring.getLayout());\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(ring.getLayout(), ring.getFlatCoordinates());\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n  Draw.prototype.addToDrawing_ = function (coordinate) {\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var done;\n    var coordinates;\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */this.sketchCoords_;\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  };\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n  Draw.prototype.removeLastPoint = function () {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    var geometry = this.sketchFeature_.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    var coordinates;\n    /** @type {LineString} */\n    var sketchLineGeom;\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates = /** @type {LineCoordType} */this.sketchCoords_;\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry, projection);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */this.sketchCoords_[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    if (coordinates.length === 0) {\n      this.abortDrawing();\n    }\n    this.updateSketchFeatures_();\n  };\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  Draw.prototype.finishDrawing = function () {\n    var sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    var coordinates = this.sketchCoords_;\n    var geometry = sketchFeature.getGeometry();\n    var projection = this.getMap().getView().getProjection();\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */\n      coordinates[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    }\n    // cast multi-part geometries\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(new MultiPoint([/** @type {PointCoordType} */coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(new MultiLineString([/** @type {LineCoordType} */coordinates]));\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(new MultiPolygon([/** @type {PolyCoordType} */coordinates]));\n    }\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature} The sketch feature (or null if none).\n   * @private\n   */\n  Draw.prototype.abortDrawing_ = function () {\n    this.finishCoordinate_ = null;\n    var sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  };\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n  Draw.prototype.abortDrawing = function () {\n    var sketchFeature = this.abortDrawing_();\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  };\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended into\n   * the coordinate array.\n   * @api\n   */\n  Draw.prototype.appendCoordinates = function (coordinates) {\n    var mode = this.mode_;\n    var sketchCoords = [];\n    if (mode === Mode.LINE_STRING) {\n      sketchCoords = /** @type {LineCoordType} */this.sketchCoords_;\n    } else if (mode === Mode.POLYGON) {\n      sketchCoords = this.sketchCoords_ && this.sketchCoords_.length ? /** @type {PolyCoordType} */this.sketchCoords_[0] : [];\n    }\n    // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n    var ending = sketchCoords.pop();\n    // Append coordinate list\n    for (var i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n    // Duplicate last coordinate for sketch drawing\n    this.addToDrawing_(ending);\n  };\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n  Draw.prototype.extend = function (feature) {\n    var geometry = feature.getGeometry();\n    var lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    var last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_));\n  };\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  Draw.prototype.updateSketchFeatures_ = function () {\n    var sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    var overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  };\n  /**\n   * @private\n   */\n  Draw.prototype.updateState_ = function () {\n    var map = this.getMap();\n    var active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n    this.overlay_.setMap(active ? map : null);\n  };\n  return Draw;\n}(PointerInteraction);\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry, projection) {\n    var center = fromUserCoordinate( /** @type {LineCoordType} */coordinates[0], projection);\n    var end = fromUserCoordinate( /** @type {LineCoordType} */coordinates[1], projection);\n    var radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    var geometry = opt_geometry ? /** @type {Polygon} */opt_geometry : fromCircle(new Circle(center), opt_sides);\n    var angle = opt_angle;\n    if (!opt_angle) {\n      var x = end[0] - center[0];\n      var y = end[1] - center[1];\n      angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);\n    }\n    makeRegular(geometry, center, radius, angle);\n    var userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, opt_geometry, projection) {\n    var extent = boundingExtent( /** @type {LineCoordType} */coordinates.map(function (coordinate) {\n      return fromUserCoordinate(coordinate, projection);\n    }));\n    var boxCoordinates = [[getBottomLeft(extent), getBottomRight(extent), getTopRight(extent), getTopLeft(extent), getBottomLeft(extent)]];\n    var geometry = opt_geometry;\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    var userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  var mode;\n  if (type === GeometryType.POINT || type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (type === GeometryType.LINE_STRING || type === GeometryType.MULTI_LINE_STRING) {\n    mode = Mode.LINE_STRING;\n  } else if (type === GeometryType.POLYGON || type === GeometryType.MULTI_POLYGON) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n  return (/** @type {!Mode} */mode\n  );\n}\nexport default Draw;","map":{"version":3,"names":["Circle","Event","EventType","Feature","GeometryType","InteractionProperty","LineString","MapBrowserEvent","MapBrowserEventType","MultiLineString","MultiPoint","MultiPolygon","Point","PointerInteraction","Polygon","fromCircle","makeRegular","VectorLayer","VectorSource","FALSE","TRUE","always","noModifierKeys","shiftKeyOnly","boundingExtent","getBottomLeft","getBottomRight","getTopLeft","getTopRight","createEditingStyle","fromUserCoordinate","getUserProjection","getChangeEventType","squaredDistance","squaredCoordinateDistance","Mode","POINT","LINE_STRING","POLYGON","CIRCLE","DrawEventType","DRAWSTART","DRAWEND","DRAWABORT","DrawEvent","_super","__extends","type","feature","_this","call","Draw","options","pointerOptions","stopDown","shouldHandle_","downPx_","downTimeout_","lastDragTime_","freehand_","source_","source","features_","features","snapTolerance_","snapTolerance","type_","mode_","getMode","stopClick_","stopClick","minPoints_","minPoints","maxPoints_","maxPoints","Infinity","finishCondition_","finishCondition","geometryFunction","coordinates","opt_geometry","projection","circle","NaN","center","squaredLength","setCenterAndRadius","Math","sqrt","userProjection","transform","Constructor_1","mode_1","geometry","length","setCoordinates","concat","geometryFunction_","dragVertexDelay_","dragVertexDelay","undefined","finishCoordinate_","sketchFeature_","sketchPoint_","sketchCoords_","sketchLine_","sketchLineCoords_","squaredClickTolerance_","clickTolerance","overlay_","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileInteracting","geometryName_","geometryName","condition_","condition","freehandCondition_","freehand","freehandCondition","addEventListener","ACTIVE","updateState_","prototype","setMap","map","getOverlay","handleEvent","event","originalEvent","CONTEXTMENU","preventDefault","move","POINTERMOVE","pass","POINTERDRAG","now","Date","pixel","clearTimeout","addToDrawing_","coordinate","POINTERDOWN","handlePointerMove_","pointerType","DBLCLICK","handleDownEvent","startDrawing_","setTimeout","frameState","bind","handleUpEvent","circleMode","finishDrawing","atFinish_","abortDrawing","stopPropagation","downPx","clickPx","dx","dy","modifyDrawing_","createOrUpdateSketchPoint_","at","potentiallyDone","potentiallyFinishCoordinates","sketchCoords","i","ii","finishCoordinate","finishPixel","getPixelFromCoordinate","slice","updateSketchFeatures_","sketchPointGeom","getGeometry","start","getView","getProjection","setGeometryName","setGeometry","dispatchEvent","last","sketchLineGeom","getType","ring","getLinearRing","getFlatCoordinates","getLayout","setFlatCoordinates","changed","getMap","done","pop","push","removeLastPoint","splice","sketchFeature","abortDrawing_","getCoordinates","MULTI_POINT","MULTI_LINE_STRING","MULTI_POLYGON","addFeature","getSource","clear","appendCoordinates","mode","ending","extend","lineString","sketchFeatures","overlaySource","addFeatures","active","getActive","styles","resolution","createRegularPolygon","opt_sides","opt_angle","end","radius","angle","x","y","atan","PI","createBox","extent","boxCoordinates"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/interaction/Draw.js"],"sourcesContent":["/**\n * @module ol/interaction/Draw\n */\nimport Circle from '../geom/Circle.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport InteractionProperty from './Property.js';\nimport LineString from '../geom/LineString.js';\nimport MapBrowserEvent from '../MapBrowserEvent.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport Polygon, {fromCircle, makeRegular} from '../geom/Polygon.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {FALSE, TRUE} from '../functions.js';\nimport {always, noModifierKeys, shiftKeyOnly} from '../events/condition.js';\nimport {\n  boundingExtent,\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../extent.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {fromUserCoordinate, getUserProjection} from '../proj.js';\nimport {getChangeEventType} from '../Object.js';\nimport {squaredDistance as squaredCoordinateDistance} from '../coordinate.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../geom/GeometryType.js\").default} type Geometry type of\n * the geometries being drawn with this instance.\n * @property {number} [clickTolerance=6] The maximum distance in pixels between\n * \"down\" and \"up\" for a \"up\" event to be considered a \"click\" event and\n * actually add a point/vertex to the geometry being drawn.  The default of `6`\n * was chosen for the draw interaction to behave correctly on mouse as well as\n * on touch devices.\n * @property {import(\"../Collection.js\").default<Feature>} [features]\n * Destination collection for the drawn features.\n * @property {VectorSource} [source] Destination source for\n * the drawn features.\n * @property {number} [dragVertexDelay=500] Delay in milliseconds after pointerdown\n * before the current vertex can be dragged to its exact position.\n * @property {number} [snapTolerance=12] Pixel distance for snapping to the\n * drawing finish.\n * @property {boolean} [stopClick=false] Stop click, singleclick, and\n * doubleclick events from firing during drawing.\n * @property {number} [maxPoints] The number of points that can be drawn before\n * a polygon ring or line string is finished. By default there is no\n * restriction.\n * @property {number} [minPoints] The number of points that must be drawn\n * before a polygon ring or line string can be finished. Default is `3` for\n * polygon rings and `2` for line strings.\n * @property {import(\"../events/condition.js\").Condition} [finishCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether the drawing can be finished.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style for sketch features.\n * @property {GeometryFunction} [geometryFunction]\n * Function that is called when a geometry's coordinates are updated.\n * @property {string} [geometryName] Geometry name to use for features created\n * by the draw interaction.\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled.\n * By default {@link module:ol/events/condition~noModifierKeys}, i.e. a click,\n * adds a vertex or deactivates freehand drawing.\n * @property {boolean} [freehand=false] Operate in freehand mode for lines,\n * polygons, and circles.  This makes the interaction always operate in freehand\n * mode and takes precedence over any `freehandCondition` option.\n * @property {import(\"../events/condition.js\").Condition} [freehandCondition]\n * Condition that activates freehand drawing for lines and polygons. This\n * function takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether that event should be handled. The\n * default is {@link module:ol/events/condition~shiftKeyOnly}, meaning that the\n * Shift key activates freehand drawing.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * Coordinate type when drawing points.\n * @typedef {import(\"../coordinate.js\").Coordinate} PointCoordType\n */\n\n/**\n * Coordinate type when drawing lines.\n * @typedef {Array<import(\"../coordinate.js\").Coordinate>} LineCoordType\n */\n\n/**\n * Coordinate type when drawing polygons.\n * @typedef {Array<Array<import(\"../coordinate.js\").Coordinate>>} PolyCoordType\n */\n\n/**\n * Types used for drawing coordinates.\n * @typedef {PointCoordType|LineCoordType|PolyCoordType} SketchCoordType\n */\n\n/**\n * Function that takes an array of coordinates and an optional existing geometry\n * and a projection as arguments, and returns a geometry. The optional existing\n * geometry is the geometry that is returned when the function is called without\n * a second argument.\n * @typedef {function(!SketchCoordType, import(\"../geom/SimpleGeometry.js\").default=,\n *     import(\"../proj/Projection.js\").default=):\n *     import(\"../geom/SimpleGeometry.js\").default} GeometryFunction\n */\n\n/**\n * Draw mode.  This collapses multi-part geometry types with their single-part\n * cousins.\n * @enum {string}\n */\nconst Mode = {\n  POINT: 'Point',\n  LINE_STRING: 'LineString',\n  POLYGON: 'Polygon',\n  CIRCLE: 'Circle',\n};\n\n/**\n * @enum {string}\n */\nconst DrawEventType = {\n  /**\n   * Triggered upon feature draw start\n   * @event DrawEvent#drawstart\n   * @api\n   */\n  DRAWSTART: 'drawstart',\n  /**\n   * Triggered upon feature draw end\n   * @event DrawEvent#drawend\n   * @api\n   */\n  DRAWEND: 'drawend',\n  /**\n   * Triggered upon feature draw abortion\n   * @event DrawEvent#drawabort\n   * @api\n   */\n  DRAWABORT: 'drawabort',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Draw~Draw} instances are\n * instances of this type.\n */\nclass DrawEvent extends Event {\n  /**\n   * @param {DrawEventType} type Type.\n   * @param {Feature} feature The feature drawn.\n   */\n  constructor(type, feature) {\n    super(type);\n\n    /**\n     * The feature being drawn.\n     * @type {Feature}\n     * @api\n     */\n    this.feature = feature;\n  }\n}\n\n/**\n * @classdesc\n * Interaction for drawing feature geometries.\n *\n * @fires DrawEvent\n * @api\n */\nclass Draw extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    const pointerOptions = /** @type {import(\"./Pointer.js\").Options} */ (options);\n    if (!pointerOptions.stopDown) {\n      pointerOptions.stopDown = FALSE;\n    }\n\n    super(pointerOptions);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.shouldHandle_ = false;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.downPx_ = null;\n\n    /**\n     * @type {?}\n     * @private\n     */\n    this.downTimeout_;\n\n    /**\n     * @type {number|undefined}\n     * @private\n     */\n    this.lastDragTime_;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.freehand_ = false;\n\n    /**\n     * Target source for drawn features.\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = options.source ? options.source : null;\n\n    /**\n     * Target collection for drawn features.\n     * @type {import(\"../Collection.js\").default<Feature>}\n     * @private\n     */\n    this.features_ = options.features ? options.features : null;\n\n    /**\n     * Pixel distance for snapping.\n     * @type {number}\n     * @private\n     */\n    this.snapTolerance_ = options.snapTolerance ? options.snapTolerance : 12;\n\n    /**\n     * Geometry type.\n     * @type {import(\"../geom/GeometryType.js\").default}\n     * @private\n     */\n    this.type_ = /** @type {import(\"../geom/GeometryType.js\").default} */ (options.type);\n\n    /**\n     * Drawing mode (derived from geometry type.\n     * @type {Mode}\n     * @private\n     */\n    this.mode_ = getMode(this.type_);\n\n    /**\n     * Stop click, singleclick, and doubleclick events from firing during drawing.\n     * Default is `false`.\n     * @type {boolean}\n     * @private\n     */\n    this.stopClick_ = !!options.stopClick;\n\n    /**\n     * The number of points that must be drawn before a polygon ring or line\n     * string can be finished.  The default is 3 for polygon rings and 2 for\n     * line strings.\n     * @type {number}\n     * @private\n     */\n    this.minPoints_ = options.minPoints\n      ? options.minPoints\n      : this.mode_ === Mode.POLYGON\n      ? 3\n      : 2;\n\n    /**\n     * The number of points that can be drawn before a polygon ring or line string\n     * is finished. The default is no restriction.\n     * @type {number}\n     * @private\n     */\n    this.maxPoints_ = options.maxPoints ? options.maxPoints : Infinity;\n\n    /**\n     * A function to decide if a potential finish coordinate is permissible\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.finishCondition_ = options.finishCondition\n      ? options.finishCondition\n      : TRUE;\n\n    let geometryFunction = options.geometryFunction;\n    if (!geometryFunction) {\n      if (this.type_ === GeometryType.CIRCLE) {\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, opt_geometry, projection) {\n          const circle = opt_geometry\n            ? /** @type {Circle} */ (opt_geometry)\n            : new Circle([NaN, NaN]);\n          const center = fromUserCoordinate(coordinates[0], projection);\n          const squaredLength = squaredCoordinateDistance(\n            center,\n            fromUserCoordinate(coordinates[1], projection)\n          );\n          circle.setCenterAndRadius(center, Math.sqrt(squaredLength));\n          const userProjection = getUserProjection();\n          if (userProjection) {\n            circle.transform(projection, userProjection);\n          }\n          return circle;\n        };\n      } else {\n        let Constructor;\n        const mode = this.mode_;\n        if (mode === Mode.POINT) {\n          Constructor = Point;\n        } else if (mode === Mode.LINE_STRING) {\n          Constructor = LineString;\n        } else if (mode === Mode.POLYGON) {\n          Constructor = Polygon;\n        }\n        /**\n         * @param {!LineCoordType} coordinates The coordinates.\n         * @param {import(\"../geom/SimpleGeometry.js\").default=} opt_geometry Optional geometry.\n         * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n         * @return {import(\"../geom/SimpleGeometry.js\").default} A geometry.\n         */\n        geometryFunction = function (coordinates, opt_geometry, projection) {\n          let geometry = opt_geometry;\n          if (geometry) {\n            if (mode === Mode.POLYGON) {\n              if (coordinates[0].length) {\n                // Add a closing coordinate to match the first\n                geometry.setCoordinates([\n                  coordinates[0].concat([coordinates[0][0]]),\n                ]);\n              } else {\n                geometry.setCoordinates([]);\n              }\n            } else {\n              geometry.setCoordinates(coordinates);\n            }\n          } else {\n            geometry = new Constructor(coordinates);\n          }\n          return geometry;\n        };\n      }\n    }\n\n    /**\n     * @type {GeometryFunction}\n     * @private\n     */\n    this.geometryFunction_ = geometryFunction;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.dragVertexDelay_ =\n      options.dragVertexDelay !== undefined ? options.dragVertexDelay : 500;\n\n    /**\n     * Finish coordinate for the feature (first point for polygons, last point for\n     * linestrings).\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.finishCoordinate_ = null;\n\n    /**\n     * Sketch feature.\n     * @type {Feature}\n     * @private\n     */\n    this.sketchFeature_ = null;\n\n    /**\n     * Sketch point.\n     * @type {Feature<Point>}\n     * @private\n     */\n    this.sketchPoint_ = null;\n\n    /**\n     * Sketch coordinates. Used when drawing a line or polygon.\n     * @type {SketchCoordType}\n     * @private\n     */\n    this.sketchCoords_ = null;\n\n    /**\n     * Sketch line. Used when drawing polygon.\n     * @type {Feature<LineString>}\n     * @private\n     */\n    this.sketchLine_ = null;\n\n    /**\n     * Sketch line coordinates. Used when drawing a polygon or circle.\n     * @type {LineCoordType}\n     * @private\n     */\n    this.sketchLineCoords_ = null;\n\n    /**\n     * Squared tolerance for handling up events.  If the squared distance\n     * between a down and up event is greater than this tolerance, up events\n     * will not be handled.\n     * @type {number}\n     * @private\n     */\n    this.squaredClickTolerance_ = options.clickTolerance\n      ? options.clickTolerance * options.clickTolerance\n      : 36;\n\n    /**\n     * Draw overlay where our sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: options.wrapX ? options.wrapX : false,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * Name of the geometry attribute for newly created features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : noModifierKeys;\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.freehandCondition_;\n    if (options.freehand) {\n      this.freehandCondition_ = always;\n    } else {\n      this.freehandCondition_ = options.freehandCondition\n        ? options.freehandCondition\n        : shiftKeyOnly;\n    }\n\n    this.addEventListener(\n      getChangeEventType(InteractionProperty.ACTIVE),\n      this.updateState_\n    );\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    super.setMap(map);\n    this.updateState_();\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may actually draw or finish the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(event) {\n    if (event.originalEvent.type === EventType.CONTEXTMENU) {\n      // Avoid context menu for long taps when drawing on mobile\n      event.preventDefault();\n    }\n    this.freehand_ =\n      this.mode_ !== Mode.POINT && this.freehandCondition_(event);\n    let move = event.type === MapBrowserEventType.POINTERMOVE;\n    let pass = true;\n    if (\n      !this.freehand_ &&\n      this.lastDragTime_ &&\n      event.type === MapBrowserEventType.POINTERDRAG\n    ) {\n      const now = Date.now();\n      if (now - this.lastDragTime_ >= this.dragVertexDelay_) {\n        this.downPx_ = event.pixel;\n        this.shouldHandle_ = !this.freehand_;\n        move = true;\n      } else {\n        this.lastDragTime_ = undefined;\n      }\n      if (this.shouldHandle_ && this.downTimeout_ !== undefined) {\n        clearTimeout(this.downTimeout_);\n        this.downTimeout_ = undefined;\n      }\n    }\n    if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDRAG &&\n      this.sketchFeature_ !== null\n    ) {\n      this.addToDrawing_(event.coordinate);\n      pass = false;\n    } else if (\n      this.freehand_ &&\n      event.type === MapBrowserEventType.POINTERDOWN\n    ) {\n      pass = false;\n    } else if (move) {\n      pass = event.type === MapBrowserEventType.POINTERMOVE;\n      if (pass && this.freehand_) {\n        this.handlePointerMove_(event);\n        if (this.shouldHandle_) {\n          // Avoid page scrolling when freehand drawing on mobile\n          event.preventDefault();\n        }\n      } else if (\n        event.originalEvent.pointerType == 'mouse' ||\n        (event.type === MapBrowserEventType.POINTERDRAG &&\n          this.downTimeout_ === undefined)\n      ) {\n        this.handlePointerMove_(event);\n      }\n    } else if (event.type === MapBrowserEventType.DBLCLICK) {\n      pass = false;\n    }\n\n    return super.handleEvent(event) && pass;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(event) {\n    this.shouldHandle_ = !this.freehand_;\n\n    if (this.freehand_) {\n      this.downPx_ = event.pixel;\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n      }\n      return true;\n    } else if (this.condition_(event)) {\n      this.lastDragTime_ = Date.now();\n      this.downTimeout_ = setTimeout(\n        function () {\n          this.handlePointerMove_(\n            new MapBrowserEvent(\n              MapBrowserEventType.POINTERMOVE,\n              event.map,\n              event.originalEvent,\n              false,\n              event.frameState\n            )\n          );\n        }.bind(this),\n        this.dragVertexDelay_\n      );\n      this.downPx_ = event.pixel;\n      return true;\n    } else {\n      this.lastDragTime_ = undefined;\n      return false;\n    }\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(event) {\n    let pass = true;\n\n    if (this.downTimeout_) {\n      clearTimeout(this.downTimeout_);\n      this.downTimeout_ = undefined;\n    }\n\n    this.handlePointerMove_(event);\n\n    const circleMode = this.mode_ === Mode.CIRCLE;\n\n    if (this.shouldHandle_) {\n      if (!this.finishCoordinate_) {\n        this.startDrawing_(event);\n        if (this.mode_ === Mode.POINT) {\n          this.finishDrawing();\n        }\n      } else if (this.freehand_ || circleMode) {\n        this.finishDrawing();\n      } else if (this.atFinish_(event)) {\n        if (this.finishCondition_(event)) {\n          this.finishDrawing();\n        }\n      } else {\n        this.addToDrawing_(event.coordinate);\n      }\n      pass = false;\n    } else if (this.freehand_) {\n      this.abortDrawing();\n    }\n    if (!pass && this.stopClick_) {\n      event.stopPropagation();\n    }\n    return pass;\n  }\n\n  /**\n   * Handle move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} event A move event.\n   * @private\n   */\n  handlePointerMove_(event) {\n    if (\n      this.downPx_ &&\n      ((!this.freehand_ && this.shouldHandle_) ||\n        (this.freehand_ && !this.shouldHandle_))\n    ) {\n      const downPx = this.downPx_;\n      const clickPx = event.pixel;\n      const dx = downPx[0] - clickPx[0];\n      const dy = downPx[1] - clickPx[1];\n      const squaredDistance = dx * dx + dy * dy;\n      this.shouldHandle_ = this.freehand_\n        ? squaredDistance > this.squaredClickTolerance_\n        : squaredDistance <= this.squaredClickTolerance_;\n      if (!this.shouldHandle_) {\n        return;\n      }\n    }\n\n    if (this.finishCoordinate_) {\n      this.modifyDrawing_(event);\n    } else {\n      this.createOrUpdateSketchPoint_(event);\n    }\n  }\n\n  /**\n   * Determine if an event is within the snapping tolerance of the start coord.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @return {boolean} The event is within the snapping tolerance of the start.\n   * @private\n   */\n  atFinish_(event) {\n    let at = false;\n    if (this.sketchFeature_) {\n      let potentiallyDone = false;\n      let potentiallyFinishCoordinates = [this.finishCoordinate_];\n      if (this.mode_ === Mode.LINE_STRING) {\n        potentiallyDone = this.sketchCoords_.length > this.minPoints_;\n      } else if (this.mode_ === Mode.POLYGON) {\n        const sketchCoords = /** @type {PolyCoordType} */ (this.sketchCoords_);\n        potentiallyDone = sketchCoords[0].length > this.minPoints_;\n        potentiallyFinishCoordinates = [\n          sketchCoords[0][0],\n          sketchCoords[0][sketchCoords[0].length - 2],\n        ];\n      }\n      if (potentiallyDone) {\n        const map = event.map;\n        for (let i = 0, ii = potentiallyFinishCoordinates.length; i < ii; i++) {\n          const finishCoordinate = potentiallyFinishCoordinates[i];\n          const finishPixel = map.getPixelFromCoordinate(finishCoordinate);\n          const pixel = event.pixel;\n          const dx = pixel[0] - finishPixel[0];\n          const dy = pixel[1] - finishPixel[1];\n          const snapTolerance = this.freehand_ ? 1 : this.snapTolerance_;\n          at = Math.sqrt(dx * dx + dy * dy) <= snapTolerance;\n          if (at) {\n            this.finishCoordinate_ = finishCoordinate;\n            break;\n          }\n        }\n      }\n    }\n    return at;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  createOrUpdateSketchPoint_(event) {\n    const coordinates = event.coordinate.slice();\n    if (!this.sketchPoint_) {\n      this.sketchPoint_ = new Feature(new Point(coordinates));\n      this.updateSketchFeatures_();\n    } else {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinates);\n    }\n  }\n\n  /**\n   * Start the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  startDrawing_(event) {\n    const start = event.coordinate;\n    const projection = event.map.getView().getProjection();\n    this.finishCoordinate_ = start;\n    if (this.mode_ === Mode.POINT) {\n      this.sketchCoords_ = start.slice();\n    } else if (this.mode_ === Mode.POLYGON) {\n      this.sketchCoords_ = [[start.slice(), start.slice()]];\n      this.sketchLineCoords_ = this.sketchCoords_[0];\n    } else {\n      this.sketchCoords_ = [start.slice(), start.slice()];\n    }\n    if (this.sketchLineCoords_) {\n      this.sketchLine_ = new Feature(new LineString(this.sketchLineCoords_));\n    }\n    const geometry = this.geometryFunction_(\n      this.sketchCoords_,\n      undefined,\n      projection\n    );\n    this.sketchFeature_ = new Feature();\n    if (this.geometryName_) {\n      this.sketchFeature_.setGeometryName(this.geometryName_);\n    }\n    this.sketchFeature_.setGeometry(geometry);\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Modify the drawing.\n   * @param {import(\"../MapBrowserEvent.js\").default} event Event.\n   * @private\n   */\n  modifyDrawing_(event) {\n    let coordinate = event.coordinate;\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = event.map.getView().getProjection();\n    let coordinates, last;\n    if (this.mode_ === Mode.POINT) {\n      last = this.sketchCoords_;\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      last = coordinates[coordinates.length - 1];\n      if (this.atFinish_(event)) {\n        // snap to finish\n        coordinate = this.finishCoordinate_.slice();\n      }\n    } else {\n      coordinates = this.sketchCoords_;\n      last = coordinates[coordinates.length - 1];\n    }\n    last[0] = coordinate[0];\n    last[1] = coordinate[1];\n    this.geometryFunction_(\n      /** @type {!LineCoordType} */ (this.sketchCoords_),\n      geometry,\n      projection\n    );\n    if (this.sketchPoint_) {\n      const sketchPointGeom = this.sketchPoint_.getGeometry();\n      sketchPointGeom.setCoordinates(coordinate);\n    }\n    /** @type {LineString} */\n    let sketchLineGeom;\n    if (\n      geometry.getType() == GeometryType.POLYGON &&\n      this.mode_ !== Mode.POLYGON\n    ) {\n      if (!this.sketchLine_) {\n        this.sketchLine_ = new Feature();\n      }\n      const ring = geometry.getLinearRing(0);\n      sketchLineGeom = this.sketchLine_.getGeometry();\n      if (!sketchLineGeom) {\n        sketchLineGeom = new LineString(\n          ring.getFlatCoordinates(),\n          ring.getLayout()\n        );\n        this.sketchLine_.setGeometry(sketchLineGeom);\n      } else {\n        sketchLineGeom.setFlatCoordinates(\n          ring.getLayout(),\n          ring.getFlatCoordinates()\n        );\n        sketchLineGeom.changed();\n      }\n    } else if (this.sketchLineCoords_) {\n      sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(this.sketchLineCoords_);\n    }\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Add a new coordinate to the drawing.\n   * @param {!PointCoordType} coordinate Coordinate\n   * @private\n   */\n  addToDrawing_(coordinate) {\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let done;\n    let coordinates;\n    if (this.mode_ === Mode.LINE_STRING) {\n      this.finishCoordinate_ = coordinate.slice();\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      if (coordinates.length >= this.maxPoints_) {\n        if (this.freehand_) {\n          coordinates.pop();\n        } else {\n          done = true;\n        }\n      }\n      coordinates.push(coordinate.slice());\n      if (done) {\n        this.finishCoordinate_ = coordinates[0];\n      }\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n    this.updateSketchFeatures_();\n    if (done) {\n      this.finishDrawing();\n    }\n  }\n\n  /**\n   * Remove last point of the feature currently being drawn.\n   * @api\n   */\n  removeLastPoint() {\n    if (!this.sketchFeature_) {\n      return;\n    }\n    const geometry = this.sketchFeature_.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    let coordinates;\n    /** @type {LineString} */\n    let sketchLineGeom;\n    if (this.mode_ === Mode.LINE_STRING) {\n      coordinates = /** @type {LineCoordType} */ (this.sketchCoords_);\n      coordinates.splice(-2, 1);\n      this.geometryFunction_(coordinates, geometry, projection);\n      if (coordinates.length >= 2) {\n        this.finishCoordinate_ = coordinates[coordinates.length - 2].slice();\n      }\n    } else if (this.mode_ === Mode.POLYGON) {\n      coordinates = /** @type {PolyCoordType} */ (this.sketchCoords_)[0];\n      coordinates.splice(-2, 1);\n      sketchLineGeom = this.sketchLine_.getGeometry();\n      sketchLineGeom.setCoordinates(coordinates);\n      this.geometryFunction_(this.sketchCoords_, geometry, projection);\n    }\n\n    if (coordinates.length === 0) {\n      this.abortDrawing();\n    }\n\n    this.updateSketchFeatures_();\n  }\n\n  /**\n   * Stop drawing and add the sketch feature to the target layer.\n   * The {@link module:ol/interaction/Draw~DrawEventType.DRAWEND} event is\n   * dispatched before inserting the feature.\n   * @api\n   */\n  finishDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (!sketchFeature) {\n      return;\n    }\n    let coordinates = this.sketchCoords_;\n    const geometry = sketchFeature.getGeometry();\n    const projection = this.getMap().getView().getProjection();\n    if (this.mode_ === Mode.LINE_STRING) {\n      // remove the redundant last point\n      coordinates.pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n    } else if (this.mode_ === Mode.POLYGON) {\n      // remove the redundant last point in ring\n      /** @type {PolyCoordType} */ (coordinates)[0].pop();\n      this.geometryFunction_(coordinates, geometry, projection);\n      coordinates = geometry.getCoordinates();\n    }\n\n    // cast multi-part geometries\n    if (this.type_ === GeometryType.MULTI_POINT) {\n      sketchFeature.setGeometry(\n        new MultiPoint([/** @type {PointCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === GeometryType.MULTI_LINE_STRING) {\n      sketchFeature.setGeometry(\n        new MultiLineString([/** @type {LineCoordType} */ (coordinates)])\n      );\n    } else if (this.type_ === GeometryType.MULTI_POLYGON) {\n      sketchFeature.setGeometry(\n        new MultiPolygon([/** @type {PolyCoordType} */ (coordinates)])\n      );\n    }\n\n    // First dispatch event to allow full set up of feature\n    this.dispatchEvent(new DrawEvent(DrawEventType.DRAWEND, sketchFeature));\n\n    // Then insert feature\n    if (this.features_) {\n      this.features_.push(sketchFeature);\n    }\n    if (this.source_) {\n      this.source_.addFeature(sketchFeature);\n    }\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @return {Feature} The sketch feature (or null if none).\n   * @private\n   */\n  abortDrawing_() {\n    this.finishCoordinate_ = null;\n    const sketchFeature = this.sketchFeature_;\n    this.sketchFeature_ = null;\n    this.sketchPoint_ = null;\n    this.sketchLine_ = null;\n    this.overlay_.getSource().clear(true);\n    return sketchFeature;\n  }\n\n  /**\n   * Stop drawing without adding the sketch feature to the target layer.\n   * @api\n   */\n  abortDrawing() {\n    const sketchFeature = this.abortDrawing_();\n    if (sketchFeature) {\n      this.dispatchEvent(new DrawEvent(DrawEventType.DRAWABORT, sketchFeature));\n    }\n  }\n\n  /**\n   * Append coordinates to the end of the geometry that is currently being drawn.\n   * This can be used when drawing LineStrings or Polygons. Coordinates will\n   * either be appended to the current LineString or the outer ring of the current\n   * Polygon.\n   * @param {!LineCoordType} coordinates Linear coordinates to be appended into\n   * the coordinate array.\n   * @api\n   */\n  appendCoordinates(coordinates) {\n    const mode = this.mode_;\n    let sketchCoords = [];\n    if (mode === Mode.LINE_STRING) {\n      sketchCoords = /** @type {LineCoordType} */ this.sketchCoords_;\n    } else if (mode === Mode.POLYGON) {\n      sketchCoords =\n        this.sketchCoords_ && this.sketchCoords_.length\n          ? /** @type {PolyCoordType} */ (this.sketchCoords_)[0]\n          : [];\n    }\n\n    // Remove last coordinate from sketch drawing (this coordinate follows cursor position)\n    const ending = sketchCoords.pop();\n\n    // Append coordinate list\n    for (let i = 0; i < coordinates.length; i++) {\n      this.addToDrawing_(coordinates[i]);\n    }\n\n    // Duplicate last coordinate for sketch drawing\n    this.addToDrawing_(ending);\n  }\n\n  /**\n   * Initiate draw mode by starting from an existing geometry which will\n   * receive new additional points. This only works on features with\n   * `LineString` geometries, where the interaction will extend lines by adding\n   * points to the end of the coordinates array.\n   * This will change the original feature, instead of drawing a copy.\n   *\n   * The function will dispatch a `drawstart` event.\n   *\n   * @param {!Feature<LineString>} feature Feature to be extended.\n   * @api\n   */\n  extend(feature) {\n    const geometry = feature.getGeometry();\n    const lineString = geometry;\n    this.sketchFeature_ = feature;\n    this.sketchCoords_ = lineString.getCoordinates();\n    const last = this.sketchCoords_[this.sketchCoords_.length - 1];\n    this.finishCoordinate_ = last.slice();\n    this.sketchCoords_.push(last.slice());\n    this.updateSketchFeatures_();\n    this.dispatchEvent(\n      new DrawEvent(DrawEventType.DRAWSTART, this.sketchFeature_)\n    );\n  }\n\n  /**\n   * Redraw the sketch features.\n   * @private\n   */\n  updateSketchFeatures_() {\n    const sketchFeatures = [];\n    if (this.sketchFeature_) {\n      sketchFeatures.push(this.sketchFeature_);\n    }\n    if (this.sketchLine_) {\n      sketchFeatures.push(this.sketchLine_);\n    }\n    if (this.sketchPoint_) {\n      sketchFeatures.push(this.sketchPoint_);\n    }\n    const overlaySource = this.overlay_.getSource();\n    overlaySource.clear(true);\n    overlaySource.addFeatures(sketchFeatures);\n  }\n\n  /**\n   * @private\n   */\n  updateState_() {\n    const map = this.getMap();\n    const active = this.getActive();\n    if (!map || !active) {\n      this.abortDrawing();\n    }\n    this.overlay_.setMap(active ? map : null);\n  }\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const styles = createEditingStyle();\n  return function (feature, resolution) {\n    return styles[feature.getGeometry().getType()];\n  };\n}\n\n/**\n * Create a `geometryFunction` for `type: 'Circle'` that will create a regular\n * polygon with a user specified number of sides and start angle instead of an\n * `import(\"../geom/Circle.js\").Circle` geometry.\n * @param {number=} opt_sides Number of sides of the regular polygon. Default is\n *     32.\n * @param {number=} opt_angle Angle of the first point in radians. 0 means East.\n *     Default is the angle defined by the heading from the center of the\n *     regular polygon to the current pointer position.\n * @return {GeometryFunction} Function that draws a\n *     polygon.\n * @api\n */\nexport function createRegularPolygon(opt_sides, opt_angle) {\n  return function (coordinates, opt_geometry, projection) {\n    const center = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[0],\n      projection\n    );\n    const end = fromUserCoordinate(\n      /** @type {LineCoordType} */ (coordinates)[1],\n      projection\n    );\n    const radius = Math.sqrt(squaredCoordinateDistance(center, end));\n    const geometry = opt_geometry\n      ? /** @type {Polygon} */ (opt_geometry)\n      : fromCircle(new Circle(center), opt_sides);\n    let angle = opt_angle;\n    if (!opt_angle) {\n      const x = end[0] - center[0];\n      const y = end[1] - center[1];\n      angle = Math.atan(y / x) - (x < 0 ? Math.PI : 0);\n    }\n    makeRegular(geometry, center, radius, angle);\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Create a `geometryFunction` that will create a box-shaped polygon (aligned\n * with the coordinate system axes).  Use this with the draw interaction and\n * `type: 'Circle'` to return a box instead of a circle geometry.\n * @return {GeometryFunction} Function that draws a box-shaped polygon.\n * @api\n */\nexport function createBox() {\n  return function (coordinates, opt_geometry, projection) {\n    const extent = boundingExtent(\n      /** @type {LineCoordType} */ (coordinates).map(function (coordinate) {\n        return fromUserCoordinate(coordinate, projection);\n      })\n    );\n    const boxCoordinates = [\n      [\n        getBottomLeft(extent),\n        getBottomRight(extent),\n        getTopRight(extent),\n        getTopLeft(extent),\n        getBottomLeft(extent),\n      ],\n    ];\n    let geometry = opt_geometry;\n    if (geometry) {\n      geometry.setCoordinates(boxCoordinates);\n    } else {\n      geometry = new Polygon(boxCoordinates);\n    }\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      geometry.transform(projection, userProjection);\n    }\n    return geometry;\n  };\n}\n\n/**\n * Get the drawing mode.  The mode for mult-part geometries is the same as for\n * their single-part cousins.\n * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n * @return {Mode} Drawing mode.\n */\nfunction getMode(type) {\n  let mode;\n  if (type === GeometryType.POINT || type === GeometryType.MULTI_POINT) {\n    mode = Mode.POINT;\n  } else if (\n    type === GeometryType.LINE_STRING ||\n    type === GeometryType.MULTI_LINE_STRING\n  ) {\n    mode = Mode.LINE_STRING;\n  } else if (\n    type === GeometryType.POLYGON ||\n    type === GeometryType.MULTI_POLYGON\n  ) {\n    mode = Mode.POLYGON;\n  } else if (type === GeometryType.CIRCLE) {\n    mode = Mode.CIRCLE;\n  }\n  return /** @type {!Mode} */ (mode);\n}\n\nexport default Draw;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}