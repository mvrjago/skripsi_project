{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nvar MapBrowserEvent = /** @class */function (_super) {\n  __extends(MapBrowserEvent, _super);\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean=} opt_dragging Is the map currently being dragged?\n   * @param {?import(\"./PluggableMap.js\").FrameState=} opt_frameState Frame state.\n   */\n  function MapBrowserEvent(type, map, originalEvent, opt_dragging, opt_frameState) {\n    var _this = _super.call(this, type, map, opt_frameState) || this;\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n    _this.originalEvent = originalEvent;\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n    _this.pixel_ = null;\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    _this.coordinate_ = null;\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    _this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n    return _this;\n  }\n  Object.defineProperty(MapBrowserEvent.prototype, \"pixel\", {\n    /**\n     * The map pixel relative to the viewport corresponding to the original event.\n     * @type {import(\"./pixel.js\").Pixel}\n     * @api\n     */\n    get: function get() {\n      if (!this.pixel_) {\n        this.pixel_ = this.map.getEventPixel(this.originalEvent);\n      }\n      return this.pixel_;\n    },\n    set: function set(pixel) {\n      this.pixel_ = pixel;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(MapBrowserEvent.prototype, \"coordinate\", {\n    /**\n     * The coordinate corresponding to the original browser event.  This will be in the user\n     * projection if one is set.  Otherwise it will be in the view projection.\n     * @type {import(\"./coordinate.js\").Coordinate}\n     * @api\n     */\n    get: function get() {\n      if (!this.coordinate_) {\n        this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n      }\n      return this.coordinate_;\n    },\n    set: function set(coordinate) {\n      this.coordinate_ = coordinate;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n  MapBrowserEvent.prototype.preventDefault = function () {\n    _super.prototype.preventDefault.call(this);\n    this.originalEvent.preventDefault();\n  };\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n  MapBrowserEvent.prototype.stopPropagation = function () {\n    _super.prototype.stopPropagation.call(this);\n    this.originalEvent.stopPropagation();\n  };\n  return MapBrowserEvent;\n}(MapEvent);\nexport default MapBrowserEvent;","map":{"version":3,"names":["MapEvent","MapBrowserEvent","_super","__extends","type","map","originalEvent","opt_dragging","opt_frameState","_this","call","pixel_","coordinate_","dragging","undefined","Object","defineProperty","prototype","get","getEventPixel","set","pixel","getCoordinateFromPixel","coordinate","preventDefault","stopPropagation"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/MapBrowserEvent.js"],"sourcesContent":["/**\n * @module ol/MapBrowserEvent\n */\nimport MapEvent from './MapEvent.js';\n\n/**\n * @classdesc\n * Events emitted as map browser events are instances of this type.\n * See {@link module:ol/PluggableMap~PluggableMap} for which events trigger a map browser event.\n * @template {UIEvent} EVENT\n */\nclass MapBrowserEvent extends MapEvent {\n  /**\n   * @param {string} type Event type.\n   * @param {import(\"./PluggableMap.js\").default} map Map.\n   * @param {EVENT} originalEvent Original event.\n   * @param {boolean=} opt_dragging Is the map currently being dragged?\n   * @param {?import(\"./PluggableMap.js\").FrameState=} opt_frameState Frame state.\n   */\n  constructor(type, map, originalEvent, opt_dragging, opt_frameState) {\n    super(type, map, opt_frameState);\n\n    /**\n     * The original browser event.\n     * @const\n     * @type {EVENT}\n     * @api\n     */\n    this.originalEvent = originalEvent;\n\n    /**\n     * The map pixel relative to the viewport corresponding to the original browser event.\n     * @type {?import(\"./pixel.js\").Pixel}\n     */\n    this.pixel_ = null;\n\n    /**\n     * The coordinate in the user projection corresponding to the original browser event.\n     * @type {?import(\"./coordinate.js\").Coordinate}\n     */\n    this.coordinate_ = null;\n\n    /**\n     * Indicates if the map is currently being dragged. Only set for\n     * `POINTERDRAG` and `POINTERMOVE` events. Default is `false`.\n     *\n     * @type {boolean}\n     * @api\n     */\n    this.dragging = opt_dragging !== undefined ? opt_dragging : false;\n  }\n\n  /**\n   * The map pixel relative to the viewport corresponding to the original event.\n   * @type {import(\"./pixel.js\").Pixel}\n   * @api\n   */\n  get pixel() {\n    if (!this.pixel_) {\n      this.pixel_ = this.map.getEventPixel(this.originalEvent);\n    }\n    return this.pixel_;\n  }\n  set pixel(pixel) {\n    this.pixel_ = pixel;\n  }\n\n  /**\n   * The coordinate corresponding to the original browser event.  This will be in the user\n   * projection if one is set.  Otherwise it will be in the view projection.\n   * @type {import(\"./coordinate.js\").Coordinate}\n   * @api\n   */\n  get coordinate() {\n    if (!this.coordinate_) {\n      this.coordinate_ = this.map.getCoordinateFromPixel(this.pixel);\n    }\n    return this.coordinate_;\n  }\n  set coordinate(coordinate) {\n    this.coordinate_ = coordinate;\n  }\n\n  /**\n   * Prevents the default browser action.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.preventDefault.\n   * @api\n   */\n  preventDefault() {\n    super.preventDefault();\n    this.originalEvent.preventDefault();\n  }\n\n  /**\n   * Prevents further propagation of the current event.\n   * See https://developer.mozilla.org/en-US/docs/Web/API/event.stopPropagation.\n   * @api\n   */\n  stopPropagation() {\n    super.stopPropagation();\n    this.originalEvent.stopPropagation();\n  }\n}\n\nexport default MapBrowserEvent;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,QAAQ,MAAM,eAAe;AAEpC;;;;;;AAMA,IAAAC,eAAA,0BAAAC,MAAA;EAA8BC,SAAA,CAAAF,eAAA,EAAAC,MAAA;EAC5B;;;;;;;EAOA,SAAAD,gBAAYG,IAAI,EAAEC,GAAG,EAAEC,aAAa,EAAEC,YAAY,EAAEC,cAAc;IAAlE,IAAAC,KAAA,GACEP,MAAA,CAAAQ,IAAA,OAAMN,IAAI,EAAEC,GAAG,EAAEG,cAAc,CAAC;IAEhC;;;;;;IAMAC,KAAI,CAACH,aAAa,GAAGA,aAAa;IAElC;;;;IAIAG,KAAI,CAACE,MAAM,GAAG,IAAI;IAElB;;;;IAIAF,KAAI,CAACG,WAAW,GAAG,IAAI;IAEvB;;;;;;;IAOAH,KAAI,CAACI,QAAQ,GAAGN,YAAY,KAAKO,SAAS,GAAGP,YAAY,GAAG,KAAK;;EACnE;EAOAQ,MAAA,CAAAC,cAAA,CAAIf,eAAA,CAAAgB,SAAA,SAAK;IALT;;;;;SAKA,SAAAC,IAAA;MACE,IAAI,CAAC,IAAI,CAACP,MAAM,EAAE;QAChB,IAAI,CAACA,MAAM,GAAG,IAAI,CAACN,GAAG,CAACc,aAAa,CAAC,IAAI,CAACb,aAAa,CAAC;;MAE1D,OAAO,IAAI,CAACK,MAAM;IACpB,CAAC;SACD,SAAAS,IAAUC,KAAK;MACb,IAAI,CAACV,MAAM,GAAGU,KAAK;IACrB,CAAC;;;;EAQDN,MAAA,CAAAC,cAAA,CAAIf,eAAA,CAAAgB,SAAA,cAAU;IANd;;;;;;SAMA,SAAAC,IAAA;MACE,IAAI,CAAC,IAAI,CAACN,WAAW,EAAE;QACrB,IAAI,CAACA,WAAW,GAAG,IAAI,CAACP,GAAG,CAACiB,sBAAsB,CAAC,IAAI,CAACD,KAAK,CAAC;;MAEhE,OAAO,IAAI,CAACT,WAAW;IACzB,CAAC;SACD,SAAAQ,IAAeG,UAAU;MACvB,IAAI,CAACX,WAAW,GAAGW,UAAU;IAC/B,CAAC;;;;EAED;;;;;EAKAtB,eAAA,CAAAgB,SAAA,CAAAO,cAAc,GAAd;IACEtB,MAAA,CAAAe,SAAA,CAAMO,cAAc,CAAAd,IAAA,MAAE;IACtB,IAAI,CAACJ,aAAa,CAACkB,cAAc,EAAE;EACrC,CAAC;EAED;;;;;EAKAvB,eAAA,CAAAgB,SAAA,CAAAQ,eAAe,GAAf;IACEvB,MAAA,CAAAe,SAAA,CAAMQ,eAAe,CAAAf,IAAA,MAAE;IACvB,IAAI,CAACJ,aAAa,CAACmB,eAAe,EAAE;EACtC,CAAC;EACH,OAAAxB,eAAC;AAAD,CAAC,CA3F6BD,QAAQ;AA6FtC,eAAeC,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}