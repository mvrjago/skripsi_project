{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport { apply as applyTransform, compose as composeTransform, create as createTransform } from '../../transform.js';\nimport { createCanvasContext2D } from '../../dom.js';\nimport { getBottomLeft, getBottomRight, getTopLeft, getTopRight } from '../../extent.js';\nimport { rotateAtOffset } from '../../render/canvas.js';\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n */\nvar CanvasLayerRenderer = /** @class */function (_super) {\n  __extends(CanvasLayerRenderer, _super);\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  function CanvasLayerRenderer(layer) {\n    var _this = _super.call(this, layer) || this;\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    _this.container = null;\n    /**\n     * @protected\n     * @type {number}\n     */\n    _this.renderedResolution;\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.tempTransform = createTransform();\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.pixelTransform = createTransform();\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    _this.inversePixelTransform = createTransform();\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    _this.context = null;\n    /**\n     * @type {boolean}\n     */\n    _this.containerReused = false;\n    return _this;\n  }\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   */\n  CanvasLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n    var layerClassName = this.getLayer().getClassName();\n    var container, context;\n    if (target && target.style.opacity === '' && target.className === layerClassName) {\n      var canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (context && (context.canvas.width === 0 || context.canvas.style.transform === transform)) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      var style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      var canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.clip = function (context, frameState, extent) {\n    var pixelRatio = frameState.pixelRatio;\n    var halfWidth = frameState.size[0] * pixelRatio / 2;\n    var halfHeight = frameState.size[1] * pixelRatio / 2;\n    var rotation = frameState.viewState.rotation;\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    context.save();\n    rotateAtOffset(context, -rotation, halfWidth, halfHeight);\n    context.beginPath();\n    context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);\n    context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);\n    context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);\n    context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);\n    context.clip();\n    rotateAtOffset(context, rotation, halfWidth, halfHeight);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.clipUnrotated = function (context, frameState, extent) {\n    var topLeft = getTopLeft(extent);\n    var topRight = getTopRight(extent);\n    var bottomRight = getBottomRight(extent);\n    var bottomLeft = getBottomLeft(extent);\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n    var inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  };\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  CanvasLayerRenderer.prototype.dispatchRenderEvent_ = function (type, context, frameState) {\n    var layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      var event_1 = new RenderEvent(type, this.inversePixelTransform, frameState, context);\n      layer.dispatchEvent(event_1);\n    }\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.preRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  };\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  CanvasLayerRenderer.prototype.postRender = function (context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  };\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  CanvasLayerRenderer.prototype.getRenderTransform = function (center, resolution, rotation, pixelRatio, width, height, offsetX) {\n    var dx1 = width / 2;\n    var dy1 = height / 2;\n    var sx = pixelRatio / resolution;\n    var sy = -sx;\n    var dx2 = -center[0] + offsetX;\n    var dy2 = -center[1];\n    return composeTransform(this.tempTransform, dx1, dy1, sx, sy, -rotation, dx2, dy2);\n  };\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n  CanvasLayerRenderer.prototype.getDataAtPixel = function (pixel, frameState, hitTolerance) {\n    var renderPixel = applyTransform(this.inversePixelTransform, pixel.slice());\n    var context = this.context;\n    var data;\n    try {\n      var x = Math.round(renderPixel[0]);\n      var y = Math.round(renderPixel[1]);\n      var newCanvas = document.createElement('canvas');\n      var newContext = newCanvas.getContext('2d');\n      newCanvas.width = 1;\n      newCanvas.height = 1;\n      newContext.clearRect(0, 0, 1, 1);\n      newContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = newContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        return new Uint8Array();\n      }\n      return data;\n    }\n    if (data[3] === 0) {\n      return null;\n    }\n    return data;\n  };\n  return CanvasLayerRenderer;\n}(LayerRenderer);\nexport default CanvasLayerRenderer;","map":{"version":3,"names":["LayerRenderer","RenderEvent","RenderEventType","apply","applyTransform","compose","composeTransform","create","createTransform","createCanvasContext2D","getBottomLeft","getBottomRight","getTopLeft","getTopRight","rotateAtOffset","CanvasLayerRenderer","_super","__extends","layer","_this","call","container","renderedResolution","tempTransform","pixelTransform","inversePixelTransform","context","containerReused","prototype","useContainer","target","transform","opacity","layerClassName","getLayer","getClassName","style","className","canvas","firstElementChild","HTMLCanvasElement","getContext","width","document","createElement","position","height","appendChild","left","transformOrigin","clip","frameState","extent","pixelRatio","halfWidth","size","halfHeight","rotation","viewState","topLeft","topRight","bottomRight","bottomLeft","coordinateToPixelTransform","save","beginPath","moveTo","lineTo","clipUnrotated","inverted","Math","round","dispatchRenderEvent_","type","hasListener","event_1","dispatchEvent","preRender","PRERENDER","postRender","POSTRENDER","getRenderTransform","center","resolution","offsetX","dx1","dy1","sx","sy","dx2","dy2","getDataAtPixel","pixel","hitTolerance","renderPixel","slice","data","x","y","newCanvas","newContext","clearRect","drawImage","getImageData","err","name","Uint8Array"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/renderer/canvas/Layer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/Layer\n */\nimport LayerRenderer from '../Layer.js';\nimport RenderEvent from '../../render/Event.js';\nimport RenderEventType from '../../render/EventType.js';\nimport {\n  apply as applyTransform,\n  compose as composeTransform,\n  create as createTransform,\n} from '../../transform.js';\nimport {createCanvasContext2D} from '../../dom.js';\nimport {\n  getBottomLeft,\n  getBottomRight,\n  getTopLeft,\n  getTopRight,\n} from '../../extent.js';\nimport {rotateAtOffset} from '../../render/canvas.js';\n\n/**\n * @abstract\n * @template {import(\"../../layer/Layer.js\").default} LayerType\n */\nclass CanvasLayerRenderer extends LayerRenderer {\n  /**\n   * @param {LayerType} layer Layer.\n   */\n  constructor(layer) {\n    super(layer);\n\n    /**\n     * @protected\n     * @type {HTMLElement}\n     */\n    this.container = null;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.renderedResolution;\n\n    /**\n     * A temporary transform.  The values in this transform should only be used in a\n     * function that sets the values.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.tempTransform = createTransform();\n\n    /**\n     * The transform for rendered pixels to viewport CSS pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.pixelTransform = createTransform();\n\n    /**\n     * The transform for viewport CSS pixels to rendered pixels.  This transform must\n     * be set when rendering a frame and may be used by other functions after rendering.\n     * @protected\n     * @type {import(\"../../transform.js\").Transform}\n     */\n    this.inversePixelTransform = createTransform();\n\n    /**\n     * @type {CanvasRenderingContext2D}\n     */\n    this.context = null;\n\n    /**\n     * @type {boolean}\n     */\n    this.containerReused = false;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   */\n  useContainer(target, transform, opacity) {\n    const layerClassName = this.getLayer().getClassName();\n    let container, context;\n    if (\n      target &&\n      target.style.opacity === '' &&\n      target.className === layerClassName\n    ) {\n      const canvas = target.firstElementChild;\n      if (canvas instanceof HTMLCanvasElement) {\n        context = canvas.getContext('2d');\n      }\n    }\n    if (\n      context &&\n      (context.canvas.width === 0 ||\n        context.canvas.style.transform === transform)\n    ) {\n      // Container of the previous layer renderer can be used.\n      this.container = target;\n      this.context = context;\n      this.containerReused = true;\n    } else if (this.containerReused) {\n      // Previously reused container cannot be used any more.\n      this.container = null;\n      this.context = null;\n      this.containerReused = false;\n    }\n    if (!this.container) {\n      container = document.createElement('div');\n      container.className = layerClassName;\n      let style = container.style;\n      style.position = 'absolute';\n      style.width = '100%';\n      style.height = '100%';\n      context = createCanvasContext2D();\n      const canvas = context.canvas;\n      container.appendChild(canvas);\n      style = canvas.style;\n      style.position = 'absolute';\n      style.left = '0';\n      style.transformOrigin = 'top left';\n      this.container = container;\n      this.context = context;\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clip(context, frameState, extent) {\n    const pixelRatio = frameState.pixelRatio;\n    const halfWidth = (frameState.size[0] * pixelRatio) / 2;\n    const halfHeight = (frameState.size[1] * pixelRatio) / 2;\n    const rotation = frameState.viewState.rotation;\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    context.save();\n    rotateAtOffset(context, -rotation, halfWidth, halfHeight);\n    context.beginPath();\n    context.moveTo(topLeft[0] * pixelRatio, topLeft[1] * pixelRatio);\n    context.lineTo(topRight[0] * pixelRatio, topRight[1] * pixelRatio);\n    context.lineTo(bottomRight[0] * pixelRatio, bottomRight[1] * pixelRatio);\n    context.lineTo(bottomLeft[0] * pixelRatio, bottomLeft[1] * pixelRatio);\n    context.clip();\n    rotateAtOffset(context, rotation, halfWidth, halfHeight);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {import(\"../../extent.js\").Extent} extent Clip extent.\n   * @protected\n   */\n  clipUnrotated(context, frameState, extent) {\n    const topLeft = getTopLeft(extent);\n    const topRight = getTopRight(extent);\n    const bottomRight = getBottomRight(extent);\n    const bottomLeft = getBottomLeft(extent);\n\n    applyTransform(frameState.coordinateToPixelTransform, topLeft);\n    applyTransform(frameState.coordinateToPixelTransform, topRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomRight);\n    applyTransform(frameState.coordinateToPixelTransform, bottomLeft);\n\n    const inverted = this.inversePixelTransform;\n    applyTransform(inverted, topLeft);\n    applyTransform(inverted, topRight);\n    applyTransform(inverted, bottomRight);\n    applyTransform(inverted, bottomLeft);\n\n    context.save();\n    context.beginPath();\n    context.moveTo(Math.round(topLeft[0]), Math.round(topLeft[1]));\n    context.lineTo(Math.round(topRight[0]), Math.round(topRight[1]));\n    context.lineTo(Math.round(bottomRight[0]), Math.round(bottomRight[1]));\n    context.lineTo(Math.round(bottomLeft[0]), Math.round(bottomLeft[1]));\n    context.clip();\n  }\n\n  /**\n   * @param {import(\"../../render/EventType.js\").default} type Event type.\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @private\n   */\n  dispatchRenderEvent_(type, context, frameState) {\n    const layer = this.getLayer();\n    if (layer.hasListener(type)) {\n      const event = new RenderEvent(\n        type,\n        this.inversePixelTransform,\n        frameState,\n        context\n      );\n      layer.dispatchEvent(event);\n    }\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  preRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.PRERENDER, context, frameState);\n  }\n\n  /**\n   * @param {CanvasRenderingContext2D} context Context.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @protected\n   */\n  postRender(context, frameState) {\n    this.dispatchRenderEvent_(RenderEventType.POSTRENDER, context, frameState);\n  }\n\n  /**\n   * Creates a transform for rendering to an element that will be rotated after rendering.\n   * @param {import(\"../../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} rotation Rotation.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {number} width Width of the rendered element (in pixels).\n   * @param {number} height Height of the rendered element (in pixels).\n   * @param {number} offsetX Offset on the x-axis in view coordinates.\n   * @protected\n   * @return {!import(\"../../transform.js\").Transform} Transform.\n   */\n  getRenderTransform(\n    center,\n    resolution,\n    rotation,\n    pixelRatio,\n    width,\n    height,\n    offsetX\n  ) {\n    const dx1 = width / 2;\n    const dy1 = height / 2;\n    const sx = pixelRatio / resolution;\n    const sy = -sx;\n    const dx2 = -center[0] + offsetX;\n    const dy2 = -center[1];\n    return composeTransform(\n      this.tempTransform,\n      dx1,\n      dy1,\n      sx,\n      sy,\n      -rotation,\n      dx2,\n      dy2\n    );\n  }\n\n  /**\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState FrameState.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @return {Uint8ClampedArray|Uint8Array} The result.  If there is no data at the pixel\n   *    location, null will be returned.  If there is data, but pixel values cannot be\n   *    returned, and empty array will be returned.\n   */\n  getDataAtPixel(pixel, frameState, hitTolerance) {\n    const renderPixel = applyTransform(\n      this.inversePixelTransform,\n      pixel.slice()\n    );\n    const context = this.context;\n\n    let data;\n    try {\n      const x = Math.round(renderPixel[0]);\n      const y = Math.round(renderPixel[1]);\n      const newCanvas = document.createElement('canvas');\n      const newContext = newCanvas.getContext('2d');\n      newCanvas.width = 1;\n      newCanvas.height = 1;\n      newContext.clearRect(0, 0, 1, 1);\n      newContext.drawImage(context.canvas, x, y, 1, 1, 0, 0, 1, 1);\n      data = newContext.getImageData(0, 0, 1, 1).data;\n    } catch (err) {\n      if (err.name === 'SecurityError') {\n        // tainted canvas, we assume there is data at the given pixel (although there might not be)\n        return new Uint8Array();\n      }\n      return data;\n    }\n\n    if (data[3] === 0) {\n      return null;\n    }\n    return data;\n  }\n}\n\nexport default CanvasLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}