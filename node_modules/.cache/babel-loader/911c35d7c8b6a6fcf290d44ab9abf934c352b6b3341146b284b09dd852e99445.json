{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { altKeyOnly, always, primaryAction, singleClick } from '../events/condition.js';\nimport { boundingExtent, buffer as bufferExtent, createOrUpdateFromCoordinate as createExtent } from '../extent.js';\nimport { closestOnSegment, distance as coordinateDistance, equals as coordinatesEqual, squaredDistance as squaredCoordinateDistance, squaredDistanceToSegment } from '../coordinate.js';\nimport { createEditingStyle } from '../style/Style.js';\nimport { equals } from '../array.js';\nimport { fromCircle } from '../geom/Polygon.js';\nimport { fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from '../proj.js';\nimport { getUid } from '../util.js';\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CENTER_INDEX = 0;\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nvar CIRCLE_CIRCUMFERENCE_INDEX = 1;\nvar tempExtent = [0, 0, 0, 0];\nvar tempSegment = [];\n/**\n * @enum {string}\n */\nvar ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend'\n};\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth]\n * @property {Feature} feature\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} [index]\n * @property {Array<import(\"../extent.js\").Extent>} segment\n * @property {Array<SegmentData>} [featureSegments]\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nvar ModifyEvent = /** @class */function (_super) {\n  __extends(ModifyEvent, _super);\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} MapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent}.\n   */\n  function ModifyEvent(type, features, MapBrowserEvent) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    _this.features = features;\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    _this.mapBrowserEvent = MapBrowserEvent;\n    return _this;\n  }\n  return ModifyEvent;\n}(Event);\nexport { ModifyEvent };\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nvar Modify = /** @class */function (_super) {\n  __extends(Modify, _super);\n  /**\n   * @param {Options} options Options.\n   */\n  function Modify(options) {\n    var _this = _super.call(this, /** @type {import(\"./Pointer.js\").Options} */options) || this;\n    /** @private */\n    _this.boundHandleFeatureChange_ = _this.handleFeatureChange_.bind(_this);\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    _this.condition_ = options.condition ? options.condition : primaryAction;\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    _this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    _this.deleteCondition_ = options.deleteCondition ? options.deleteCondition : _this.defaultDeleteCondition_;\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    _this.insertVertexCondition_ = options.insertVertexCondition ? options.insertVertexCondition : always;\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n    _this.vertexFeature_ = null;\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    _this.vertexSegments_ = null;\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    _this.lastPixel_ = [0, 0];\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    _this.ignoreNextSingleClick_ = false;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.modified_ = false;\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    _this.rBush_ = new RBush();\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.pixelTolerance_ = options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n    /**\n     * @type {boolean}\n     * @private\n     */\n    _this.snappedToVertex_ = false;\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    _this.changingFeature_ = false;\n    /**\n     * @type {Array}\n     * @private\n     */\n    _this.dragSegments_ = [];\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    _this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true\n    });\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    _this.SEGMENT_WRITERS_ = {\n      'Point': _this.writePointGeometry_.bind(_this),\n      'LineString': _this.writeLineStringGeometry_.bind(_this),\n      'LinearRing': _this.writeLineStringGeometry_.bind(_this),\n      'Polygon': _this.writePolygonGeometry_.bind(_this),\n      'MultiPoint': _this.writeMultiPointGeometry_.bind(_this),\n      'MultiLineString': _this.writeMultiLineStringGeometry_.bind(_this),\n      'MultiPolygon': _this.writeMultiPolygonGeometry_.bind(_this),\n      'Circle': _this.writeCircleGeometry_.bind(_this),\n      'GeometryCollection': _this.writeGeometryCollectionGeometry_.bind(_this)\n    };\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    _this.source_ = null;\n    var features;\n    if (options.source) {\n      _this.source_ = options.source;\n      features = new Collection(_this.source_.getFeatures());\n      _this.source_.addEventListener(VectorEventType.ADDFEATURE, _this.handleSourceAdd_.bind(_this));\n      _this.source_.addEventListener(VectorEventType.REMOVEFEATURE, _this.handleSourceRemove_.bind(_this));\n    } else {\n      features = options.features;\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    _this.features_ = features;\n    _this.features_.forEach(_this.addFeature_.bind(_this));\n    _this.features_.addEventListener(CollectionEventType.ADD, _this.handleFeatureAdd_.bind(_this));\n    _this.features_.addEventListener(CollectionEventType.REMOVE, _this.handleFeatureRemove_.bind(_this));\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    _this.lastPointerEvent_ = null;\n    return _this;\n  }\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.addFeature_ = function (feature) {\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      var writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n    var map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event\n   * @private\n   */\n  Modify.prototype.willModifyFeatures_ = function (evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt));\n    }\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeature_ = function (feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of canditate features is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    feature.removeEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  };\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  Modify.prototype.removeFeatureSegmentData_ = function (feature) {\n    var rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n    var nodesToRemove = [];\n    rBush.forEach(\n    /**\n     * @param {SegmentData} node RTree node.\n     */\n    function (node) {\n      if (feature === node.feature) {\n        nodesToRemove.push(node);\n      }\n    });\n    for (var i = nodesToRemove.length - 1; i >= 0; --i) {\n      var nodeToRemove = nodesToRemove[i];\n      for (var j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n      rBush.remove(nodeToRemove);\n    }\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  Modify.prototype.setActive = function (active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  Modify.prototype.setMap = function (map) {\n    this.overlay_.setMap(map);\n    _super.prototype.setMap.call(this, map);\n  };\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  Modify.prototype.getOverlay = function () {\n    return this.overlay_;\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceAdd_ = function (event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  Modify.prototype.handleSourceRemove_ = function (event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureAdd_ = function (evt) {\n    this.addFeature_( /** @type {Feature} */evt.element);\n  };\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureChange_ = function (evt) {\n    if (!this.changingFeature_) {\n      var feature = /** @type {Feature} */evt.target;\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  };\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  Modify.prototype.handleFeatureRemove_ = function (evt) {\n    var feature = /** @type {Feature} */evt.element;\n    this.removeFeature_(feature);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePointGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    /** @type {SegmentData} */\n    var segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates]\n    };\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPointGeometry_ = function (feature, geometry) {\n    var points = geometry.getCoordinates();\n    for (var i = 0, ii = points.length; i < ii; ++i) {\n      var coordinates = points[i];\n      /** @type {SegmentData} */\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates]\n      };\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeLineStringGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCoordinates();\n    for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      var segment = coordinates.slice(i, i + 2);\n      /** @type {SegmentData} */\n      var segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment\n      };\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiLineStringGeometry_ = function (feature, geometry) {\n    var lines = geometry.getCoordinates();\n    for (var j = 0, jj = lines.length; j < jj; ++j) {\n      var coordinates = lines[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writePolygonGeometry_ = function (feature, geometry) {\n    var rings = geometry.getCoordinates();\n    for (var j = 0, jj = rings.length; j < jj; ++j) {\n      var coordinates = rings[j];\n      for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        var segment = coordinates.slice(i, i + 2);\n        /** @type {SegmentData} */\n        var segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment\n        };\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeMultiPolygonGeometry_ = function (feature, geometry) {\n    var polygons = geometry.getCoordinates();\n    for (var k = 0, kk = polygons.length; k < kk; ++k) {\n      var rings = polygons[k];\n      for (var j = 0, jj = rings.length; j < jj; ++j) {\n        var coordinates = rings[j];\n        for (var i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          var segment = coordinates.slice(i, i + 2);\n          /** @type {SegmentData} */\n          var segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment\n          };\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  };\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeCircleGeometry_ = function (feature, geometry) {\n    var coordinates = geometry.getCenter();\n    /** @type {SegmentData} */\n    var centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    /** @type {SegmentData} */\n    var circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates]\n    };\n    var featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    var circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */geometry;\n    var userProjection = getUserProjection();\n    if (userProjection && this.getMap()) {\n      var projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n      circleGeometry = fromCircle( /** @type {import(\"../geom/Circle.js\").default} */circleGeometry).transform(projection, userProjection);\n    }\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  };\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  Modify.prototype.writeGeometryCollectionGeometry_ = function (feature, geometry) {\n    var geometries = geometry.getGeometriesArray();\n    for (var i = 0; i < geometries.length; ++i) {\n      var geometry_1 = geometries[i];\n      var writer = this.SEGMENT_WRITERS_[geometry_1.getType()];\n      writer(feature, geometry_1);\n    }\n  };\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  Modify.prototype.createOrUpdateVertexFeature_ = function (coordinates) {\n    var vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      var geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    return vertexFeature;\n  };\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  Modify.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n    var handled;\n    if (!mapBrowserEvent.map.getView().getInteracting() && mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE && !this.handlingDownUpSequence) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK || !this.ignoreNextSingleClick_) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n    return _super.prototype.handleEvent.call(this, mapBrowserEvent) && !handled;\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n  Modify.prototype.handleDragEvent = function (evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n    var vertex = evt.coordinate;\n    for (var i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      var dragSegment = this.dragSegments_[i];\n      var segmentData = dragSegment[0];\n      var depth = segmentData.depth;\n      var geometry = segmentData.geometry;\n      var coordinates = void 0;\n      var segment = segmentData.segment;\n      var index = dragSegment[1];\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.CIRCLE:\n          segment[0] = vertex;\n          segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            var projection = evt.map.getView().getProjection();\n            var radius = coordinateDistance(fromUserCoordinate(geometry.getCenter(), projection), fromUserCoordinate(vertex, projection));\n            var userProjection = getUserProjection();\n            if (userProjection) {\n              var circleGeometry = geometry.clone().transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry.transform(projection, userProjection).getRadius();\n            }\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex);\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Modify.prototype.handleDownEvent = function (evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    var pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    var vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      var projection = evt.map.getView().getProjection();\n      var insertVertices = [];\n      var vertex = vertexFeature.getGeometry().getCoordinates();\n      var vertexExtent = boundingExtent([vertex]);\n      var segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      var componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (var i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        var segmentDataMatch = segmentDataMatches[i];\n        var segment = segmentDataMatch.segment;\n        var uid = getUid(segmentDataMatch.geometry);\n        var depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n        if (segmentDataMatch.geometry.getType() === GeometryType.CIRCLE && segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          var closestVertex = closestOnSegmentData(pixelCoordinate, segmentDataMatch, projection);\n          if (coordinatesEqual(closestVertex, vertex) && !componentSegments[uid][0]) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n          continue;\n        }\n        if (coordinatesEqual(segment[0], vertex) && !componentSegments[uid][0]) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n        if (coordinatesEqual(segment[1], vertex) && !componentSegments[uid][1]) {\n          // prevent dragging closed linestrings by the connecting node\n          if ((segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING || segmentDataMatch.geometry.getType() === GeometryType.MULTI_LINE_STRING) && componentSegments[uid][0] && componentSegments[uid][0].index === 0) {\n            continue;\n          }\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n        if (getUid(segment) in this.vertexSegments_ && !componentSegments[uid][0] && !componentSegments[uid][1] && this.insertVertexCondition_(evt)) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n      for (var j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n    return !!this.vertexFeature_;\n  };\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  Modify.prototype.handleUpEvent = function (evt) {\n    for (var i = this.dragSegments_.length - 1; i >= 0; --i) {\n      var segmentData = this.dragSegments_[i][0];\n      var geometry = segmentData.geometry;\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        var coordinates = geometry.getCenter();\n        var centerSegmentData = segmentData.featureSegments[0];\n        var circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        var circleGeometry = geometry;\n        var userProjection = getUserProjection();\n        if (userProjection) {\n          var projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry.clone().transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(projection, userProjection);\n        }\n        this.rBush_.update(circleGeometry.getExtent(), circumferenceSegmentData);\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.modified_) {\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n    }\n    return false;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  Modify.prototype.handlePointerMove_ = function (evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  };\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_coordinate The pixel Coordinate.\n   * @private\n   */\n  Modify.prototype.handlePointerAtPixel_ = function (pixel, map, opt_coordinate) {\n    var pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n    var projection = map.getView().getProjection();\n    var sortByDistance = function (a, b) {\n      return projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) - projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection);\n    };\n    var viewExtent = fromUserExtent(createExtent(pixelCoordinate, tempExtent), projection);\n    var buffer = map.getView().getResolution() * this.pixelTolerance_;\n    var box = toUserExtent(bufferExtent(viewExtent, buffer, tempExtent), projection);\n    var rBush = this.rBush_;\n    var nodes = rBush.getInExtent(box);\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      var node = nodes[0];\n      var closestSegment = node.segment;\n      var vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      var vertexPixel = map.getPixelFromCoordinate(vertex);\n      var dist = coordinateDistance(pixel, vertexPixel);\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        var vertexSegments = {};\n        if (node.geometry.getType() === GeometryType.CIRCLE && node.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          var pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          var pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          var squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          var squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex = squaredDist1 > squaredDist2 ? closestSegment[1] : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex);\n          for (var i = 1, ii = nodes.length; i < ii; ++i) {\n            var segment = nodes[i].segment;\n            if (coordinatesEqual(closestSegment[0], segment[0]) && coordinatesEqual(closestSegment[1], segment[1]) || coordinatesEqual(closestSegment[0], segment[1]) && coordinatesEqual(closestSegment[1], segment[0])) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  };\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  Modify.prototype.insertVertex_ = function (segmentData, vertex) {\n    var segment = segmentData.segment;\n    var feature = segmentData.feature;\n    var geometry = segmentData.geometry;\n    var depth = segmentData.depth;\n    var index = segmentData.index;\n    var coordinates;\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n    this.setGeometryCoordinates_(geometry, coordinates);\n    var rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n    /** @type {SegmentData} */\n    var newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index\n    };\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n    /** @type {SegmentData} */\n    var newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1\n    };\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  };\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  Modify.prototype.removePoint = function () {\n    if (this.lastPointerEvent_ && this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG) {\n      var evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      var removed = this.removeVertex_();\n      this.dispatchEvent(new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt));\n      this.modified_ = false;\n      return removed;\n    }\n    return false;\n  };\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  Modify.prototype.removeVertex_ = function () {\n    var dragSegments = this.dragSegments_;\n    var segmentsByFeature = {};\n    var deleted = false;\n    var component, coordinates, dragSegment, geometry, i, index, left;\n    var newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        var segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          var newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments\n          };\n          this.rBush_.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  Modify.prototype.setGeometryCoordinates_ = function (geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  };\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  Modify.prototype.updateSegmentIndices_ = function (geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (segmentDataMatch) {\n      if (segmentDataMatch.geometry === geometry && (depth === undefined || segmentDataMatch.depth === undefined || equals(segmentDataMatch.depth, depth)) && segmentDataMatch.index > index) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  };\n  return Modify;\n}(PointerInteraction);\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */geometry;\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      var userProjection = getUserProjection();\n      if (userProjection) {\n        circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */circleGeometry.clone().transform(userProjection, projection);\n      }\n      var distanceToCenterSquared = squaredCoordinateDistance(circleGeometry.getCenter(), fromUserCoordinate(pointCoordinates, projection));\n      var distanceToCircumference = Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  var geometry = segmentData.geometry;\n  if (geometry.getType() === GeometryType.CIRCLE && segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n    var circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */geometry;\n    var userProjection = getUserProjection();\n    if (userProjection) {\n      circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */circleGeometry.clone().transform(userProjection, projection);\n    }\n    return toUserCoordinate(circleGeometry.getClosestPoint(fromUserCoordinate(pointCoordinates, projection)), projection);\n  }\n  var coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(closestOnSegment(coordinate, tempSegment), projection);\n}\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  var style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\nexport default Modify;","map":{"version":3,"names":["Collection","CollectionEventType","Event","EventType","Feature","GeometryType","MapBrowserEventType","Point","PointerInteraction","RBush","VectorEventType","VectorLayer","VectorSource","altKeyOnly","always","primaryAction","singleClick","boundingExtent","buffer","bufferExtent","createOrUpdateFromCoordinate","createExtent","closestOnSegment","distance","coordinateDistance","equals","coordinatesEqual","squaredDistance","squaredCoordinateDistance","squaredDistanceToSegment","createEditingStyle","fromCircle","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","getUid","CIRCLE_CENTER_INDEX","CIRCLE_CIRCUMFERENCE_INDEX","tempExtent","tempSegment","ModifyEventType","MODIFYSTART","MODIFYEND","ModifyEvent","_super","__extends","type","features","MapBrowserEvent","_this","call","mapBrowserEvent","Modify","options","boundHandleFeatureChange_","handleFeatureChange_","bind","condition_","condition","defaultDeleteCondition_","deleteCondition_","deleteCondition","insertVertexCondition_","insertVertexCondition","vertexFeature_","vertexSegments_","lastPixel_","ignoreNextSingleClick_","modified_","rBush_","pixelTolerance_","pixelTolerance","undefined","snappedToVertex_","changingFeature_","dragSegments_","overlay_","source","useSpatialIndex","wrapX","style","getDefaultStyleFunction","updateWhileAnimating","updateWhileInteracting","SEGMENT_WRITERS_","writePointGeometry_","writeLineStringGeometry_","writePolygonGeometry_","writeMultiPointGeometry_","writeMultiLineStringGeometry_","writeMultiPolygonGeometry_","writeCircleGeometry_","writeGeometryCollectionGeometry_","source_","getFeatures","addEventListener","ADDFEATURE","handleSourceAdd_","REMOVEFEATURE","handleSourceRemove_","Error","features_","forEach","addFeature_","ADD","handleFeatureAdd_","REMOVE","handleFeatureRemove_","lastPointerEvent_","prototype","feature","geometry","getGeometry","writer","getType","map","getMap","isRendered","getActive","handlePointerAtPixel_","CHANGE","willModifyFeatures_","evt","dispatchEvent","removeFeature_","removeFeatureSegmentData_","getLength","getSource","removeFeature","removeEventListener","rBush","nodesToRemove","node","push","i","length","nodeToRemove","j","splice","remove","setActive","active","setMap","getOverlay","event","element","target","coordinates","getCoordinates","segmentData","segment","insert","getExtent","points","ii","depth","index","slice","lines","jj","rings","polygons","k","kk","getCenter","centerSegmentData","circumferenceSegmentData","featureSegments","circleGeometry","userProjection","projection","getView","getProjection","clone","transform","geometries","getGeometriesArray","geometry_1","createOrUpdateVertexFeature_","vertexFeature","addFeature","setCoordinates","handleEvent","originalEvent","handled","getInteracting","POINTERMOVE","handlingDownUpSequence","handlePointerMove_","SINGLECLICK","removePoint","handleDragEvent","vertex","coordinate","dragSegment","getStride","POINT","MULTI_POINT","LINE_STRING","MULTI_LINE_STRING","POLYGON","MULTI_POLYGON","CIRCLE","setCenter","radius","setRadius","getRadius","setGeometryCoordinates_","handleDownEvent","pixelCoordinate","pixel","insertVertices","vertexExtent","segmentDataMatches","getInExtent","componentSegments","sort","compareIndexes","segmentDataMatch","uid","join","Array","closestVertex","closestOnSegmentData","insertVertex_","apply","handleUpEvent","update","opt_coordinate","getCoordinateFromPixel","sortByDistance","a","b","projectedDistanceToSegmentDataSquared","viewExtent","getResolution","box","nodes","closestSegment","vertexPixel","getPixelFromCoordinate","dist","vertexSegments","pixel1","pixel2","squaredDist1","squaredDist2","Math","sqrt","min","rTree","updateSegmentIndices_","newSegmentData","newSegmentData2","POINTERDRAG","removed","removeVertex_","dragSegments","segmentsByFeature","deleted","component","left","newIndex","right","pop","segments","delta","forEachInExtent","pointCoordinates","distanceToCenterSquared","distanceToCircumference","getClosestPoint","resolution"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/interaction/Modify.js"],"sourcesContent":["/**\n * @module ol/interaction/Modify\n */\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Feature from '../Feature.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport Point from '../geom/Point.js';\nimport PointerInteraction from './Pointer.js';\nimport RBush from '../structs/RBush.js';\nimport VectorEventType from '../source/VectorEventType.js';\nimport VectorLayer from '../layer/Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {\n  altKeyOnly,\n  always,\n  primaryAction,\n  singleClick,\n} from '../events/condition.js';\nimport {\n  boundingExtent,\n  buffer as bufferExtent,\n  createOrUpdateFromCoordinate as createExtent,\n} from '../extent.js';\nimport {\n  closestOnSegment,\n  distance as coordinateDistance,\n  equals as coordinatesEqual,\n  squaredDistance as squaredCoordinateDistance,\n  squaredDistanceToSegment,\n} from '../coordinate.js';\nimport {createEditingStyle} from '../style/Style.js';\nimport {equals} from '../array.js';\nimport {fromCircle} from '../geom/Polygon.js';\nimport {\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from '../proj.js';\nimport {getUid} from '../util.js';\n\n/**\n * The segment index assigned to a circle's center when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CENTER_INDEX = 0;\n\n/**\n * The segment index assigned to a circle's circumference when\n * breaking up a circle into ModifySegmentDataType segments.\n * @type {number}\n */\nconst CIRCLE_CIRCUMFERENCE_INDEX = 1;\n\nconst tempExtent = [0, 0, 0, 0];\nconst tempSegment = [];\n\n/**\n * @enum {string}\n */\nconst ModifyEventType = {\n  /**\n   * Triggered upon feature modification start\n   * @event ModifyEvent#modifystart\n   * @api\n   */\n  MODIFYSTART: 'modifystart',\n  /**\n   * Triggered upon feature modification end\n   * @event ModifyEvent#modifyend\n   * @api\n   */\n  MODIFYEND: 'modifyend',\n};\n\n/**\n * @typedef {Object} SegmentData\n * @property {Array<number>} [depth]\n * @property {Feature} feature\n * @property {import(\"../geom/SimpleGeometry.js\").default} geometry\n * @property {number} [index]\n * @property {Array<import(\"../extent.js\").Extent>} segment\n * @property {Array<SegmentData>} [featureSegments]\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../events/condition.js\").Condition} [condition] A function that\n * takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event will be considered to add or move a\n * vertex to the sketch. Default is\n * {@link module:ol/events/condition~primaryAction}.\n * @property {import(\"../events/condition.js\").Condition} [deleteCondition] A function\n * that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and returns a\n * boolean to indicate whether that event should be handled. By default,\n * {@link module:ol/events/condition~singleClick} with\n * {@link module:ol/events/condition~altKeyOnly} results in a vertex deletion.\n * @property {import(\"../events/condition.js\").Condition} [insertVertexCondition] A\n * function that takes an {@link module:ol/MapBrowserEvent~MapBrowserEvent} and\n * returns a boolean to indicate whether a new vertex should be added to the sketch\n * features. Default is {@link module:ol/events/condition~always}.\n * @property {number} [pixelTolerance=10] Pixel tolerance for considering the\n * pointer close enough to a segment or vertex for editing.\n * @property {import(\"../style/Style.js\").StyleLike} [style]\n * Style used for the features being modified. By default the default edit\n * style is used (see {@link module:ol/style}).\n * @property {VectorSource} [source] The vector source with\n * features to modify.  If a vector source is not provided, a feature collection\n * must be provided with the features option.\n * @property {Collection<Feature>} [features]\n * The features the interaction works on.  If a feature collection is not\n * provided, a vector source must be provided with the source option.\n * @property {boolean} [wrapX=false] Wrap the world horizontally on the sketch\n * overlay.\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/Modify~Modify} instances are\n * instances of this type.\n */\nexport class ModifyEvent extends Event {\n  /**\n   * @param {ModifyEventType} type Type.\n   * @param {Collection<Feature>} features\n   * The features modified.\n   * @param {import(\"../MapBrowserEvent.js\").default} MapBrowserEvent\n   * Associated {@link module:ol/MapBrowserEvent}.\n   */\n  constructor(type, features, MapBrowserEvent) {\n    super(type);\n\n    /**\n     * The features being modified.\n     * @type {Collection<Feature>}\n     * @api\n     */\n    this.features = features;\n\n    /**\n     * Associated {@link module:ol/MapBrowserEvent}.\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @api\n     */\n    this.mapBrowserEvent = MapBrowserEvent;\n  }\n}\n\n/**\n * @classdesc\n * Interaction for modifying feature geometries.  To modify features that have\n * been added to an existing source, construct the modify interaction with the\n * `source` option.  If you want to modify features in a collection (for example,\n * the collection used by a select interaction), construct the interaction with\n * the `features` option.  The interaction must be constructed with either a\n * `source` or `features` option.\n *\n * By default, the interaction will allow deletion of vertices when the `alt`\n * key is pressed.  To configure the interaction with a different condition\n * for deletion, use the `deleteCondition` option.\n * @fires ModifyEvent\n * @api\n */\nclass Modify extends PointerInteraction {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    super(/** @type {import(\"./Pointer.js\").Options} */ (options));\n\n    /** @private */\n    this.boundHandleFeatureChange_ = this.handleFeatureChange_.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"../events/condition.js\").Condition}\n     */\n    this.condition_ = options.condition ? options.condition : primaryAction;\n\n    /**\n     * @private\n     * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Browser event.\n     * @return {boolean} Combined condition result.\n     */\n    this.defaultDeleteCondition_ = function (mapBrowserEvent) {\n      return altKeyOnly(mapBrowserEvent) && singleClick(mapBrowserEvent);\n    };\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.deleteCondition_ = options.deleteCondition\n      ? options.deleteCondition\n      : this.defaultDeleteCondition_;\n\n    /**\n     * @type {import(\"../events/condition.js\").Condition}\n     * @private\n     */\n    this.insertVertexCondition_ = options.insertVertexCondition\n      ? options.insertVertexCondition\n      : always;\n\n    /**\n     * Editing vertex.\n     * @type {Feature}\n     * @private\n     */\n    this.vertexFeature_ = null;\n\n    /**\n     * Segments intersecting {@link this.vertexFeature_} by segment uid.\n     * @type {Object<string, boolean>}\n     * @private\n     */\n    this.vertexSegments_ = null;\n\n    /**\n     * @type {import(\"../pixel.js\").Pixel}\n     * @private\n     */\n    this.lastPixel_ = [0, 0];\n\n    /**\n     * Tracks if the next `singleclick` event should be ignored to prevent\n     * accidental deletion right after vertex creation.\n     * @type {boolean}\n     * @private\n     */\n    this.ignoreNextSingleClick_ = false;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.modified_ = false;\n\n    /**\n     * Segment RTree for each layer\n     * @type {RBush<SegmentData>}\n     * @private\n     */\n    this.rBush_ = new RBush();\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.pixelTolerance_ =\n      options.pixelTolerance !== undefined ? options.pixelTolerance : 10;\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.snappedToVertex_ = false;\n\n    /**\n     * Indicate whether the interaction is currently changing a feature's\n     * coordinates.\n     * @type {boolean}\n     * @private\n     */\n    this.changingFeature_ = false;\n\n    /**\n     * @type {Array}\n     * @private\n     */\n    this.dragSegments_ = [];\n\n    /**\n     * Draw overlay where sketch features are drawn.\n     * @type {VectorLayer}\n     * @private\n     */\n    this.overlay_ = new VectorLayer({\n      source: new VectorSource({\n        useSpatialIndex: false,\n        wrapX: !!options.wrapX,\n      }),\n      style: options.style ? options.style : getDefaultStyleFunction(),\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n    });\n\n    /**\n     * @const\n     * @private\n     * @type {!Object<string, function(Feature, import(\"../geom/Geometry.js\").default): void>}\n     */\n    this.SEGMENT_WRITERS_ = {\n      'Point': this.writePointGeometry_.bind(this),\n      'LineString': this.writeLineStringGeometry_.bind(this),\n      'LinearRing': this.writeLineStringGeometry_.bind(this),\n      'Polygon': this.writePolygonGeometry_.bind(this),\n      'MultiPoint': this.writeMultiPointGeometry_.bind(this),\n      'MultiLineString': this.writeMultiLineStringGeometry_.bind(this),\n      'MultiPolygon': this.writeMultiPolygonGeometry_.bind(this),\n      'Circle': this.writeCircleGeometry_.bind(this),\n      'GeometryCollection': this.writeGeometryCollectionGeometry_.bind(this),\n    };\n\n    /**\n     * @type {VectorSource}\n     * @private\n     */\n    this.source_ = null;\n\n    let features;\n    if (options.source) {\n      this.source_ = options.source;\n      features = new Collection(this.source_.getFeatures());\n      this.source_.addEventListener(\n        VectorEventType.ADDFEATURE,\n        this.handleSourceAdd_.bind(this)\n      );\n      this.source_.addEventListener(\n        VectorEventType.REMOVEFEATURE,\n        this.handleSourceRemove_.bind(this)\n      );\n    } else {\n      features = options.features;\n    }\n    if (!features) {\n      throw new Error('The modify interaction requires features or a source');\n    }\n\n    /**\n     * @type {Collection<Feature>}\n     * @private\n     */\n    this.features_ = features;\n\n    this.features_.forEach(this.addFeature_.bind(this));\n    this.features_.addEventListener(\n      CollectionEventType.ADD,\n      this.handleFeatureAdd_.bind(this)\n    );\n    this.features_.addEventListener(\n      CollectionEventType.REMOVE,\n      this.handleFeatureRemove_.bind(this)\n    );\n\n    /**\n     * @type {import(\"../MapBrowserEvent.js\").default}\n     * @private\n     */\n    this.lastPointerEvent_ = null;\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  addFeature_(feature) {\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      if (writer) {\n        writer(feature, geometry);\n      }\n    }\n    const map = this.getMap();\n    if (map && map.isRendered() && this.getActive()) {\n      this.handlePointerAtPixel_(this.lastPixel_, map);\n    }\n    feature.addEventListener(EventType.CHANGE, this.boundHandleFeatureChange_);\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Map browser event\n   * @private\n   */\n  willModifyFeatures_(evt) {\n    if (!this.modified_) {\n      this.modified_ = true;\n      this.dispatchEvent(\n        new ModifyEvent(ModifyEventType.MODIFYSTART, this.features_, evt)\n      );\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeature_(feature) {\n    this.removeFeatureSegmentData_(feature);\n    // Remove the vertex feature if the collection of canditate features is empty.\n    if (this.vertexFeature_ && this.features_.getLength() === 0) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    feature.removeEventListener(\n      EventType.CHANGE,\n      this.boundHandleFeatureChange_\n    );\n  }\n\n  /**\n   * @param {Feature} feature Feature.\n   * @private\n   */\n  removeFeatureSegmentData_(feature) {\n    const rBush = this.rBush_;\n    /** @type {Array<SegmentData>} */\n    const nodesToRemove = [];\n    rBush.forEach(\n      /**\n       * @param {SegmentData} node RTree node.\n       */\n      function (node) {\n        if (feature === node.feature) {\n          nodesToRemove.push(node);\n        }\n      }\n    );\n    for (let i = nodesToRemove.length - 1; i >= 0; --i) {\n      const nodeToRemove = nodesToRemove[i];\n      for (let j = this.dragSegments_.length - 1; j >= 0; --j) {\n        if (this.dragSegments_[j][0] === nodeToRemove) {\n          this.dragSegments_.splice(j, 1);\n        }\n      }\n      rBush.remove(nodeToRemove);\n    }\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  setActive(active) {\n    if (this.vertexFeature_ && !active) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    this.overlay_.setMap(map);\n    super.setMap(map);\n  }\n\n  /**\n   * Get the overlay layer that this interaction renders sketch features to.\n   * @return {VectorLayer} Overlay layer.\n   * @api\n   */\n  getOverlay() {\n    return this.overlay_;\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceAdd_(event) {\n    if (event.feature) {\n      this.features_.push(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../source/Vector.js\").VectorSourceEvent} event Event.\n   * @private\n   */\n  handleSourceRemove_(event) {\n    if (event.feature) {\n      this.features_.remove(event.feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  handleFeatureAdd_(evt) {\n    this.addFeature_(/** @type {Feature} */ (evt.element));\n  }\n\n  /**\n   * @param {import(\"../events/Event.js\").default} evt Event.\n   * @private\n   */\n  handleFeatureChange_(evt) {\n    if (!this.changingFeature_) {\n      const feature = /** @type {Feature} */ (evt.target);\n      this.removeFeature_(feature);\n      this.addFeature_(feature);\n    }\n  }\n\n  /**\n   * @param {import(\"../Collection.js\").CollectionEvent} evt Event.\n   * @private\n   */\n  handleFeatureRemove_(evt) {\n    const feature = /** @type {Feature} */ (evt.element);\n    this.removeFeature_(feature);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {Point} geometry Geometry.\n   * @private\n   */\n  writePointGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n\n    /** @type {SegmentData} */\n    const segmentData = {\n      feature: feature,\n      geometry: geometry,\n      segment: [coordinates, coordinates],\n    };\n\n    this.rBush_.insert(geometry.getExtent(), segmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPoint.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPointGeometry_(feature, geometry) {\n    const points = geometry.getCoordinates();\n    for (let i = 0, ii = points.length; i < ii; ++i) {\n      const coordinates = points[i];\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        depth: [i],\n        index: i,\n        segment: [coordinates, coordinates],\n      };\n\n      this.rBush_.insert(geometry.getExtent(), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/LineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeLineStringGeometry_(feature, geometry) {\n    const coordinates = geometry.getCoordinates();\n    for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n      const segment = coordinates.slice(i, i + 2);\n\n      /** @type {SegmentData} */\n      const segmentData = {\n        feature: feature,\n        geometry: geometry,\n        index: i,\n        segment: segment,\n      };\n\n      this.rBush_.insert(boundingExtent(segment), segmentData);\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiLineString.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiLineStringGeometry_(feature, geometry) {\n    const lines = geometry.getCoordinates();\n    for (let j = 0, jj = lines.length; j < jj; ++j) {\n      const coordinates = lines[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/Polygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writePolygonGeometry_(feature, geometry) {\n    const rings = geometry.getCoordinates();\n    for (let j = 0, jj = rings.length; j < jj; ++j) {\n      const coordinates = rings[j];\n      for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n        const segment = coordinates.slice(i, i + 2);\n\n        /** @type {SegmentData} */\n        const segmentData = {\n          feature: feature,\n          geometry: geometry,\n          depth: [j],\n          index: i,\n          segment: segment,\n        };\n\n        this.rBush_.insert(boundingExtent(segment), segmentData);\n      }\n    }\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/MultiPolygon.js\").default} geometry Geometry.\n   * @private\n   */\n  writeMultiPolygonGeometry_(feature, geometry) {\n    const polygons = geometry.getCoordinates();\n    for (let k = 0, kk = polygons.length; k < kk; ++k) {\n      const rings = polygons[k];\n      for (let j = 0, jj = rings.length; j < jj; ++j) {\n        const coordinates = rings[j];\n        for (let i = 0, ii = coordinates.length - 1; i < ii; ++i) {\n          const segment = coordinates.slice(i, i + 2);\n\n          /** @type {SegmentData} */\n          const segmentData = {\n            feature: feature,\n            geometry: geometry,\n            depth: [j, k],\n            index: i,\n            segment: segment,\n          };\n\n          this.rBush_.insert(boundingExtent(segment), segmentData);\n        }\n      }\n    }\n  }\n\n  /**\n   * We convert a circle into two segments.  The segment at index\n   * {@link CIRCLE_CENTER_INDEX} is the\n   * circle's center (a point).  The segment at index\n   * {@link CIRCLE_CIRCUMFERENCE_INDEX} is\n   * the circumference, and is not a line segment.\n   *\n   * @param {Feature} feature Feature.\n   * @param {import(\"../geom/Circle.js\").default} geometry Geometry.\n   * @private\n   */\n  writeCircleGeometry_(feature, geometry) {\n    const coordinates = geometry.getCenter();\n\n    /** @type {SegmentData} */\n    const centerSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CENTER_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    /** @type {SegmentData} */\n    const circumferenceSegmentData = {\n      feature: feature,\n      geometry: geometry,\n      index: CIRCLE_CIRCUMFERENCE_INDEX,\n      segment: [coordinates, coordinates],\n    };\n\n    const featureSegments = [centerSegmentData, circumferenceSegmentData];\n    centerSegmentData.featureSegments = featureSegments;\n    circumferenceSegmentData.featureSegments = featureSegments;\n    this.rBush_.insert(createExtent(coordinates), centerSegmentData);\n    let circleGeometry = /** @type {import(\"../geom/Geometry.js\").default} */ (geometry);\n    const userProjection = getUserProjection();\n    if (userProjection && this.getMap()) {\n      const projection = this.getMap().getView().getProjection();\n      circleGeometry = circleGeometry\n        .clone()\n        .transform(userProjection, projection);\n      circleGeometry = fromCircle(\n        /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry)\n      ).transform(projection, userProjection);\n    }\n    this.rBush_.insert(circleGeometry.getExtent(), circumferenceSegmentData);\n  }\n\n  /**\n   * @param {Feature} feature Feature\n   * @param {import(\"../geom/GeometryCollection.js\").default} geometry Geometry.\n   * @private\n   */\n  writeGeometryCollectionGeometry_(feature, geometry) {\n    const geometries = geometry.getGeometriesArray();\n    for (let i = 0; i < geometries.length; ++i) {\n      const geometry = geometries[i];\n      const writer = this.SEGMENT_WRITERS_[geometry.getType()];\n      writer(feature, geometry);\n    }\n  }\n\n  /**\n   * @param {import(\"../coordinate.js\").Coordinate} coordinates Coordinates.\n   * @return {Feature} Vertex feature.\n   * @private\n   */\n  createOrUpdateVertexFeature_(coordinates) {\n    let vertexFeature = this.vertexFeature_;\n    if (!vertexFeature) {\n      vertexFeature = new Feature(new Point(coordinates));\n      this.vertexFeature_ = vertexFeature;\n      this.overlay_.getSource().addFeature(vertexFeature);\n    } else {\n      const geometry = vertexFeature.getGeometry();\n      geometry.setCoordinates(coordinates);\n    }\n    return vertexFeature;\n  }\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may modify the geometry.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    this.lastPointerEvent_ = mapBrowserEvent;\n\n    let handled;\n    if (\n      !mapBrowserEvent.map.getView().getInteracting() &&\n      mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE &&\n      !this.handlingDownUpSequence\n    ) {\n      this.handlePointerMove_(mapBrowserEvent);\n    }\n    if (this.vertexFeature_ && this.deleteCondition_(mapBrowserEvent)) {\n      if (\n        mapBrowserEvent.type != MapBrowserEventType.SINGLECLICK ||\n        !this.ignoreNextSingleClick_\n      ) {\n        handled = this.removePoint();\n      } else {\n        handled = true;\n      }\n    }\n\n    if (mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK) {\n      this.ignoreNextSingleClick_ = false;\n    }\n\n    return super.handleEvent(mapBrowserEvent) && !handled;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   */\n  handleDragEvent(evt) {\n    this.ignoreNextSingleClick_ = false;\n    this.willModifyFeatures_(evt);\n\n    const vertex = evt.coordinate;\n    for (let i = 0, ii = this.dragSegments_.length; i < ii; ++i) {\n      const dragSegment = this.dragSegments_[i];\n      const segmentData = dragSegment[0];\n      const depth = segmentData.depth;\n      const geometry = segmentData.geometry;\n      let coordinates;\n      const segment = segmentData.segment;\n      const index = dragSegment[1];\n\n      while (vertex.length < geometry.getStride()) {\n        vertex.push(segment[index][vertex.length]);\n      }\n\n      switch (geometry.getType()) {\n        case GeometryType.POINT:\n          coordinates = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case GeometryType.MULTI_POINT:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index] = vertex;\n          segment[0] = vertex;\n          segment[1] = vertex;\n          break;\n        case GeometryType.LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          coordinates = geometry.getCoordinates();\n          coordinates[depth[1]][depth[0]][segmentData.index + index] = vertex;\n          segment[index] = vertex;\n          break;\n        case GeometryType.CIRCLE:\n          segment[0] = vertex;\n          segment[1] = vertex;\n          if (segmentData.index === CIRCLE_CENTER_INDEX) {\n            this.changingFeature_ = true;\n            geometry.setCenter(vertex);\n            this.changingFeature_ = false;\n          } else {\n            // We're dragging the circle's circumference:\n            this.changingFeature_ = true;\n            const projection = evt.map.getView().getProjection();\n            let radius = coordinateDistance(\n              fromUserCoordinate(geometry.getCenter(), projection),\n              fromUserCoordinate(vertex, projection)\n            );\n            const userProjection = getUserProjection();\n            if (userProjection) {\n              const circleGeometry = geometry\n                .clone()\n                .transform(userProjection, projection);\n              circleGeometry.setRadius(radius);\n              radius = circleGeometry\n                .transform(projection, userProjection)\n                .getRadius();\n            }\n            geometry.setRadius(radius);\n            this.changingFeature_ = false;\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (coordinates) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n      }\n    }\n    this.createOrUpdateVertexFeature_(vertex);\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleDownEvent(evt) {\n    if (!this.condition_(evt)) {\n      return false;\n    }\n    const pixelCoordinate = evt.coordinate;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, pixelCoordinate);\n    this.dragSegments_.length = 0;\n    this.modified_ = false;\n    const vertexFeature = this.vertexFeature_;\n    if (vertexFeature) {\n      const projection = evt.map.getView().getProjection();\n      const insertVertices = [];\n      const vertex = vertexFeature.getGeometry().getCoordinates();\n      const vertexExtent = boundingExtent([vertex]);\n      const segmentDataMatches = this.rBush_.getInExtent(vertexExtent);\n      const componentSegments = {};\n      segmentDataMatches.sort(compareIndexes);\n      for (let i = 0, ii = segmentDataMatches.length; i < ii; ++i) {\n        const segmentDataMatch = segmentDataMatches[i];\n        const segment = segmentDataMatch.segment;\n        let uid = getUid(segmentDataMatch.geometry);\n        const depth = segmentDataMatch.depth;\n        if (depth) {\n          uid += '-' + depth.join('-'); // separate feature components\n        }\n        if (!componentSegments[uid]) {\n          componentSegments[uid] = new Array(2);\n        }\n\n        if (\n          segmentDataMatch.geometry.getType() === GeometryType.CIRCLE &&\n          segmentDataMatch.index === CIRCLE_CIRCUMFERENCE_INDEX\n        ) {\n          const closestVertex = closestOnSegmentData(\n            pixelCoordinate,\n            segmentDataMatch,\n            projection\n          );\n          if (\n            coordinatesEqual(closestVertex, vertex) &&\n            !componentSegments[uid][0]\n          ) {\n            this.dragSegments_.push([segmentDataMatch, 0]);\n            componentSegments[uid][0] = segmentDataMatch;\n          }\n          continue;\n        }\n\n        if (\n          coordinatesEqual(segment[0], vertex) &&\n          !componentSegments[uid][0]\n        ) {\n          this.dragSegments_.push([segmentDataMatch, 0]);\n          componentSegments[uid][0] = segmentDataMatch;\n          continue;\n        }\n\n        if (\n          coordinatesEqual(segment[1], vertex) &&\n          !componentSegments[uid][1]\n        ) {\n          // prevent dragging closed linestrings by the connecting node\n          if (\n            (segmentDataMatch.geometry.getType() === GeometryType.LINE_STRING ||\n              segmentDataMatch.geometry.getType() ===\n                GeometryType.MULTI_LINE_STRING) &&\n            componentSegments[uid][0] &&\n            componentSegments[uid][0].index === 0\n          ) {\n            continue;\n          }\n\n          this.dragSegments_.push([segmentDataMatch, 1]);\n          componentSegments[uid][1] = segmentDataMatch;\n          continue;\n        }\n\n        if (\n          getUid(segment) in this.vertexSegments_ &&\n          !componentSegments[uid][0] &&\n          !componentSegments[uid][1] &&\n          this.insertVertexCondition_(evt)\n        ) {\n          insertVertices.push([segmentDataMatch, vertex]);\n        }\n      }\n\n      if (insertVertices.length) {\n        this.willModifyFeatures_(evt);\n      }\n\n      for (let j = insertVertices.length - 1; j >= 0; --j) {\n        this.insertVertex_.apply(this, insertVertices[j]);\n      }\n    }\n    return !!this.vertexFeature_;\n  }\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @return {boolean} If the event was consumed.\n   */\n  handleUpEvent(evt) {\n    for (let i = this.dragSegments_.length - 1; i >= 0; --i) {\n      const segmentData = this.dragSegments_[i][0];\n      const geometry = segmentData.geometry;\n      if (geometry.getType() === GeometryType.CIRCLE) {\n        // Update a circle object in the R* bush:\n        const coordinates = geometry.getCenter();\n        const centerSegmentData = segmentData.featureSegments[0];\n        const circumferenceSegmentData = segmentData.featureSegments[1];\n        centerSegmentData.segment[0] = coordinates;\n        centerSegmentData.segment[1] = coordinates;\n        circumferenceSegmentData.segment[0] = coordinates;\n        circumferenceSegmentData.segment[1] = coordinates;\n        this.rBush_.update(createExtent(coordinates), centerSegmentData);\n        let circleGeometry = geometry;\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          const projection = evt.map.getView().getProjection();\n          circleGeometry = circleGeometry\n            .clone()\n            .transform(userProjection, projection);\n          circleGeometry = fromCircle(circleGeometry).transform(\n            projection,\n            userProjection\n          );\n        }\n        this.rBush_.update(\n          circleGeometry.getExtent(),\n          circumferenceSegmentData\n        );\n      } else {\n        this.rBush_.update(boundingExtent(segmentData.segment), segmentData);\n      }\n    }\n    if (this.modified_) {\n      this.dispatchEvent(\n        new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt)\n      );\n      this.modified_ = false;\n    }\n    return false;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} evt Event.\n   * @private\n   */\n  handlePointerMove_(evt) {\n    this.lastPixel_ = evt.pixel;\n    this.handlePointerAtPixel_(evt.pixel, evt.map, evt.coordinate);\n  }\n\n  /**\n   * @param {import(\"../pixel.js\").Pixel} pixel Pixel\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_coordinate The pixel Coordinate.\n   * @private\n   */\n  handlePointerAtPixel_(pixel, map, opt_coordinate) {\n    const pixelCoordinate = opt_coordinate || map.getCoordinateFromPixel(pixel);\n    const projection = map.getView().getProjection();\n    const sortByDistance = function (a, b) {\n      return (\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, a, projection) -\n        projectedDistanceToSegmentDataSquared(pixelCoordinate, b, projection)\n      );\n    };\n\n    const viewExtent = fromUserExtent(\n      createExtent(pixelCoordinate, tempExtent),\n      projection\n    );\n    const buffer = map.getView().getResolution() * this.pixelTolerance_;\n    const box = toUserExtent(\n      bufferExtent(viewExtent, buffer, tempExtent),\n      projection\n    );\n\n    const rBush = this.rBush_;\n    const nodes = rBush.getInExtent(box);\n    if (nodes.length > 0) {\n      nodes.sort(sortByDistance);\n      const node = nodes[0];\n      const closestSegment = node.segment;\n      let vertex = closestOnSegmentData(pixelCoordinate, node, projection);\n      const vertexPixel = map.getPixelFromCoordinate(vertex);\n      let dist = coordinateDistance(pixel, vertexPixel);\n      if (dist <= this.pixelTolerance_) {\n        /** @type {Object<string, boolean>} */\n        const vertexSegments = {};\n\n        if (\n          node.geometry.getType() === GeometryType.CIRCLE &&\n          node.index === CIRCLE_CIRCUMFERENCE_INDEX\n        ) {\n          this.snappedToVertex_ = true;\n          this.createOrUpdateVertexFeature_(vertex);\n        } else {\n          const pixel1 = map.getPixelFromCoordinate(closestSegment[0]);\n          const pixel2 = map.getPixelFromCoordinate(closestSegment[1]);\n          const squaredDist1 = squaredCoordinateDistance(vertexPixel, pixel1);\n          const squaredDist2 = squaredCoordinateDistance(vertexPixel, pixel2);\n          dist = Math.sqrt(Math.min(squaredDist1, squaredDist2));\n          this.snappedToVertex_ = dist <= this.pixelTolerance_;\n          if (this.snappedToVertex_) {\n            vertex =\n              squaredDist1 > squaredDist2\n                ? closestSegment[1]\n                : closestSegment[0];\n          }\n          this.createOrUpdateVertexFeature_(vertex);\n          for (let i = 1, ii = nodes.length; i < ii; ++i) {\n            const segment = nodes[i].segment;\n            if (\n              (coordinatesEqual(closestSegment[0], segment[0]) &&\n                coordinatesEqual(closestSegment[1], segment[1])) ||\n              (coordinatesEqual(closestSegment[0], segment[1]) &&\n                coordinatesEqual(closestSegment[1], segment[0]))\n            ) {\n              vertexSegments[getUid(segment)] = true;\n            } else {\n              break;\n            }\n          }\n        }\n\n        vertexSegments[getUid(closestSegment)] = true;\n        this.vertexSegments_ = vertexSegments;\n        return;\n      }\n    }\n    if (this.vertexFeature_) {\n      this.overlay_.getSource().removeFeature(this.vertexFeature_);\n      this.vertexFeature_ = null;\n    }\n  }\n\n  /**\n   * @param {SegmentData} segmentData Segment data.\n   * @param {import(\"../coordinate.js\").Coordinate} vertex Vertex.\n   * @private\n   */\n  insertVertex_(segmentData, vertex) {\n    const segment = segmentData.segment;\n    const feature = segmentData.feature;\n    const geometry = segmentData.geometry;\n    const depth = segmentData.depth;\n    const index = segmentData.index;\n    let coordinates;\n\n    while (vertex.length < geometry.getStride()) {\n      vertex.push(0);\n    }\n\n    switch (geometry.getType()) {\n      case GeometryType.MULTI_LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.MULTI_POLYGON:\n        coordinates = geometry.getCoordinates();\n        coordinates[depth[1]][depth[0]].splice(index + 1, 0, vertex);\n        break;\n      case GeometryType.LINE_STRING:\n        coordinates = geometry.getCoordinates();\n        coordinates.splice(index + 1, 0, vertex);\n        break;\n      default:\n        return;\n    }\n\n    this.setGeometryCoordinates_(geometry, coordinates);\n    const rTree = this.rBush_;\n    rTree.remove(segmentData);\n    this.updateSegmentIndices_(geometry, index, depth, 1);\n\n    /** @type {SegmentData} */\n    const newSegmentData = {\n      segment: [segment[0], vertex],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData.segment), newSegmentData);\n    this.dragSegments_.push([newSegmentData, 1]);\n\n    /** @type {SegmentData} */\n    const newSegmentData2 = {\n      segment: [vertex, segment[1]],\n      feature: feature,\n      geometry: geometry,\n      depth: depth,\n      index: index + 1,\n    };\n\n    rTree.insert(boundingExtent(newSegmentData2.segment), newSegmentData2);\n    this.dragSegments_.push([newSegmentData2, 0]);\n    this.ignoreNextSingleClick_ = true;\n  }\n\n  /**\n   * Removes the vertex currently being pointed.\n   * @return {boolean} True when a vertex was removed.\n   * @api\n   */\n  removePoint() {\n    if (\n      this.lastPointerEvent_ &&\n      this.lastPointerEvent_.type != MapBrowserEventType.POINTERDRAG\n    ) {\n      const evt = this.lastPointerEvent_;\n      this.willModifyFeatures_(evt);\n      const removed = this.removeVertex_();\n      this.dispatchEvent(\n        new ModifyEvent(ModifyEventType.MODIFYEND, this.features_, evt)\n      );\n      this.modified_ = false;\n      return removed;\n    }\n    return false;\n  }\n\n  /**\n   * Removes a vertex from all matching features.\n   * @return {boolean} True when a vertex was removed.\n   * @private\n   */\n  removeVertex_() {\n    const dragSegments = this.dragSegments_;\n    const segmentsByFeature = {};\n    let deleted = false;\n    let component, coordinates, dragSegment, geometry, i, index, left;\n    let newIndex, right, segmentData, uid;\n    for (i = dragSegments.length - 1; i >= 0; --i) {\n      dragSegment = dragSegments[i];\n      segmentData = dragSegment[0];\n      uid = getUid(segmentData.feature);\n      if (segmentData.depth) {\n        // separate feature components\n        uid += '-' + segmentData.depth.join('-');\n      }\n      if (!(uid in segmentsByFeature)) {\n        segmentsByFeature[uid] = {};\n      }\n      if (dragSegment[1] === 0) {\n        segmentsByFeature[uid].right = segmentData;\n        segmentsByFeature[uid].index = segmentData.index;\n      } else if (dragSegment[1] == 1) {\n        segmentsByFeature[uid].left = segmentData;\n        segmentsByFeature[uid].index = segmentData.index + 1;\n      }\n    }\n    for (uid in segmentsByFeature) {\n      right = segmentsByFeature[uid].right;\n      left = segmentsByFeature[uid].left;\n      index = segmentsByFeature[uid].index;\n      newIndex = index - 1;\n      if (left !== undefined) {\n        segmentData = left;\n      } else {\n        segmentData = right;\n      }\n      if (newIndex < 0) {\n        newIndex = 0;\n      }\n      geometry = segmentData.geometry;\n      coordinates = geometry.getCoordinates();\n      component = coordinates;\n      deleted = false;\n      switch (geometry.getType()) {\n        case GeometryType.MULTI_LINE_STRING:\n          if (coordinates[segmentData.depth[0]].length > 2) {\n            coordinates[segmentData.depth[0]].splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.LINE_STRING:\n          if (coordinates.length > 2) {\n            coordinates.splice(index, 1);\n            deleted = true;\n          }\n          break;\n        case GeometryType.MULTI_POLYGON:\n          component = component[segmentData.depth[1]];\n        /* falls through */\n        case GeometryType.POLYGON:\n          component = component[segmentData.depth[0]];\n          if (component.length > 4) {\n            if (index == component.length - 1) {\n              index = 0;\n            }\n            component.splice(index, 1);\n            deleted = true;\n            if (index === 0) {\n              // close the ring again\n              component.pop();\n              component.push(component[0]);\n              newIndex = component.length - 1;\n            }\n          }\n          break;\n        default:\n        // pass\n      }\n\n      if (deleted) {\n        this.setGeometryCoordinates_(geometry, coordinates);\n        const segments = [];\n        if (left !== undefined) {\n          this.rBush_.remove(left);\n          segments.push(left.segment[0]);\n        }\n        if (right !== undefined) {\n          this.rBush_.remove(right);\n          segments.push(right.segment[1]);\n        }\n        if (left !== undefined && right !== undefined) {\n          /** @type {SegmentData} */\n          const newSegmentData = {\n            depth: segmentData.depth,\n            feature: segmentData.feature,\n            geometry: segmentData.geometry,\n            index: newIndex,\n            segment: segments,\n          };\n\n          this.rBush_.insert(\n            boundingExtent(newSegmentData.segment),\n            newSegmentData\n          );\n        }\n        this.updateSegmentIndices_(geometry, index, segmentData.depth, -1);\n        if (this.vertexFeature_) {\n          this.overlay_.getSource().removeFeature(this.vertexFeature_);\n          this.vertexFeature_ = null;\n        }\n        dragSegments.length = 0;\n      }\n    }\n    return deleted;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {Array} coordinates Coordinates.\n   * @private\n   */\n  setGeometryCoordinates_(geometry, coordinates) {\n    this.changingFeature_ = true;\n    geometry.setCoordinates(coordinates);\n    this.changingFeature_ = false;\n  }\n\n  /**\n   * @param {import(\"../geom/SimpleGeometry.js\").default} geometry Geometry.\n   * @param {number} index Index.\n   * @param {Array<number>|undefined} depth Depth.\n   * @param {number} delta Delta (1 or -1).\n   * @private\n   */\n  updateSegmentIndices_(geometry, index, depth, delta) {\n    this.rBush_.forEachInExtent(geometry.getExtent(), function (\n      segmentDataMatch\n    ) {\n      if (\n        segmentDataMatch.geometry === geometry &&\n        (depth === undefined ||\n          segmentDataMatch.depth === undefined ||\n          equals(segmentDataMatch.depth, depth)) &&\n        segmentDataMatch.index > index\n      ) {\n        segmentDataMatch.index += delta;\n      }\n    });\n  }\n}\n\n/**\n * @param {SegmentData} a The first segment data.\n * @param {SegmentData} b The second segment data.\n * @return {number} The difference in indexes.\n */\nfunction compareIndexes(a, b) {\n  return a.index - b.index;\n}\n\n/**\n * Returns the distance from a point to a line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The coordinates of the point from\n *        which to calculate the distance.\n * @param {SegmentData} segmentData The object describing the line\n *        segment we are calculating the distance to.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {number} The square of the distance between a point and a line segment.\n */\nfunction projectedDistanceToSegmentDataSquared(\n  pointCoordinates,\n  segmentData,\n  projection\n) {\n  const geometry = segmentData.geometry;\n\n  if (geometry.getType() === GeometryType.CIRCLE) {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n\n    if (segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX) {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry\n          .clone()\n          .transform(userProjection, projection));\n      }\n      const distanceToCenterSquared = squaredCoordinateDistance(\n        circleGeometry.getCenter(),\n        fromUserCoordinate(pointCoordinates, projection)\n      );\n      const distanceToCircumference =\n        Math.sqrt(distanceToCenterSquared) - circleGeometry.getRadius();\n      return distanceToCircumference * distanceToCircumference;\n    }\n  }\n\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return squaredDistanceToSegment(coordinate, tempSegment);\n}\n\n/**\n * Returns the point closest to a given line segment.\n *\n * @param {import(\"../coordinate.js\").Coordinate} pointCoordinates The point to which a closest point\n *        should be found.\n * @param {SegmentData} segmentData The object describing the line\n *        segment which should contain the closest point.\n * @param {import(\"../proj/Projection.js\").default} projection The view projection.\n * @return {import(\"../coordinate.js\").Coordinate} The point closest to the specified line segment.\n */\nfunction closestOnSegmentData(pointCoordinates, segmentData, projection) {\n  const geometry = segmentData.geometry;\n\n  if (\n    geometry.getType() === GeometryType.CIRCLE &&\n    segmentData.index === CIRCLE_CIRCUMFERENCE_INDEX\n  ) {\n    let circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (geometry);\n    const userProjection = getUserProjection();\n    if (userProjection) {\n      circleGeometry = /** @type {import(\"../geom/Circle.js\").default} */ (circleGeometry\n        .clone()\n        .transform(userProjection, projection));\n    }\n    return toUserCoordinate(\n      circleGeometry.getClosestPoint(\n        fromUserCoordinate(pointCoordinates, projection)\n      ),\n      projection\n    );\n  }\n  const coordinate = fromUserCoordinate(pointCoordinates, projection);\n  tempSegment[0] = fromUserCoordinate(segmentData.segment[0], projection);\n  tempSegment[1] = fromUserCoordinate(segmentData.segment[1], projection);\n  return toUserCoordinate(\n    closestOnSegment(coordinate, tempSegment),\n    projection\n  );\n}\n\n/**\n * @return {import(\"../style/Style.js\").StyleFunction} Styles.\n */\nfunction getDefaultStyleFunction() {\n  const style = createEditingStyle();\n  return function (feature, resolution) {\n    return style[GeometryType.POINT];\n  };\n}\n\nexport default Modify;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}