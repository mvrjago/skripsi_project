{"ast":null,"code":"'use strict';\n\n// Load modules\nconst Any = require('../any');\nconst Ref = require('../../ref');\nconst Hoek = require('hoek');\n\n// Declare internals\n\nconst internals = {};\ninternals.isoDate = /^(?:[-+]\\d{2})?(?:\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?![T]$|[T][\\d]+Z$)(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[.,]\\d+(?!:))?)(?:\\2[0-5]\\d(?:[.,]\\d+)?)?(?:[Z]|(?:[+-])(?:[01]\\d|2[0-3])(?::?[0-5]\\d)?)?)?)?$/;\ninternals.invalidDate = new Date('');\ninternals.isIsoDate = (() => {\n  const isoString = internals.isoDate.toString();\n  return date => {\n    return date && date.toString() === isoString;\n  };\n})();\ninternals.Date = class extends Any {\n  constructor() {\n    super();\n    this._type = 'date';\n  }\n  _base(value, state, options) {\n    const result = {\n      value: options.convert && internals.Date.toDate(value, this._flags.format, this._flags.timestamp, this._flags.multiplier) || value\n    };\n    if (result.value instanceof Date && !isNaN(result.value.getTime())) {\n      result.errors = null;\n    } else if (!options.convert) {\n      result.errors = this.createError('date.strict', null, state, options);\n    } else {\n      let type;\n      if (internals.isIsoDate(this._flags.format)) {\n        type = 'isoDate';\n      } else if (this._flags.timestamp) {\n        type = `timestamp.${this._flags.timestamp}`;\n      } else {\n        type = 'base';\n      }\n      result.errors = this.createError(`date.${type}`, null, state, options);\n    }\n    return result;\n  }\n  static toDate(value, format, timestamp, multiplier) {\n    if (value instanceof Date) {\n      return value;\n    }\n    if (typeof value === 'string' || typeof value === 'number' && !isNaN(value) && isFinite(value)) {\n      if (typeof value === 'string' && /^[+-]?\\d+(\\.\\d+)?$/.test(value)) {\n        value = parseFloat(value);\n      }\n      let date;\n      if (format && internals.isIsoDate(format)) {\n        date = format.test(value) ? new Date(value) : internals.invalidDate;\n      } else if (timestamp && multiplier) {\n        date = /^\\s*$/.test(value) ? internals.invalidDate : new Date(value * multiplier);\n      } else {\n        date = new Date(value);\n      }\n      if (!isNaN(date.getTime())) {\n        return date;\n      }\n    }\n    return null;\n  }\n  iso() {\n    if (this._flags.format === internals.isoDate) {\n      return this;\n    }\n    const obj = this.clone();\n    obj._flags.format = internals.isoDate;\n    return obj;\n  }\n  timestamp() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'javascript';\n    const allowed = ['javascript', 'unix'];\n    Hoek.assert(allowed.includes(type), '\"type\" must be one of \"' + allowed.join('\", \"') + '\"');\n    if (this._flags.timestamp === type) {\n      return this;\n    }\n    const obj = this.clone();\n    obj._flags.timestamp = type;\n    obj._flags.multiplier = type === 'unix' ? 1000 : 1;\n    return obj;\n  }\n  _isIsoDate(value) {\n    return internals.isoDate.test(value);\n  }\n};\ninternals.compare = function (type, compare) {\n  return function (date) {\n    const isNow = date === 'now';\n    const isRef = Ref.isRef(date);\n    if (!isNow && !isRef) {\n      date = internals.Date.toDate(date);\n    }\n    Hoek.assert(date, 'Invalid date format');\n    return this._test(type, date, function (value, state, options) {\n      let compareTo;\n      if (isNow) {\n        compareTo = Date.now();\n      } else if (isRef) {\n        compareTo = internals.Date.toDate(date(state.reference || state.parent, options));\n        if (!compareTo) {\n          return this.createError('date.ref', {\n            ref: date.key\n          }, state, options);\n        }\n        compareTo = compareTo.getTime();\n      } else {\n        compareTo = date.getTime();\n      }\n      if (compare(value.getTime(), compareTo)) {\n        return value;\n      }\n      return this.createError('date.' + type, {\n        limit: new Date(compareTo)\n      }, state, options);\n    });\n  };\n};\ninternals.Date.prototype.min = internals.compare('min', (value, date) => value >= date);\ninternals.Date.prototype.max = internals.compare('max', (value, date) => value <= date);\ninternals.Date.prototype.greater = internals.compare('greater', (value, date) => value > date);\ninternals.Date.prototype.less = internals.compare('less', (value, date) => value < date);\nmodule.exports = new internals.Date();","map":{"version":3,"names":["Any","require","Ref","Hoek","internals","isoDate","invalidDate","Date","isIsoDate","isoString","toString","date","constructor","_type","_base","value","state","options","result","convert","toDate","_flags","format","timestamp","multiplier","isNaN","getTime","errors","createError","type","isFinite","test","parseFloat","iso","obj","clone","arguments","length","undefined","allowed","assert","includes","join","_isIsoDate","compare","isNow","isRef","_test","compareTo","now","reference","parent","ref","key","limit","prototype","min","max","greater","less","module","exports"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/joi/lib/types/date/index.js"],"sourcesContent":["'use strict';\n\n// Load modules\n\nconst Any = require('../any');\nconst Ref = require('../../ref');\nconst Hoek = require('hoek');\n\n\n// Declare internals\n\nconst internals = {};\n\ninternals.isoDate = /^(?:[-+]\\d{2})?(?:\\d{4}(?!\\d{2}\\b))(?:(-?)(?:(?:0[1-9]|1[0-2])(?:\\1(?:[12]\\d|0[1-9]|3[01]))?|W(?:[0-4]\\d|5[0-2])(?:-?[1-7])?|(?:00[1-9]|0[1-9]\\d|[12]\\d{2}|3(?:[0-5]\\d|6[1-6])))(?![T]$|[T][\\d]+Z$)(?:[T\\s](?:(?:(?:[01]\\d|2[0-3])(?:(:?)[0-5]\\d)?|24\\:?00)(?:[.,]\\d+(?!:))?)(?:\\2[0-5]\\d(?:[.,]\\d+)?)?(?:[Z]|(?:[+-])(?:[01]\\d|2[0-3])(?::?[0-5]\\d)?)?)?)?$/;\ninternals.invalidDate = new Date('');\ninternals.isIsoDate = (() => {\n\n    const isoString = internals.isoDate.toString();\n\n    return (date) => {\n\n        return date && (date.toString() === isoString);\n    };\n})();\n\ninternals.Date = class extends Any {\n\n    constructor() {\n\n        super();\n        this._type = 'date';\n    }\n\n    _base(value, state, options) {\n\n        const result = {\n            value: (options.convert && internals.Date.toDate(value, this._flags.format, this._flags.timestamp, this._flags.multiplier)) || value\n        };\n\n        if (result.value instanceof Date && !isNaN(result.value.getTime())) {\n            result.errors = null;\n        }\n        else if (!options.convert) {\n            result.errors = this.createError('date.strict', null, state, options);\n        }\n        else {\n            let type;\n            if (internals.isIsoDate(this._flags.format)) {\n                type = 'isoDate';\n            }\n            else if (this._flags.timestamp) {\n                type = `timestamp.${this._flags.timestamp}`;\n            }\n            else {\n                type = 'base';\n            }\n\n            result.errors = this.createError(`date.${type}`, null, state, options);\n        }\n\n        return result;\n    }\n\n    static toDate(value, format, timestamp, multiplier) {\n\n        if (value instanceof Date) {\n            return value;\n        }\n\n        if (typeof value === 'string' ||\n            (typeof value === 'number' && !isNaN(value) && isFinite(value))) {\n\n            if (typeof value === 'string' &&\n                /^[+-]?\\d+(\\.\\d+)?$/.test(value)) {\n\n                value = parseFloat(value);\n            }\n\n            let date;\n            if (format && internals.isIsoDate(format)) {\n                date = format.test(value) ? new Date(value) : internals.invalidDate;\n            }\n            else if (timestamp && multiplier) {\n                date = /^\\s*$/.test(value) ? internals.invalidDate : new Date(value * multiplier);\n            }\n            else {\n                date = new Date(value);\n            }\n\n            if (!isNaN(date.getTime())) {\n                return date;\n            }\n        }\n\n        return null;\n    }\n\n    iso() {\n\n        if (this._flags.format === internals.isoDate) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.format = internals.isoDate;\n        return obj;\n    }\n\n    timestamp(type = 'javascript') {\n\n        const allowed = ['javascript', 'unix'];\n        Hoek.assert(allowed.includes(type), '\"type\" must be one of \"' + allowed.join('\", \"') + '\"');\n\n        if (this._flags.timestamp === type) {\n            return this;\n        }\n\n        const obj = this.clone();\n        obj._flags.timestamp = type;\n        obj._flags.multiplier = type === 'unix' ? 1000 : 1;\n        return obj;\n    }\n\n    _isIsoDate(value) {\n\n        return internals.isoDate.test(value);\n    }\n\n};\n\ninternals.compare = function (type, compare) {\n\n    return function (date) {\n\n        const isNow = date === 'now';\n        const isRef = Ref.isRef(date);\n\n        if (!isNow && !isRef) {\n            date = internals.Date.toDate(date);\n        }\n\n        Hoek.assert(date, 'Invalid date format');\n\n        return this._test(type, date, function (value, state, options) {\n\n            let compareTo;\n            if (isNow) {\n                compareTo = Date.now();\n            }\n            else if (isRef) {\n                compareTo = internals.Date.toDate(date(state.reference || state.parent, options));\n\n                if (!compareTo) {\n                    return this.createError('date.ref', { ref: date.key }, state, options);\n                }\n\n                compareTo = compareTo.getTime();\n            }\n            else {\n                compareTo = date.getTime();\n            }\n\n            if (compare(value.getTime(), compareTo)) {\n                return value;\n            }\n\n            return this.createError('date.' + type, { limit: new Date(compareTo) }, state, options);\n        });\n    };\n};\n\n\ninternals.Date.prototype.min = internals.compare('min', (value, date) => value >= date);\ninternals.Date.prototype.max = internals.compare('max', (value, date) => value <= date);\ninternals.Date.prototype.greater = internals.compare('greater', (value, date) => value > date);\ninternals.Date.prototype.less = internals.compare('less', (value, date) => value < date);\n\n\nmodule.exports = new internals.Date();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}