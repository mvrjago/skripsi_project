{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Image\n */\nimport Event from '../events/Event.js';\nimport ImageState from '../ImageState.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\nimport { ENABLE_RASTER_REPROJECTION } from '../reproj/common.js';\nimport { IMAGE_SMOOTHING_DISABLED } from './common.js';\nimport { abstract } from '../util.js';\nimport { equals } from '../extent.js';\nimport { equivalent } from '../proj.js';\nimport { linearFindNearest } from '../array.js';\n/**\n * @enum {string}\n */\nexport var ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nvar ImageSourceEvent = /** @class */function (_super) {\n  __extends(ImageSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  function ImageSourceEvent(type, image) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    _this.image = image;\n    return _this;\n  }\n  return ImageSourceEvent;\n}(Event);\nexport { ImageSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {Array<number>} [resolutions]\n * @property {import(\"./State.js\").default} [state]\n */\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @abstract\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageSource = /** @class */function (_super) {\n  __extends(ImageSource, _super);\n  /**\n   * @param {Options} options Single image source options.\n   */\n  function ImageSource(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state\n    }) || this;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.resolutions_ = options.resolutions !== undefined ? options.resolutions : null;\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    _this.reprojectedImage_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.reprojectedRevision_ = 0;\n    /**\n     * @private\n     * @type {object|undefined}\n     */\n    _this.contextOptions_ = options.imageSmoothing === false ? IMAGE_SMOOTHING_DISABLED : undefined;\n    return _this;\n  }\n  /**\n   * @return {Array<number>} Resolutions.\n   */\n  ImageSource.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * @return {Object|undefined} Context options.\n   */\n  ImageSource.prototype.getContextOptions = function () {\n    return this.contextOptions_;\n  };\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  ImageSource.prototype.findNearestResolution = function (resolution) {\n    if (this.resolutions_) {\n      var idx = linearFindNearest(this.resolutions_, resolution, 0);\n      resolution = this.resolutions_[idx];\n    }\n    return resolution;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   */\n  ImageSource.prototype.getImage = function (extent, resolution, pixelRatio, projection) {\n    var sourceProjection = this.getProjection();\n    if (!ENABLE_RASTER_REPROJECTION || !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    } else {\n      if (this.reprojectedImage_) {\n        if (this.reprojectedRevision_ == this.getRevision() && equivalent(this.reprojectedImage_.getProjection(), projection) && this.reprojectedImage_.getResolution() == resolution && equals(this.reprojectedImage_.getExtent(), extent)) {\n          return this.reprojectedImage_;\n        }\n        this.reprojectedImage_.dispose();\n        this.reprojectedImage_ = null;\n      }\n      this.reprojectedImage_ = new ReprojImage(sourceProjection, projection, extent, resolution, pixelRatio, function (extent, resolution, pixelRatio) {\n        return this.getImageInternal(extent, resolution, pixelRatio, sourceProjection);\n      }.bind(this), this.contextOptions_);\n      this.reprojectedRevision_ = this.getRevision();\n      return this.reprojectedImage_;\n    }\n  };\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   * @protected\n   */\n  ImageSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    return abstract();\n  };\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  ImageSource.prototype.handleImageChange = function (event) {\n    var image = /** @type {import(\"../Image.js\").default} */event.target;\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image));\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image));\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        this.dispatchEvent(new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image));\n        break;\n      default:\n      // pass\n    }\n  };\n\n  return ImageSource;\n}(Source);\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */image.getImage().src = src;\n}\nexport default ImageSource;","map":{"version":3,"names":["Event","ImageState","ReprojImage","Source","ENABLE_RASTER_REPROJECTION","IMAGE_SMOOTHING_DISABLED","abstract","equals","equivalent","linearFindNearest","ImageSourceEventType","IMAGELOADSTART","IMAGELOADEND","IMAGELOADERROR","ImageSourceEvent","_super","__extends","type","image","_this","call","ImageSource","options","attributions","projection","state","resolutions_","resolutions","undefined","reprojectedImage_","reprojectedRevision_","contextOptions_","imageSmoothing","prototype","getResolutions","getContextOptions","findNearestResolution","resolution","idx","getImage","extent","pixelRatio","sourceProjection","getProjection","getImageInternal","getRevision","getResolution","getExtent","dispose","bind","handleImageChange","event","target","getState","LOADING","loading","dispatchEvent","LOADED","ERROR","defaultImageLoadFunction","src"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/Image.js"],"sourcesContent":["/**\n * @module ol/source/Image\n */\nimport Event from '../events/Event.js';\nimport ImageState from '../ImageState.js';\nimport ReprojImage from '../reproj/Image.js';\nimport Source from './Source.js';\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\nimport {IMAGE_SMOOTHING_DISABLED} from './common.js';\nimport {abstract} from '../util.js';\nimport {equals} from '../extent.js';\nimport {equivalent} from '../proj.js';\nimport {linearFindNearest} from '../array.js';\n\n/**\n * @enum {string}\n */\nexport const ImageSourceEventType = {\n  /**\n   * Triggered when an image starts loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadstart\n   * @api\n   */\n  IMAGELOADSTART: 'imageloadstart',\n\n  /**\n   * Triggered when an image finishes loading.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloadend\n   * @api\n   */\n  IMAGELOADEND: 'imageloadend',\n\n  /**\n   * Triggered if image loading results in an error.\n   * @event module:ol/source/Image.ImageSourceEvent#imageloaderror\n   * @api\n   */\n  IMAGELOADERROR: 'imageloaderror',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\n * type.\n */\nexport class ImageSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Image.js\").default} image The image.\n   */\n  constructor(type, image) {\n    super(type);\n\n    /**\n     * The image related to the event.\n     * @type {import(\"../Image.js\").default}\n     * @api\n     */\n    this.image = image;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {Array<number>} [resolutions]\n * @property {import(\"./State.js\").default} [state]\n */\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * Base class for sources providing a single image.\n * @abstract\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageSource extends Source {\n  /**\n   * @param {Options} options Single image source options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      projection: options.projection,\n      state: options.state,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.resolutions_ =\n      options.resolutions !== undefined ? options.resolutions : null;\n\n    /**\n     * @private\n     * @type {import(\"../reproj/Image.js\").default}\n     */\n    this.reprojectedImage_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.reprojectedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {object|undefined}\n     */\n    this.contextOptions_ =\n      options.imageSmoothing === false ? IMAGE_SMOOTHING_DISABLED : undefined;\n  }\n\n  /**\n   * @return {Array<number>} Resolutions.\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @return {Object|undefined} Context options.\n   */\n  getContextOptions() {\n    return this.contextOptions_;\n  }\n\n  /**\n   * @protected\n   * @param {number} resolution Resolution.\n   * @return {number} Resolution.\n   */\n  findNearestResolution(resolution) {\n    if (this.resolutions_) {\n      const idx = linearFindNearest(this.resolutions_, resolution, 0);\n      resolution = this.resolutions_[idx];\n    }\n    return resolution;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   */\n  getImage(extent, resolution, pixelRatio, projection) {\n    const sourceProjection = this.getProjection();\n    if (\n      !ENABLE_RASTER_REPROJECTION ||\n      !sourceProjection ||\n      !projection ||\n      equivalent(sourceProjection, projection)\n    ) {\n      if (sourceProjection) {\n        projection = sourceProjection;\n      }\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\n    } else {\n      if (this.reprojectedImage_) {\n        if (\n          this.reprojectedRevision_ == this.getRevision() &&\n          equivalent(this.reprojectedImage_.getProjection(), projection) &&\n          this.reprojectedImage_.getResolution() == resolution &&\n          equals(this.reprojectedImage_.getExtent(), extent)\n        ) {\n          return this.reprojectedImage_;\n        }\n        this.reprojectedImage_.dispose();\n        this.reprojectedImage_ = null;\n      }\n\n      this.reprojectedImage_ = new ReprojImage(\n        sourceProjection,\n        projection,\n        extent,\n        resolution,\n        pixelRatio,\n        function (extent, resolution, pixelRatio) {\n          return this.getImageInternal(\n            extent,\n            resolution,\n            pixelRatio,\n            sourceProjection\n          );\n        }.bind(this),\n        this.contextOptions_\n      );\n      this.reprojectedRevision_ = this.getRevision();\n\n      return this.reprojectedImage_;\n    }\n  }\n\n  /**\n   * @abstract\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageBase.js\").default} Single image.\n   * @protected\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    return abstract();\n  }\n\n  /**\n   * Handle image change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleImageChange(event) {\n    const image = /** @type {import(\"../Image.js\").default} */ (event.target);\n    switch (image.getState()) {\n      case ImageState.LOADING:\n        this.loading = true;\n        this.dispatchEvent(\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART, image)\n        );\n        break;\n      case ImageState.LOADED:\n        this.loading = false;\n        this.dispatchEvent(\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND, image)\n        );\n        break;\n      case ImageState.ERROR:\n        this.loading = false;\n        this.dispatchEvent(\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR, image)\n        );\n        break;\n      default:\n      // pass\n    }\n  }\n}\n\n/**\n * Default image load function for image sources that use import(\"../Image.js\").Image image\n * instances.\n * @param {import(\"../Image.js\").default} image Image.\n * @param {string} src Source.\n */\nexport function defaultImageLoadFunction(image, src) {\n  /** @type {HTMLImageElement|HTMLVideoElement} */ (image.getImage()).src = src;\n}\n\nexport default ImageSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}