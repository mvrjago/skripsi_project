{"ast":null,"code":"var fontWeights = {\n  thin: 100,\n  hairline: 100,\n  'ultra-light': 100,\n  'extra-light': 100,\n  light: 200,\n  book: 300,\n  regular: 400,\n  normal: 400,\n  plain: 400,\n  roman: 400,\n  standard: 400,\n  medium: 500,\n  'semi-bold': 600,\n  'demi-bold': 600,\n  bold: 700,\n  heavy: 800,\n  black: 800,\n  'extra-bold': 800,\n  'ultra-black': 900,\n  'extra-black': 900,\n  'ultra-bold': 900,\n  'heavy-black': 900,\n  fat: 900,\n  poster: 900\n};\nvar sp = ' ';\nvar italicRE = /(italic|oblique)$/i;\nvar fontCache = {};\nmodule.exports = function (fonts, size, lineHeight) {\n  var cssData = fontCache[fonts];\n  if (!cssData) {\n    if (!Array.isArray(fonts)) {\n      fonts = [fonts];\n    }\n    var weight = 400;\n    var style = 'normal';\n    var fontFamilies = [];\n    var haveWeight, haveStyle;\n    for (var i = 0, ii = fonts.length; i < ii; ++i) {\n      var font = fonts[i];\n      var parts = font.split(' ');\n      var maybeWeight = parts[parts.length - 1].toLowerCase();\n      if (maybeWeight == 'normal' || maybeWeight == 'italic' || maybeWeight == 'oblique') {\n        style = haveStyle ? style : maybeWeight;\n        parts.pop();\n        maybeWeight = parts[parts.length - 1].toLowerCase();\n      } else if (italicRE.test(maybeWeight)) {\n        maybeWeight = maybeWeight.replace(italicRE, '');\n        style = haveStyle ? style : parts[parts.length - 1].replace(maybeWeight, '');\n      }\n      for (var w in fontWeights) {\n        if (maybeWeight == w || maybeWeight == w.replace('-', '') || maybeWeight == w.replace('-', sp)) {\n          weight = haveWeight ? weight : fontWeights[w];\n          parts.pop();\n          break;\n        }\n      }\n      if (!haveWeight && typeof maybeWeight == 'number') {\n        weight = maybeWeight;\n      }\n      var fontFamily = parts.join(sp).replace('Klokantech Noto Sans', 'Noto Sans');\n      if (fontFamily.indexOf(sp) !== -1) {\n        fontFamily = '\"' + fontFamily + '\"';\n      }\n      fontFamilies.push(fontFamily);\n    }\n    // CSS font property: font-style font-weight font-size/line-height font-family\n    cssData = fontCache[fonts] = [style, weight, fontFamilies];\n  }\n  return cssData[0] + sp + cssData[1] + sp + size + 'px' + (lineHeight ? '/' + lineHeight : '') + sp + cssData[2];\n};","map":{"version":3,"names":["fontWeights","thin","hairline","light","book","regular","normal","plain","roman","standard","medium","bold","heavy","black","fat","poster","sp","italicRE","fontCache","module","exports","fonts","size","lineHeight","cssData","Array","isArray","weight","style","fontFamilies","haveWeight","haveStyle","i","ii","length","font","parts","split","maybeWeight","toLowerCase","pop","test","replace","w","fontFamily","join","indexOf","push"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/mapbox-to-css-font/index.js"],"sourcesContent":["var fontWeights = {\n  thin: 100,\n  hairline: 100,\n  'ultra-light': 100,\n  'extra-light': 100,\n  light: 200,\n  book: 300,\n  regular: 400,\n  normal: 400,\n  plain: 400,\n  roman: 400,\n  standard: 400,\n  medium: 500,\n  'semi-bold': 600,\n  'demi-bold': 600,\n  bold: 700,\n  heavy: 800,\n  black: 800,\n  'extra-bold': 800,\n  'ultra-black': 900,\n  'extra-black': 900,\n  'ultra-bold': 900,\n  'heavy-black': 900,\n  fat: 900,\n  poster: 900\n};\nvar sp = ' ';\nvar italicRE = /(italic|oblique)$/i;\n\nvar fontCache = {};\n\nmodule.exports = function(fonts, size, lineHeight) {\n  var cssData = fontCache[fonts];\n  if (!cssData) {\n    if (!Array.isArray(fonts)) {\n      fonts = [fonts];\n    }\n    var weight = 400;\n    var style = 'normal';\n    var fontFamilies = [];\n    var haveWeight, haveStyle;\n    for (var i = 0, ii = fonts.length; i < ii; ++i) {\n      var font = fonts[i];\n      var parts = font.split(' ');\n      var maybeWeight = parts[parts.length - 1].toLowerCase();\n      if (maybeWeight == 'normal' || maybeWeight == 'italic' || maybeWeight == 'oblique') {\n        style = haveStyle ? style : maybeWeight;\n        parts.pop();\n        maybeWeight = parts[parts.length - 1].toLowerCase();\n      } else if (italicRE.test(maybeWeight)) {\n        maybeWeight = maybeWeight.replace(italicRE, '');\n        style = haveStyle ? style : parts[parts.length - 1].replace(maybeWeight, '');\n      }\n      for (var w in fontWeights) {\n        if (maybeWeight == w || maybeWeight == w.replace('-', '') || maybeWeight == w.replace('-', sp)) {\n          weight = haveWeight ? weight : fontWeights[w];\n          parts.pop();\n          break;\n        }\n      }\n      if (!haveWeight && typeof maybeWeight == 'number') {\n        weight = maybeWeight;\n      }\n      var fontFamily = parts.join(sp)\n        .replace('Klokantech Noto Sans', 'Noto Sans');\n      if (fontFamily.indexOf(sp) !== -1) {\n        fontFamily = '\"' + fontFamily + '\"';\n      }\n      fontFamilies.push(fontFamily);\n    }\n    // CSS font property: font-style font-weight font-size/line-height font-family\n    cssData = fontCache[fonts] = [style, weight, fontFamilies];\n  }\n  return cssData[0] + sp + cssData[1] + sp + size + 'px' + (lineHeight ? '/' + lineHeight : '') + sp + cssData[2];\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}