{"ast":null,"code":"/**\n * @module ol/source/TileDebug\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport XYZ from './XYZ.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { toSize } from '../size.js';\nvar LabeledTile = /** @class */function (_super) {\n  __extends(LabeledTile, _super);\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {string} text Text.\n   */\n  function LabeledTile(tileCoord, tileSize, text) {\n    var _this = _super.call(this, tileCoord, TileState.LOADED) || this;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.tileSize_ = tileSize;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.text_ = text;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.canvas_ = null;\n    return _this;\n  }\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement} Image.\n   */\n  LabeledTile.prototype.getImage = function () {\n    if (this.canvas_) {\n      return this.canvas_;\n    } else {\n      var tileSize = this.tileSize_;\n      var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n      context.strokeStyle = 'grey';\n      context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n      context.fillStyle = 'grey';\n      context.strokeStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '24px sans-serif';\n      context.lineWidth = 4;\n      context.strokeText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n      context.fillText(this.text_, tileSize[0] / 2, tileSize[1] / 2, tileSize[0]);\n      this.canvas_ = context.canvas;\n      return context.canvas;\n    }\n  };\n  LabeledTile.prototype.load = function () {};\n  return LabeledTile;\n}(Tile);\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [zDirection=0] Set to `1` when debugging `VectorTile` sources with\n * a default configuration. Indicates which resolution should be used by a renderer if\n * the view resolution does not match any resolution of the tile source. If 0, the nearest\n * resolution will be used. If 1, the nearest lower resolution will be used. If -1, the\n * nearest higher resolution will be used.\n */\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n *\n * Uses Canvas context2d, so requires Canvas support.\n * @api\n */\nvar TileDebug = /** @class */function (_super) {\n  __extends(TileDebug, _super);\n  /**\n   * @param {Options=} opt_options Debug tile options.\n   */\n  function TileDebug(opt_options) {\n    var _this = this;\n    /**\n     * @type {Options}\n     */\n    var options = opt_options || {};\n    _this = _super.call(this, {\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection\n    }) || this;\n    return _this;\n  }\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {!LabeledTile} Tile.\n   */\n  TileDebug.prototype.getTile = function (z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return (/** @type {!LabeledTile} */this.tileCache.get(tileCoordKey)\n      );\n    } else {\n      var tileSize = toSize(this.tileGrid.getTileSize(z));\n      var tileCoord = [z, x, y];\n      var textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\n      var text = void 0;\n      if (textTileCoord) {\n        text = 'z:' + textTileCoord[0] + ' x:' + textTileCoord[1] + ' y:' + textTileCoord[2];\n      } else {\n        text = 'none';\n      }\n      var tile = new LabeledTile(tileCoord, tileSize, text);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  };\n  return TileDebug;\n}(XYZ);\nexport default TileDebug;","map":{"version":3,"names":["Tile","TileState","XYZ","createCanvasContext2D","getKeyZXY","toSize","LabeledTile","_super","__extends","tileCoord","tileSize","text","_this","call","LOADED","tileSize_","text_","canvas_","prototype","getImage","context","strokeStyle","strokeRect","fillStyle","textAlign","textBaseline","font","lineWidth","strokeText","fillText","canvas","load","TileDebug","opt_options","options","opaque","projection","tileGrid","wrapX","undefined","zDirection","getTile","z","x","y","tileCoordKey","tileCache","containsKey","get","getTileSize","textTileCoord","getTileCoordForTileUrlFunction","tile","set"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/TileDebug.js"],"sourcesContent":["/**\n * @module ol/source/TileDebug\n */\n\nimport Tile from '../Tile.js';\nimport TileState from '../TileState.js';\nimport XYZ from './XYZ.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {toSize} from '../size.js';\n\nclass LabeledTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {string} text Text.\n   */\n  constructor(tileCoord, tileSize, text) {\n    super(tileCoord, TileState.LOADED);\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = tileSize;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = text;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.canvas_ = null;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement} Image.\n   */\n  getImage() {\n    if (this.canvas_) {\n      return this.canvas_;\n    } else {\n      const tileSize = this.tileSize_;\n      const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n\n      context.strokeStyle = 'grey';\n      context.strokeRect(0.5, 0.5, tileSize[0] + 0.5, tileSize[1] + 0.5);\n\n      context.fillStyle = 'grey';\n      context.strokeStyle = 'white';\n      context.textAlign = 'center';\n      context.textBaseline = 'middle';\n      context.font = '24px sans-serif';\n      context.lineWidth = 4;\n      context.strokeText(\n        this.text_,\n        tileSize[0] / 2,\n        tileSize[1] / 2,\n        tileSize[0]\n      );\n      context.fillText(\n        this.text_,\n        tileSize[0] / 2,\n        tileSize[1] / 2,\n        tileSize[0]\n      );\n\n      this.canvas_ = context.canvas;\n      return context.canvas;\n    }\n  }\n\n  load() {}\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [projection='EPSG:3857'] Optional projection.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [zDirection=0] Set to `1` when debugging `VectorTile` sources with\n * a default configuration. Indicates which resolution should be used by a renderer if\n * the view resolution does not match any resolution of the tile source. If 0, the nearest\n * resolution will be used. If 1, the nearest lower resolution will be used. If -1, the\n * nearest higher resolution will be used.\n */\n\n/**\n * @classdesc\n * A pseudo tile source, which does not fetch tiles from a server, but renders\n * a grid outline for the tile grid/projection along with the coordinates for\n * each tile. See examples/canvas-tiles for an example.\n *\n * Uses Canvas context2d, so requires Canvas support.\n * @api\n */\nclass TileDebug extends XYZ {\n  /**\n   * @param {Options=} opt_options Debug tile options.\n   */\n  constructor(opt_options) {\n    /**\n     * @type {Options}\n     */\n    const options = opt_options || {};\n\n    super({\n      opaque: false,\n      projection: options.projection,\n      tileGrid: options.tileGrid,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      zDirection: options.zDirection,\n    });\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @return {!LabeledTile} Tile.\n   */\n  getTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return /** @type {!LabeledTile} */ (this.tileCache.get(tileCoordKey));\n    } else {\n      const tileSize = toSize(this.tileGrid.getTileSize(z));\n      const tileCoord = [z, x, y];\n      const textTileCoord = this.getTileCoordForTileUrlFunction(tileCoord);\n      let text;\n      if (textTileCoord) {\n        text =\n          'z:' +\n          textTileCoord[0] +\n          ' x:' +\n          textTileCoord[1] +\n          ' y:' +\n          textTileCoord[2];\n      } else {\n        text = 'none';\n      }\n      const tile = new LabeledTile(tileCoord, tileSize, text);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  }\n}\n\nexport default TileDebug;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}