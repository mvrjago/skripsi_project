{"ast":null,"code":"'use strict';\n\n// Load modules\nconst Hoek = require('hoek');\nconst Any = require('./types/any');\nconst Cast = require('./cast');\nconst Errors = require('./errors');\nconst Lazy = require('./types/lazy');\nconst Ref = require('./ref');\nconst Settings = require('./types/any/settings');\n\n// Declare internals\n\nconst internals = {\n  alternatives: require('./types/alternatives'),\n  array: require('./types/array'),\n  boolean: require('./types/boolean'),\n  binary: require('./types/binary'),\n  date: require('./types/date'),\n  func: require('./types/func'),\n  number: require('./types/number'),\n  object: require('./types/object'),\n  string: require('./types/string'),\n  symbol: require('./types/symbol')\n};\ninternals.callWithDefaults = function (schema, args) {\n  Hoek.assert(this, 'Must be invoked on a Joi instance.');\n  if (this._defaults) {\n    schema = this._defaults(schema);\n  }\n  schema._currentJoi = this;\n  return schema._init(...args);\n};\ninternals.root = function () {\n  const any = new Any();\n  const root = any.clone();\n  Any.prototype._currentJoi = root;\n  root._currentJoi = root;\n  root.any = function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n    Hoek.assert(args.length === 0, 'Joi.any() does not allow arguments.');\n    return internals.callWithDefaults.call(this, any, args);\n  };\n  root.alternatives = root.alt = function () {\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n    return internals.callWithDefaults.call(this, internals.alternatives, args);\n  };\n  root.array = function () {\n    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      args[_key3] = arguments[_key3];\n    }\n    Hoek.assert(args.length === 0, 'Joi.array() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.array, args);\n  };\n  root.boolean = root.bool = function () {\n    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      args[_key4] = arguments[_key4];\n    }\n    Hoek.assert(args.length === 0, 'Joi.boolean() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.boolean, args);\n  };\n  root.binary = function () {\n    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {\n      args[_key5] = arguments[_key5];\n    }\n    Hoek.assert(args.length === 0, 'Joi.binary() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.binary, args);\n  };\n  root.date = function () {\n    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {\n      args[_key6] = arguments[_key6];\n    }\n    Hoek.assert(args.length === 0, 'Joi.date() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.date, args);\n  };\n  root.func = function () {\n    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {\n      args[_key7] = arguments[_key7];\n    }\n    Hoek.assert(args.length === 0, 'Joi.func() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.func, args);\n  };\n  root.number = function () {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n    Hoek.assert(args.length === 0, 'Joi.number() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.number, args);\n  };\n  root.object = function () {\n    for (var _len9 = arguments.length, args = new Array(_len9), _key9 = 0; _key9 < _len9; _key9++) {\n      args[_key9] = arguments[_key9];\n    }\n    return internals.callWithDefaults.call(this, internals.object, args);\n  };\n  root.string = function () {\n    for (var _len10 = arguments.length, args = new Array(_len10), _key10 = 0; _key10 < _len10; _key10++) {\n      args[_key10] = arguments[_key10];\n    }\n    Hoek.assert(args.length === 0, 'Joi.string() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.string, args);\n  };\n  root.symbol = function () {\n    for (var _len11 = arguments.length, args = new Array(_len11), _key11 = 0; _key11 < _len11; _key11++) {\n      args[_key11] = arguments[_key11];\n    }\n    Hoek.assert(args.length === 0, 'Joi.symbol() does not allow arguments.');\n    return internals.callWithDefaults.call(this, internals.symbol, args);\n  };\n  root.ref = function () {\n    return Ref.create(...arguments);\n  };\n  root.isRef = function (ref) {\n    return Ref.isRef(ref);\n  };\n  root.validate = function (value) {\n    var _ref;\n    const last = (_ref = (arguments.length <= 1 ? 0 : arguments.length - 1) - 1 + 1, _ref < 1 || arguments.length <= _ref ? undefined : arguments[_ref]);\n    const callback = typeof last === 'function' ? last : null;\n    const count = (arguments.length <= 1 ? 0 : arguments.length - 1) - (callback ? 1 : 0);\n    if (count === 0) {\n      return any.validate(value, callback);\n    }\n    const options = count === 2 ? arguments.length <= 2 ? undefined : arguments[2] : undefined;\n    const schema = root.compile(arguments.length <= 1 ? undefined : arguments[1]);\n    return schema._validateWithOptions(value, options, callback);\n  };\n  root.describe = function () {\n    const schema = arguments.length ? root.compile(arguments.length <= 0 ? undefined : arguments[0]) : any;\n    return schema.describe();\n  };\n  root.compile = function (schema) {\n    try {\n      return Cast.schema(this, schema);\n    } catch (err) {\n      if (err.hasOwnProperty('path')) {\n        err.message = err.message + '(' + err.path + ')';\n      }\n      throw err;\n    }\n  };\n  root.assert = function (value, schema, message) {\n    root.attempt(value, schema, message);\n  };\n  root.attempt = function (value, schema, message) {\n    const result = root.validate(value, schema);\n    const error = result.error;\n    if (error) {\n      if (!message) {\n        if (typeof error.annotate === 'function') {\n          error.message = error.annotate();\n        }\n        throw error;\n      }\n      if (!(message instanceof Error)) {\n        if (typeof error.annotate === 'function') {\n          error.message = `${message} ${error.annotate()}`;\n        }\n        throw error;\n      }\n      throw message;\n    }\n    return result.value;\n  };\n  root.reach = function (schema, path) {\n    Hoek.assert(schema && schema instanceof Any, 'you must provide a joi schema');\n    Hoek.assert(Array.isArray(path) || typeof path === 'string', 'path must be a string or an array of strings');\n    const reach = (sourceSchema, schemaPath) => {\n      if (!schemaPath.length) {\n        return sourceSchema;\n      }\n      const children = sourceSchema._inner.children;\n      if (!children) {\n        return;\n      }\n      const key = schemaPath.shift();\n      for (let i = 0; i < children.length; ++i) {\n        const child = children[i];\n        if (child.key === key) {\n          return reach(child.schema, schemaPath);\n        }\n      }\n    };\n    const schemaPath = typeof path === 'string' ? path ? path.split('.') : [] : path.slice();\n    return reach(schema, schemaPath);\n  };\n  root.lazy = function (fn) {\n    return Lazy.set(fn);\n  };\n  root.defaults = function (fn) {\n    Hoek.assert(typeof fn === 'function', 'Defaults must be a function');\n    let joi = Object.create(this.any());\n    joi = fn(joi);\n    Hoek.assert(joi && joi instanceof this.constructor, 'defaults() must return a schema');\n    Object.assign(joi, this, joi.clone()); // Re-add the types from `this` but also keep the settings from joi's potential new defaults\n\n    joi._defaults = schema => {\n      if (this._defaults) {\n        schema = this._defaults(schema);\n        Hoek.assert(schema instanceof this.constructor, 'defaults() must return a schema');\n      }\n      schema = fn(schema);\n      Hoek.assert(schema instanceof this.constructor, 'defaults() must return a schema');\n      return schema;\n    };\n    return joi;\n  };\n  root.extend = function () {\n    for (var _len12 = arguments.length, args = new Array(_len12), _key12 = 0; _key12 < _len12; _key12++) {\n      args[_key12] = arguments[_key12];\n    }\n    const extensions = Hoek.flatten(args);\n    Hoek.assert(extensions.length > 0, 'You need to provide at least one extension');\n    this.assert(extensions, root.extensionsSchema);\n    const joi = Object.create(this.any());\n    Object.assign(joi, this);\n    for (let i = 0; i < extensions.length; ++i) {\n      let extension = extensions[i];\n      if (typeof extension === 'function') {\n        extension = extension(joi);\n      }\n      this.assert(extension, root.extensionSchema);\n      const base = (extension.base || this.any()).clone(); // Cloning because we're going to override language afterwards\n      const ctor = base.constructor;\n      const type = class extends ctor {\n        // eslint-disable-line no-loop-func\n\n        constructor() {\n          super();\n          if (extension.base) {\n            Object.assign(this, base);\n          }\n          this._type = extension.name;\n          if (extension.language) {\n            this._settings = Settings.concat(this._settings, {\n              language: {\n                [extension.name]: extension.language\n              }\n            });\n          }\n        }\n      };\n      if (extension.coerce) {\n        type.prototype._coerce = function (value, state, options) {\n          if (ctor.prototype._coerce) {\n            const baseRet = ctor.prototype._coerce.call(this, value, state, options);\n            if (baseRet.errors) {\n              return baseRet;\n            }\n            value = baseRet.value;\n          }\n          const ret = extension.coerce.call(this, value, state, options);\n          if (ret instanceof Errors.Err) {\n            return {\n              value,\n              errors: ret\n            };\n          }\n          return {\n            value: ret\n          };\n        };\n      }\n      if (extension.pre) {\n        type.prototype._base = function (value, state, options) {\n          if (ctor.prototype._base) {\n            const baseRet = ctor.prototype._base.call(this, value, state, options);\n            if (baseRet.errors) {\n              return baseRet;\n            }\n            value = baseRet.value;\n          }\n          const ret = extension.pre.call(this, value, state, options);\n          if (ret instanceof Errors.Err) {\n            return {\n              value,\n              errors: ret\n            };\n          }\n          return {\n            value: ret\n          };\n        };\n      }\n      if (extension.rules) {\n        for (let j = 0; j < extension.rules.length; ++j) {\n          const rule = extension.rules[j];\n          const ruleArgs = rule.params ? rule.params instanceof Any ? rule.params._inner.children.map(k => k.key) : Object.keys(rule.params) : [];\n          const validateArgs = rule.params ? Cast.schema(this, rule.params) : null;\n          type.prototype[rule.name] = function () {\n            for (var _len13 = arguments.length, rArgs = new Array(_len13), _key13 = 0; _key13 < _len13; _key13++) {\n              rArgs[_key13] = arguments[_key13];\n            }\n            // eslint-disable-line no-loop-func\n\n            if (rArgs.length > ruleArgs.length) {\n              throw new Error('Unexpected number of arguments');\n            }\n            let hasRef = false;\n            let arg = {};\n            for (let k = 0; k < ruleArgs.length; ++k) {\n              arg[ruleArgs[k]] = rArgs[k];\n              if (!hasRef && Ref.isRef(rArgs[k])) {\n                hasRef = true;\n              }\n            }\n            if (validateArgs) {\n              arg = joi.attempt(arg, validateArgs);\n            }\n            let schema;\n            if (rule.validate) {\n              const validate = function (value, state, options) {\n                return rule.validate.call(this, arg, value, state, options);\n              };\n              schema = this._test(rule.name, arg, validate, {\n                description: rule.description,\n                hasRef\n              });\n            } else {\n              schema = this.clone();\n            }\n            if (rule.setup) {\n              const newSchema = rule.setup.call(schema, arg);\n              if (newSchema !== undefined) {\n                Hoek.assert(newSchema instanceof Any, `Setup of extension Joi.${this._type}().${rule.name}() must return undefined or a Joi object`);\n                schema = newSchema;\n              }\n            }\n            return schema;\n          };\n        }\n      }\n      if (extension.describe) {\n        type.prototype.describe = function () {\n          const description = ctor.prototype.describe.call(this);\n          return extension.describe.call(this, description);\n        };\n      }\n      const instance = new type();\n      joi[extension.name] = function () {\n        for (var _len14 = arguments.length, extArgs = new Array(_len14), _key14 = 0; _key14 < _len14; _key14++) {\n          extArgs[_key14] = arguments[_key14];\n        }\n        return internals.callWithDefaults.call(this, instance, extArgs);\n      };\n    }\n    return joi;\n  };\n  root.extensionSchema = internals.object.keys({\n    base: internals.object.type(Any, 'Joi object'),\n    name: internals.string.required(),\n    coerce: internals.func.arity(3),\n    pre: internals.func.arity(3),\n    language: internals.object,\n    describe: internals.func.arity(1),\n    rules: internals.array.items(internals.object.keys({\n      name: internals.string.required(),\n      setup: internals.func.arity(1),\n      validate: internals.func.arity(4),\n      params: [internals.object.pattern(/.*/, internals.object.type(Any, 'Joi object')), internals.object.type(internals.object.constructor, 'Joi object')],\n      description: [internals.string, internals.func.arity(1)]\n    }).or('setup', 'validate'))\n  }).strict();\n  root.extensionsSchema = internals.array.items([internals.object, internals.func.arity(1)]).strict();\n  root.version = require('../package.json').version;\n  return root;\n};\nmodule.exports = internals.root();","map":{"version":3,"names":["Hoek","require","Any","Cast","Errors","Lazy","Ref","Settings","internals","alternatives","array","boolean","binary","date","func","number","object","string","symbol","callWithDefaults","schema","args","assert","_defaults","_currentJoi","_init","root","any","clone","prototype","_len","arguments","length","Array","_key","call","alt","_len2","_key2","_len3","_key3","bool","_len4","_key4","_len5","_key5","_len6","_key6","_len7","_key7","_len8","_key8","_len9","_key9","_len10","_key10","_len11","_key11","ref","create","isRef","validate","value","_ref","last","undefined","callback","count","options","compile","_validateWithOptions","describe","err","hasOwnProperty","message","path","attempt","result","error","annotate","Error","reach","isArray","sourceSchema","schemaPath","children","_inner","key","shift","i","child","split","slice","lazy","fn","set","defaults","joi","Object","constructor","assign","extend","_len12","_key12","extensions","flatten","extensionsSchema","extension","extensionSchema","base","ctor","type","_type","name","language","_settings","concat","coerce","_coerce","state","baseRet","errors","ret","Err","pre","_base","rules","j","rule","ruleArgs","params","map","k","keys","validateArgs","_len13","rArgs","_key13","hasRef","arg","_test","description","setup","newSchema","instance","_len14","extArgs","_key14","required","arity","items","pattern","or","strict","version","module","exports"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/joi/lib/index.js"],"sourcesContent":["'use strict';\n\n// Load modules\n\nconst Hoek = require('hoek');\nconst Any = require('./types/any');\nconst Cast = require('./cast');\nconst Errors = require('./errors');\nconst Lazy = require('./types/lazy');\nconst Ref = require('./ref');\nconst Settings = require('./types/any/settings');\n\n\n// Declare internals\n\nconst internals = {\n    alternatives: require('./types/alternatives'),\n    array: require('./types/array'),\n    boolean: require('./types/boolean'),\n    binary: require('./types/binary'),\n    date: require('./types/date'),\n    func: require('./types/func'),\n    number: require('./types/number'),\n    object: require('./types/object'),\n    string: require('./types/string'),\n    symbol: require('./types/symbol')\n};\n\ninternals.callWithDefaults = function (schema, args) {\n\n    Hoek.assert(this, 'Must be invoked on a Joi instance.');\n\n    if (this._defaults) {\n        schema = this._defaults(schema);\n    }\n\n    schema._currentJoi = this;\n\n    return schema._init(...args);\n};\n\ninternals.root = function () {\n\n    const any = new Any();\n\n    const root = any.clone();\n    Any.prototype._currentJoi = root;\n    root._currentJoi = root;\n\n    root.any = function (...args) {\n\n        Hoek.assert(args.length === 0, 'Joi.any() does not allow arguments.');\n\n        return internals.callWithDefaults.call(this, any, args);\n    };\n\n    root.alternatives = root.alt = function (...args) {\n\n        return internals.callWithDefaults.call(this, internals.alternatives, args);\n    };\n\n    root.array = function (...args) {\n\n        Hoek.assert(args.length === 0, 'Joi.array() does not allow arguments.');\n\n        return internals.callWithDefaults.call(this, internals.array, args);\n    };\n\n    root.boolean = root.bool = function (...args) {\n\n        Hoek.assert(args.length === 0, 'Joi.boolean() does not allow arguments.');\n\n        return internals.callWithDefaults.call(this, internals.boolean, args);\n    };\n\n    root.binary = function (...args) {\n\n        Hoek.assert(args.length === 0, 'Joi.binary() does not allow arguments.');\n\n        return internals.callWithDefaults.call(this, internals.binary, args);\n    };\n\n    root.date = function (...args) {\n\n        Hoek.assert(args.length === 0, 'Joi.date() does not allow arguments.');\n\n        return internals.callWithDefaults.call(this, internals.date, args);\n    };\n\n    root.func = function (...args) {\n\n        Hoek.assert(args.length === 0, 'Joi.func() does not allow arguments.');\n\n        return internals.callWithDefaults.call(this, internals.func, args);\n    };\n\n    root.number = function (...args) {\n\n        Hoek.assert(args.length === 0, 'Joi.number() does not allow arguments.');\n\n        return internals.callWithDefaults.call(this, internals.number, args);\n    };\n\n    root.object = function (...args) {\n\n        return internals.callWithDefaults.call(this, internals.object, args);\n    };\n\n    root.string = function (...args) {\n\n        Hoek.assert(args.length === 0, 'Joi.string() does not allow arguments.');\n\n        return internals.callWithDefaults.call(this, internals.string, args);\n    };\n\n    root.symbol = function (...args) {\n\n        Hoek.assert(args.length === 0, 'Joi.symbol() does not allow arguments.');\n\n        return internals.callWithDefaults.call(this, internals.symbol, args);\n    };\n\n    root.ref = function (...args) {\n\n        return Ref.create(...args);\n    };\n\n    root.isRef = function (ref) {\n\n        return Ref.isRef(ref);\n    };\n\n    root.validate = function (value, ...args /*, [schema], [options], callback */) {\n\n        const last = args[args.length - 1];\n        const callback = typeof last === 'function' ? last : null;\n\n        const count = args.length - (callback ? 1 : 0);\n        if (count === 0) {\n            return any.validate(value, callback);\n        }\n\n        const options = count === 2 ? args[1] : undefined;\n        const schema = root.compile(args[0]);\n\n        return schema._validateWithOptions(value, options, callback);\n    };\n\n    root.describe = function (...args) {\n\n        const schema = args.length ? root.compile(args[0]) : any;\n        return schema.describe();\n    };\n\n    root.compile = function (schema) {\n\n        try {\n            return Cast.schema(this, schema);\n        }\n        catch (err) {\n            if (err.hasOwnProperty('path')) {\n                err.message = err.message + '(' + err.path + ')';\n            }\n            throw err;\n        }\n    };\n\n    root.assert = function (value, schema, message) {\n\n        root.attempt(value, schema, message);\n    };\n\n    root.attempt = function (value, schema, message) {\n\n        const result = root.validate(value, schema);\n        const error = result.error;\n        if (error) {\n            if (!message) {\n                if (typeof error.annotate === 'function') {\n                    error.message = error.annotate();\n                }\n                throw error;\n            }\n\n            if (!(message instanceof Error)) {\n                if (typeof error.annotate === 'function') {\n                    error.message = `${message} ${error.annotate()}`;\n                }\n                throw error;\n            }\n\n            throw message;\n        }\n\n        return result.value;\n    };\n\n    root.reach = function (schema, path) {\n\n        Hoek.assert(schema && schema instanceof Any, 'you must provide a joi schema');\n        Hoek.assert(Array.isArray(path) || typeof path === 'string', 'path must be a string or an array of strings');\n\n        const reach = (sourceSchema, schemaPath) => {\n\n            if (!schemaPath.length) {\n                return sourceSchema;\n            }\n\n            const children = sourceSchema._inner.children;\n            if (!children) {\n                return;\n            }\n\n            const key = schemaPath.shift();\n            for (let i = 0; i < children.length; ++i) {\n                const child = children[i];\n                if (child.key === key) {\n                    return reach(child.schema, schemaPath);\n                }\n            }\n        };\n\n        const schemaPath = typeof path === 'string' ? (path ? path.split('.') : []) : path.slice();\n\n        return reach(schema, schemaPath);\n    };\n\n    root.lazy = function (fn) {\n\n        return Lazy.set(fn);\n    };\n\n    root.defaults = function (fn) {\n\n        Hoek.assert(typeof fn === 'function', 'Defaults must be a function');\n\n        let joi = Object.create(this.any());\n        joi = fn(joi);\n\n        Hoek.assert(joi && joi instanceof this.constructor, 'defaults() must return a schema');\n\n        Object.assign(joi, this, joi.clone()); // Re-add the types from `this` but also keep the settings from joi's potential new defaults\n\n        joi._defaults = (schema) => {\n\n            if (this._defaults) {\n                schema = this._defaults(schema);\n                Hoek.assert(schema instanceof this.constructor, 'defaults() must return a schema');\n            }\n\n            schema = fn(schema);\n            Hoek.assert(schema instanceof this.constructor, 'defaults() must return a schema');\n            return schema;\n        };\n\n        return joi;\n    };\n\n    root.extend = function (...args) {\n\n        const extensions = Hoek.flatten(args);\n        Hoek.assert(extensions.length > 0, 'You need to provide at least one extension');\n\n        this.assert(extensions, root.extensionsSchema);\n\n        const joi = Object.create(this.any());\n        Object.assign(joi, this);\n\n        for (let i = 0; i < extensions.length; ++i) {\n            let extension = extensions[i];\n\n            if (typeof extension === 'function') {\n                extension = extension(joi);\n            }\n\n            this.assert(extension, root.extensionSchema);\n\n            const base = (extension.base || this.any()).clone(); // Cloning because we're going to override language afterwards\n            const ctor = base.constructor;\n            const type = class extends ctor { // eslint-disable-line no-loop-func\n\n                constructor() {\n\n                    super();\n                    if (extension.base) {\n                        Object.assign(this, base);\n                    }\n\n                    this._type = extension.name;\n\n                    if (extension.language) {\n                        this._settings = Settings.concat(this._settings, {\n                            language: {\n                                [extension.name]: extension.language\n                            }\n                        });\n                    }\n                }\n\n            };\n\n            if (extension.coerce) {\n                type.prototype._coerce = function (value, state, options) {\n\n                    if (ctor.prototype._coerce) {\n                        const baseRet = ctor.prototype._coerce.call(this, value, state, options);\n\n                        if (baseRet.errors) {\n                            return baseRet;\n                        }\n\n                        value = baseRet.value;\n                    }\n\n                    const ret = extension.coerce.call(this, value, state, options);\n                    if (ret instanceof Errors.Err) {\n                        return { value, errors: ret };\n                    }\n\n                    return { value: ret };\n                };\n            }\n            if (extension.pre) {\n                type.prototype._base = function (value, state, options) {\n\n                    if (ctor.prototype._base) {\n                        const baseRet = ctor.prototype._base.call(this, value, state, options);\n\n                        if (baseRet.errors) {\n                            return baseRet;\n                        }\n\n                        value = baseRet.value;\n                    }\n\n                    const ret = extension.pre.call(this, value, state, options);\n                    if (ret instanceof Errors.Err) {\n                        return { value, errors: ret };\n                    }\n\n                    return { value: ret };\n                };\n            }\n\n            if (extension.rules) {\n                for (let j = 0; j < extension.rules.length; ++j) {\n                    const rule = extension.rules[j];\n                    const ruleArgs = rule.params ?\n                        (rule.params instanceof Any ? rule.params._inner.children.map((k) => k.key) : Object.keys(rule.params)) :\n                        [];\n                    const validateArgs = rule.params ? Cast.schema(this, rule.params) : null;\n\n                    type.prototype[rule.name] = function (...rArgs) { // eslint-disable-line no-loop-func\n\n                        if (rArgs.length > ruleArgs.length) {\n                            throw new Error('Unexpected number of arguments');\n                        }\n\n                        let hasRef = false;\n                        let arg = {};\n\n                        for (let k = 0; k < ruleArgs.length; ++k) {\n                            arg[ruleArgs[k]] = rArgs[k];\n                            if (!hasRef && Ref.isRef(rArgs[k])) {\n                                hasRef = true;\n                            }\n                        }\n\n                        if (validateArgs) {\n                            arg = joi.attempt(arg, validateArgs);\n                        }\n\n                        let schema;\n                        if (rule.validate) {\n                            const validate = function (value, state, options) {\n\n                                return rule.validate.call(this, arg, value, state, options);\n                            };\n\n                            schema = this._test(rule.name, arg, validate, {\n                                description: rule.description,\n                                hasRef\n                            });\n                        }\n                        else {\n                            schema = this.clone();\n                        }\n\n                        if (rule.setup) {\n                            const newSchema = rule.setup.call(schema, arg);\n                            if (newSchema !== undefined) {\n                                Hoek.assert(newSchema instanceof Any, `Setup of extension Joi.${this._type}().${rule.name}() must return undefined or a Joi object`);\n                                schema = newSchema;\n                            }\n                        }\n\n                        return schema;\n                    };\n                }\n            }\n\n            if (extension.describe) {\n                type.prototype.describe = function () {\n\n                    const description = ctor.prototype.describe.call(this);\n                    return extension.describe.call(this, description);\n                };\n            }\n\n            const instance = new type();\n            joi[extension.name] = function (...extArgs) {\n\n                return internals.callWithDefaults.call(this, instance, extArgs);\n            };\n        }\n\n        return joi;\n    };\n\n    root.extensionSchema = internals.object.keys({\n        base: internals.object.type(Any, 'Joi object'),\n        name: internals.string.required(),\n        coerce: internals.func.arity(3),\n        pre: internals.func.arity(3),\n        language: internals.object,\n        describe: internals.func.arity(1),\n        rules: internals.array.items(internals.object.keys({\n            name: internals.string.required(),\n            setup: internals.func.arity(1),\n            validate: internals.func.arity(4),\n            params: [\n                internals.object.pattern(/.*/, internals.object.type(Any, 'Joi object')),\n                internals.object.type(internals.object.constructor, 'Joi object')\n            ],\n            description: [internals.string, internals.func.arity(1)]\n        }).or('setup', 'validate'))\n    }).strict();\n\n    root.extensionsSchema = internals.array.items([internals.object, internals.func.arity(1)]).strict();\n\n    root.version = require('../package.json').version;\n\n    return root;\n};\n\n\nmodule.exports = internals.root();\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}