{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/Zoomify\n */\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport { assert } from '../asserts.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { getCenter } from '../extent.js';\nimport { toSize } from '../size.js';\n/**\n * @enum {string}\n */\nvar TierSizeCalculation = {\n  DEFAULT: 'default',\n  TRUNCATED: 'truncated'\n};\nvar CustomTile = /** @class */function (_super) {\n  __extends(CustomTile, _super);\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options=} opt_options Tile options.\n   */\n  function CustomTile(tileSize, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) {\n    var _this = _super.call(this, tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options) || this;\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    _this.zoomifyImage_ = null;\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.tileSize_ = tileSize;\n    return _this;\n  }\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  CustomTile.prototype.getImage = function () {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n    var image = _super.prototype.getImage.call(this);\n    if (this.state == TileState.LOADED) {\n      var tileSize = this.tileSize_;\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      } else {\n        var context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.drawImage(image, 0, 0);\n        this.zoomifyImage_ = context.canvas;\n        return context.canvas;\n      }\n    } else {\n      return image;\n    }\n  };\n  return CustomTile;\n}(ImageTile);\nexport { CustomTile };\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number} [zDirection] Indicate which resolution should be used\n * by a renderer if the views resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nvar Zoomify = /** @class */function (_super) {\n  __extends(Zoomify, _super);\n  /**\n   * @param {Options} opt_options Options.\n   */\n  function Zoomify(opt_options) {\n    var _this = this;\n    var options = opt_options;\n    var size = options.size;\n    var tierSizeCalculation = options.tierSizeCalculation !== undefined ? options.tierSizeCalculation : TierSizeCalculation.DEFAULT;\n    var tilePixelRatio = options.tilePixelRatio || 1;\n    var imageWidth = size[0];\n    var imageHeight = size[1];\n    var tierSizeInTiles = [];\n    var tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    var tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n    switch (tierSizeCalculation) {\n      case TierSizeCalculation.DEFAULT:\n        while (imageWidth > tileSizeForTierSizeCalculation || imageHeight > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(imageWidth / tileSizeForTierSizeCalculation), Math.ceil(imageHeight / tileSizeForTierSizeCalculation)]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case TierSizeCalculation.TRUNCATED:\n        var width = imageWidth;\n        var height = imageHeight;\n        while (width > tileSizeForTierSizeCalculation || height > tileSizeForTierSizeCalculation) {\n          tierSizeInTiles.push([Math.ceil(width / tileSizeForTierSizeCalculation), Math.ceil(height / tileSizeForTierSizeCalculation)]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default:\n        assert(false, 53); // Unknown `tierSizeCalculation` configured\n        break;\n    }\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n    var resolutions = [tilePixelRatio];\n    var tileCountUpToTier = [0];\n    for (var i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] + tileCountUpToTier[i - 1]);\n    }\n    resolutions.reverse();\n    var tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions\n    });\n    var url = options.url;\n    if (url && url.indexOf('{TileGroup}') == -1 && url.indexOf('{tileIndex}') == -1) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    var urls = expandUrl(url);\n    var tileWidth = tileSize * tilePixelRatio;\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            var tileCoordZ = tileCoord[0];\n            var tileCoordX = tileCoord[1];\n            var tileCoordY = tileCoord[2];\n            var tileIndex = tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n            var tileGroup = (tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth | 0;\n            var localContext_1 = {\n              'z': tileCoordZ,\n              'x': tileCoordX,\n              'y': tileCoordY,\n              'tileIndex': tileIndex,\n              'TileGroup': 'TileGroup' + tileGroup\n            };\n            return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext_1[p];\n            });\n          }\n        }\n      );\n    }\n    var tileUrlFunction = createFromTileUrlFunctions(urls.map(createFromTemplate));\n    var ZoomifyTileClass = CustomTile.bind(null, toSize(tileSize * tilePixelRatio));\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    }) || this;\n    /**\n     * @type {number}\n     */\n    _this.zDirection = options.zDirection;\n    // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n    var tileUrl = tileGrid.getTileCoordForCoordAndResolution(getCenter(tileGrid.getExtent()), resolutions[resolutions.length - 1]);\n    var testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    var image = new Image();\n    image.addEventListener('error', function () {\n      tileWidth = tileSize;\n      this.changed();\n    }.bind(_this));\n    image.src = testTileUrl;\n    return _this;\n  }\n  return Zoomify;\n}(TileImage);\nexport default Zoomify;","map":{"version":3,"names":["DEFAULT_TILE_SIZE","ImageTile","TileGrid","TileImage","TileState","assert","createCanvasContext2D","createFromTileUrlFunctions","expandUrl","getCenter","toSize","TierSizeCalculation","DEFAULT","TRUNCATED","CustomTile","_super","__extends","tileSize","tileCoord","state","src","crossOrigin","tileLoadFunction","opt_options","_this","call","zoomifyImage_","tileSize_","prototype","getImage","image","LOADED","width","height","context","drawImage","canvas","Zoomify","options","size","tierSizeCalculation","undefined","tilePixelRatio","imageWidth","imageHeight","tierSizeInTiles","tileSizeForTierSizeCalculation","push","Math","ceil","reverse","resolutions","tileCountUpToTier","i","ii","length","tileGrid","extent","url","indexOf","urls","tileWidth","createFromTemplate","template","pixelRatio","projection","tileCoordZ","tileCoordX","tileCoordY","tileIndex","tileGroup","localContext_1","replace","m","p","tileUrlFunction","map","ZoomifyTileClass","bind","attributions","cacheSize","imageSmoothing","reprojectionErrorThreshold","tileClass","transition","zDirection","tileUrl","getTileCoordForCoordAndResolution","getExtent","testTileUrl","Image","addEventListener","changed"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/Zoomify.js"],"sourcesContent":["/**\n * @module ol/source/Zoomify\n */\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\n\nimport ImageTile from '../ImageTile.js';\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport TileState from '../TileState.js';\nimport {assert} from '../asserts.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {getCenter} from '../extent.js';\nimport {toSize} from '../size.js';\n\n/**\n * @enum {string}\n */\nconst TierSizeCalculation = {\n  DEFAULT: 'default',\n  TRUNCATED: 'truncated',\n};\n\nexport class CustomTile extends ImageTile {\n  /**\n   * @param {import(\"../size.js\").Size} tileSize Full tile size.\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @param {import(\"../Tile.js\").Options=} opt_options Tile options.\n   */\n  constructor(\n    tileSize,\n    tileCoord,\n    state,\n    src,\n    crossOrigin,\n    tileLoadFunction,\n    opt_options\n  ) {\n    super(tileCoord, state, src, crossOrigin, tileLoadFunction, opt_options);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.zoomifyImage_ = null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tileSize_ = tileSize;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   */\n  getImage() {\n    if (this.zoomifyImage_) {\n      return this.zoomifyImage_;\n    }\n    const image = super.getImage();\n    if (this.state == TileState.LOADED) {\n      const tileSize = this.tileSize_;\n      if (image.width == tileSize[0] && image.height == tileSize[1]) {\n        this.zoomifyImage_ = image;\n        return image;\n      } else {\n        const context = createCanvasContext2D(tileSize[0], tileSize[1]);\n        context.drawImage(image, 0, 0);\n        this.zoomifyImage_ = context.canvas;\n        return context.canvas;\n      }\n    } else {\n      return image;\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value  you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection.\n * @property {number} [tilePixelRatio] The pixel ratio used by the tile service. For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px by 512px images (for retina/hidpi devices) then `tilePixelRatio` should be set to `2`\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {string} url URL template or base URL of the Zoomify service.\n * A base URL is the fixed part\n * of the URL, excluding the tile group, z, x, and y folder structure, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/`. A URL template must include\n * `{TileGroup}`, `{x}`, `{y}`, and `{z}` placeholders, e.g.\n * `http://my.zoomify.info/IMAGE.TIF/{TileGroup}/{z}-{x}-{y}.jpg`.\n * Internet Imaging Protocol (IIP) with JTL extension can be also used with\n * `{tileIndex}` and `{z}` placeholders, e.g.\n * `http://my.zoomify.info?FIF=IMAGE.TIF&JTL={z},{tileIndex}`.\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\n * used instead of defining each one separately in the `urls` option.\n * @property {string} [tierSizeCalculation] Tier size calculation method: `default` or `truncated`.\n * @property {import(\"../size.js\").Size} size\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the TileGrid that is created.\n * Default sets the TileGrid in the\n * fourth quadrant, meaning extent is `[0, -height, width, 0]`. To change the\n * extent to the first quadrant (the default for OpenLayers 2) set the extent\n * as `[0, 0, width, height]`.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n * @property {number} [tileSize=256] Tile size. Same tile size is used for all zoom levels.\n * @property {number} [zDirection] Indicate which resolution should be used\n * by a renderer if the views resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\n\n/**\n * @classdesc\n * Layer source for tile data in Zoomify format (both Zoomify and Internet\n * Imaging Protocol are supported).\n * @api\n */\nclass Zoomify extends TileImage {\n  /**\n   * @param {Options} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options;\n\n    const size = options.size;\n    const tierSizeCalculation =\n      options.tierSizeCalculation !== undefined\n        ? options.tierSizeCalculation\n        : TierSizeCalculation.DEFAULT;\n\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const imageWidth = size[0];\n    const imageHeight = size[1];\n    const tierSizeInTiles = [];\n    const tileSize = options.tileSize || DEFAULT_TILE_SIZE;\n    let tileSizeForTierSizeCalculation = tileSize * tilePixelRatio;\n\n    switch (tierSizeCalculation) {\n      case TierSizeCalculation.DEFAULT:\n        while (\n          imageWidth > tileSizeForTierSizeCalculation ||\n          imageHeight > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(imageWidth / tileSizeForTierSizeCalculation),\n            Math.ceil(imageHeight / tileSizeForTierSizeCalculation),\n          ]);\n          tileSizeForTierSizeCalculation += tileSizeForTierSizeCalculation;\n        }\n        break;\n      case TierSizeCalculation.TRUNCATED:\n        let width = imageWidth;\n        let height = imageHeight;\n        while (\n          width > tileSizeForTierSizeCalculation ||\n          height > tileSizeForTierSizeCalculation\n        ) {\n          tierSizeInTiles.push([\n            Math.ceil(width / tileSizeForTierSizeCalculation),\n            Math.ceil(height / tileSizeForTierSizeCalculation),\n          ]);\n          width >>= 1;\n          height >>= 1;\n        }\n        break;\n      default:\n        assert(false, 53); // Unknown `tierSizeCalculation` configured\n        break;\n    }\n\n    tierSizeInTiles.push([1, 1]);\n    tierSizeInTiles.reverse();\n\n    const resolutions = [tilePixelRatio];\n    const tileCountUpToTier = [0];\n    for (let i = 1, ii = tierSizeInTiles.length; i < ii; i++) {\n      resolutions.push(tilePixelRatio << i);\n      tileCountUpToTier.push(\n        tierSizeInTiles[i - 1][0] * tierSizeInTiles[i - 1][1] +\n          tileCountUpToTier[i - 1]\n      );\n    }\n    resolutions.reverse();\n\n    const tileGrid = new TileGrid({\n      tileSize: tileSize,\n      extent: options.extent || [0, -imageHeight, imageWidth, 0],\n      resolutions: resolutions,\n    });\n\n    let url = options.url;\n    if (\n      url &&\n      url.indexOf('{TileGroup}') == -1 &&\n      url.indexOf('{tileIndex}') == -1\n    ) {\n      url += '{TileGroup}/{z}-{x}-{y}.jpg';\n    }\n    const urls = expandUrl(url);\n\n    let tileWidth = tileSize * tilePixelRatio;\n\n    /**\n     * @param {string} template Template.\n     * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n     */\n    function createFromTemplate(template) {\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile Coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            const tileCoordZ = tileCoord[0];\n            const tileCoordX = tileCoord[1];\n            const tileCoordY = tileCoord[2];\n            const tileIndex =\n              tileCoordX + tileCoordY * tierSizeInTiles[tileCoordZ][0];\n            const tileGroup =\n              ((tileIndex + tileCountUpToTier[tileCoordZ]) / tileWidth) | 0;\n            const localContext = {\n              'z': tileCoordZ,\n              'x': tileCoordX,\n              'y': tileCoordY,\n              'tileIndex': tileIndex,\n              'TileGroup': 'TileGroup' + tileGroup,\n            };\n            return template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext[p];\n            });\n          }\n        }\n      );\n    }\n\n    const tileUrlFunction = createFromTileUrlFunctions(\n      urls.map(createFromTemplate)\n    );\n\n    const ZoomifyTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize * tilePixelRatio)\n    );\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      tilePixelRatio: tilePixelRatio,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: ZoomifyTileClass,\n      tileGrid: tileGrid,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition,\n    });\n\n    /**\n     * @type {number}\n     */\n    this.zDirection = options.zDirection;\n\n    // Server retina tile detection (non-standard):\n    // Try loading the center tile for the highest resolution. If it is not\n    // available, we are dealing with retina tiles, and need to adjust the\n    // tile url calculation.\n    const tileUrl = tileGrid.getTileCoordForCoordAndResolution(\n      getCenter(tileGrid.getExtent()),\n      resolutions[resolutions.length - 1]\n    );\n    const testTileUrl = tileUrlFunction(tileUrl, 1, null);\n    const image = new Image();\n    image.addEventListener(\n      'error',\n      function () {\n        tileWidth = tileSize;\n        this.changed();\n      }.bind(this)\n    );\n    image.src = testTileUrl;\n  }\n}\n\nexport default Zoomify;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,SAAQA,iBAAiB,QAAO,uBAAuB;AAEvD,OAAOC,SAAS,MAAM,iBAAiB;AACvC,OAAOC,QAAQ,MAAM,yBAAyB;AAC9C,OAAOC,SAAS,MAAM,gBAAgB;AACtC,OAAOC,SAAS,MAAM,iBAAiB;AACvC,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,qBAAqB,QAAO,WAAW;AAC/C,SAAQC,0BAA0B,EAAEC,SAAS,QAAO,uBAAuB;AAC3E,SAAQC,SAAS,QAAO,cAAc;AACtC,SAAQC,MAAM,QAAO,YAAY;AAEjC;;;AAGA,IAAMC,mBAAmB,GAAG;EAC1BC,OAAO,EAAE,SAAS;EAClBC,SAAS,EAAE;CACZ;AAED,IAAAC,UAAA,0BAAAC,MAAA;EAAgCC,SAAA,CAAAF,UAAA,EAAAC,MAAA;EAC9B;;;;;;;;;EASA,SAAAD,WACEG,QAAQ,EACRC,SAAS,EACTC,KAAK,EACLC,GAAG,EACHC,WAAW,EACXC,gBAAgB,EAChBC,WAAW;IAPb,IAAAC,KAAA,GASET,MAAA,CAAAU,IAAA,OAAMP,SAAS,EAAEC,KAAK,EAAEC,GAAG,EAAEC,WAAW,EAAEC,gBAAgB,EAAEC,WAAW,CAAC;IAExE;;;;IAIAC,KAAI,CAACE,aAAa,GAAG,IAAI;IAEzB;;;IAGAF,KAAI,CAACG,SAAS,GAAGV,QAAQ;;EAC3B;EAEA;;;;EAIAH,UAAA,CAAAc,SAAA,CAAAC,QAAQ,GAAR;IACE,IAAI,IAAI,CAACH,aAAa,EAAE;MACtB,OAAO,IAAI,CAACA,aAAa;;IAE3B,IAAMI,KAAK,GAAGf,MAAA,CAAAa,SAAA,CAAMC,QAAQ,CAAAJ,IAAA,MAAE;IAC9B,IAAI,IAAI,CAACN,KAAK,IAAIf,SAAS,CAAC2B,MAAM,EAAE;MAClC,IAAMd,QAAQ,GAAG,IAAI,CAACU,SAAS;MAC/B,IAAIG,KAAK,CAACE,KAAK,IAAIf,QAAQ,CAAC,CAAC,CAAC,IAAIa,KAAK,CAACG,MAAM,IAAIhB,QAAQ,CAAC,CAAC,CAAC,EAAE;QAC7D,IAAI,CAACS,aAAa,GAAGI,KAAK;QAC1B,OAAOA,KAAK;OACb,MAAM;QACL,IAAMI,OAAO,GAAG5B,qBAAqB,CAACW,QAAQ,CAAC,CAAC,CAAC,EAAEA,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC/DiB,OAAO,CAACC,SAAS,CAACL,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;QAC9B,IAAI,CAACJ,aAAa,GAAGQ,OAAO,CAACE,MAAM;QACnC,OAAOF,OAAO,CAACE,MAAM;;KAExB,MAAM;MACL,OAAON,KAAK;;EAEhB,CAAC;EACH,OAAAhB,UAAC;AAAD,CAAC,CAzD+Bb,SAAS;;AA2DzC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuCA;;;;;;AAMA,IAAAoC,OAAA,0BAAAtB,MAAA;EAAsBC,SAAA,CAAAqB,OAAA,EAAAtB,MAAA;EACpB;;;EAGA,SAAAsB,QAAYd,WAAW;IAAvB,IAAAC,KAAA;IACE,IAAMc,OAAO,GAAGf,WAAW;IAE3B,IAAMgB,IAAI,GAAGD,OAAO,CAACC,IAAI;IACzB,IAAMC,mBAAmB,GACvBF,OAAO,CAACE,mBAAmB,KAAKC,SAAS,GACrCH,OAAO,CAACE,mBAAmB,GAC3B7B,mBAAmB,CAACC,OAAO;IAEjC,IAAM8B,cAAc,GAAGJ,OAAO,CAACI,cAAc,IAAI,CAAC;IAClD,IAAMC,UAAU,GAAGJ,IAAI,CAAC,CAAC,CAAC;IAC1B,IAAMK,WAAW,GAAGL,IAAI,CAAC,CAAC,CAAC;IAC3B,IAAMM,eAAe,GAAG,EAAE;IAC1B,IAAM5B,QAAQ,GAAGqB,OAAO,CAACrB,QAAQ,IAAIjB,iBAAiB;IACtD,IAAI8C,8BAA8B,GAAG7B,QAAQ,GAAGyB,cAAc;IAE9D,QAAQF,mBAAmB;MACzB,KAAK7B,mBAAmB,CAACC,OAAO;QAC9B,OACE+B,UAAU,GAAGG,8BAA8B,IAC3CF,WAAW,GAAGE,8BAA8B,EAC5C;UACAD,eAAe,CAACE,IAAI,CAAC,CACnBC,IAAI,CAACC,IAAI,CAACN,UAAU,GAAGG,8BAA8B,CAAC,EACtDE,IAAI,CAACC,IAAI,CAACL,WAAW,GAAGE,8BAA8B,CAAC,CACxD,CAAC;UACFA,8BAA8B,IAAIA,8BAA8B;;QAElE;MACF,KAAKnC,mBAAmB,CAACE,SAAS;QAChC,IAAImB,KAAK,GAAGW,UAAU;QACtB,IAAIV,MAAM,GAAGW,WAAW;QACxB,OACEZ,KAAK,GAAGc,8BAA8B,IACtCb,MAAM,GAAGa,8BAA8B,EACvC;UACAD,eAAe,CAACE,IAAI,CAAC,CACnBC,IAAI,CAACC,IAAI,CAACjB,KAAK,GAAGc,8BAA8B,CAAC,EACjDE,IAAI,CAACC,IAAI,CAAChB,MAAM,GAAGa,8BAA8B,CAAC,CACnD,CAAC;UACFd,KAAK,KAAK,CAAC;UACXC,MAAM,KAAK,CAAC;;QAEd;MACF;QACE5B,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC;QACnB;;IAGJwC,eAAe,CAACE,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAC5BF,eAAe,CAACK,OAAO,EAAE;IAEzB,IAAMC,WAAW,GAAG,CAACT,cAAc,CAAC;IACpC,IAAMU,iBAAiB,GAAG,CAAC,CAAC,CAAC;IAC7B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGT,eAAe,CAACU,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAED,CAAC,EAAE,EAAE;MACxDF,WAAW,CAACJ,IAAI,CAACL,cAAc,IAAIW,CAAC,CAAC;MACrCD,iBAAiB,CAACL,IAAI,CACpBF,eAAe,CAACQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GAAGR,eAAe,CAACQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,GACnDD,iBAAiB,CAACC,CAAC,GAAG,CAAC,CAAC,CAC3B;;IAEHF,WAAW,CAACD,OAAO,EAAE;IAErB,IAAMM,QAAQ,GAAG,IAAItD,QAAQ,CAAC;MAC5Be,QAAQ,EAAEA,QAAQ;MAClBwC,MAAM,EAAEnB,OAAO,CAACmB,MAAM,IAAI,CAAC,CAAC,EAAE,CAACb,WAAW,EAAED,UAAU,EAAE,CAAC,CAAC;MAC1DQ,WAAW,EAAEA;KACd,CAAC;IAEF,IAAIO,GAAG,GAAGpB,OAAO,CAACoB,GAAG;IACrB,IACEA,GAAG,IACHA,GAAG,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,IAChCD,GAAG,CAACC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,EAChC;MACAD,GAAG,IAAI,6BAA6B;;IAEtC,IAAME,IAAI,GAAGpD,SAAS,CAACkD,GAAG,CAAC;IAE3B,IAAIG,SAAS,GAAG5C,QAAQ,GAAGyB,cAAc;IAEzC;;;;IAIA,SAASoB,kBAAkBA,CAACC,QAAQ;MAClC;QACE;;;;;;QAMA,UAAU7C,SAAS,EAAE8C,UAAU,EAAEC,UAAU;UACzC,IAAI,CAAC/C,SAAS,EAAE;YACd,OAAOuB,SAAS;WACjB,MAAM;YACL,IAAMyB,UAAU,GAAGhD,SAAS,CAAC,CAAC,CAAC;YAC/B,IAAMiD,UAAU,GAAGjD,SAAS,CAAC,CAAC,CAAC;YAC/B,IAAMkD,UAAU,GAAGlD,SAAS,CAAC,CAAC,CAAC;YAC/B,IAAMmD,SAAS,GACbF,UAAU,GAAGC,UAAU,GAAGvB,eAAe,CAACqB,UAAU,CAAC,CAAC,CAAC,CAAC;YAC1D,IAAMI,SAAS,GACZ,CAACD,SAAS,GAAGjB,iBAAiB,CAACc,UAAU,CAAC,IAAIL,SAAS,GAAI,CAAC;YAC/D,IAAMU,cAAY,GAAG;cACnB,GAAG,EAAEL,UAAU;cACf,GAAG,EAAEC,UAAU;cACf,GAAG,EAAEC,UAAU;cACf,WAAW,EAAEC,SAAS;cACtB,WAAW,EAAE,WAAW,GAAGC;aAC5B;YACD,OAAOP,QAAQ,CAACS,OAAO,CAAC,aAAa,EAAE,UAAUC,CAAC,EAAEC,CAAC;cACnD,OAAOH,cAAY,CAACG,CAAC,CAAC;YACxB,CAAC,CAAC;;QAEN;MAAC;IAEL;IAEA,IAAMC,eAAe,GAAGpE,0BAA0B,CAChDqD,IAAI,CAACgB,GAAG,CAACd,kBAAkB,CAAC,CAC7B;IAED,IAAMe,gBAAgB,GAAG/D,UAAU,CAACgE,IAAI,CACtC,IAAI,EACJpE,MAAM,CAACO,QAAQ,GAAGyB,cAAc,CAAC,CAClC;IAEDlB,KAAA,GAAAT,MAAA,CAAAU,IAAA,OAAM;MACJsD,YAAY,EAAEzC,OAAO,CAACyC,YAAY;MAClCC,SAAS,EAAE1C,OAAO,CAAC0C,SAAS;MAC5B3D,WAAW,EAAEiB,OAAO,CAACjB,WAAW;MAChC4D,cAAc,EAAE3C,OAAO,CAAC2C,cAAc;MACtChB,UAAU,EAAE3B,OAAO,CAAC2B,UAAU;MAC9BvB,cAAc,EAAEA,cAAc;MAC9BwC,0BAA0B,EAAE5C,OAAO,CAAC4C,0BAA0B;MAC9DC,SAAS,EAAEN,gBAAgB;MAC3BrB,QAAQ,EAAEA,QAAQ;MAClBmB,eAAe,EAAEA,eAAe;MAChCS,UAAU,EAAE9C,OAAO,CAAC8C;KACrB,CAAC;IAEF;;;IAGA5D,KAAI,CAAC6D,UAAU,GAAG/C,OAAO,CAAC+C,UAAU;IAEpC;IACA;IACA;IACA;IACA,IAAMC,OAAO,GAAG9B,QAAQ,CAAC+B,iCAAiC,CACxD9E,SAAS,CAAC+C,QAAQ,CAACgC,SAAS,EAAE,CAAC,EAC/BrC,WAAW,CAACA,WAAW,CAACI,MAAM,GAAG,CAAC,CAAC,CACpC;IACD,IAAMkC,WAAW,GAAGd,eAAe,CAACW,OAAO,EAAE,CAAC,EAAE,IAAI,CAAC;IACrD,IAAMxD,KAAK,GAAG,IAAI4D,KAAK,EAAE;IACzB5D,KAAK,CAAC6D,gBAAgB,CACpB,OAAO,EACP;MACE9B,SAAS,GAAG5C,QAAQ;MACpB,IAAI,CAAC2E,OAAO,EAAE;IAChB,CAAC,CAACd,IAAI,CAACtD,KAAI,CAAC,CACb;IACDM,KAAK,CAACV,GAAG,GAAGqE,WAAW;;EACzB;EACF,OAAApD,OAAC;AAAD,CAAC,CA1KqBlC,SAAS;AA4K/B,eAAekC,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}