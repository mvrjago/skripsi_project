{"ast":null,"code":"/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport { equals } from '../array.js';\n// for pixel color reading\nvar tmpArray4 = new Uint8Array(4);\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\nvar WebGLRenderTarget = /** @class */function () {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [opt_size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  function WebGLRenderTarget(helper, opt_size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    var gl = helper.getGL();\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n    this.texture_ = gl.createTexture();\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n    this.framebuffer_ = gl.createFramebuffer();\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.size_ = opt_size || [1, 1];\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n    this.data_ = new Uint8Array(0);\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dataCacheDirty_ = true;\n    this.updateSize_();\n  }\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   * @api\n   */\n  WebGLRenderTarget.prototype.setSize = function (size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  };\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   * @api\n   */\n  WebGLRenderTarget.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   * @api\n   */\n  WebGLRenderTarget.prototype.clearCachedData = function () {\n    this.dataCacheDirty_ = true;\n  };\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   * @api\n   */\n  WebGLRenderTarget.prototype.readAll = function () {\n    if (this.dataCacheDirty_) {\n      var size = this.size_;\n      var gl = this.helper_.getGL();\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(0, 0, size[0], size[1], gl.RGBA, gl.UNSIGNED_BYTE, this.data_);\n      this.dataCacheDirty_ = false;\n    }\n    return this.data_;\n  };\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @returns {Uint8Array} Integer array with one color value (4 components)\n   * @api\n   */\n  WebGLRenderTarget.prototype.readPixel = function (x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n    this.readAll();\n    var index = Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  };\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n  WebGLRenderTarget.prototype.getTexture = function () {\n    return this.texture_;\n  };\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n  WebGLRenderTarget.prototype.getFramebuffer = function () {\n    return this.framebuffer_;\n  };\n  /**\n   * @private\n   */\n  WebGLRenderTarget.prototype.updateSize_ = function () {\n    var size = this.size_;\n    var gl = this.helper_.getGL();\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture_, 0);\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  };\n  return WebGLRenderTarget;\n}();\nexport default WebGLRenderTarget;","map":{"version":3,"names":["equals","tmpArray4","Uint8Array","WebGLRenderTarget","helper","opt_size","helper_","gl","getGL","texture_","createTexture","framebuffer_","createFramebuffer","size_","data_","dataCacheDirty_","updateSize_","prototype","setSize","size","getSize","clearCachedData","readAll","bindFramebuffer","FRAMEBUFFER","readPixels","RGBA","UNSIGNED_BYTE","readPixel","x","y","index","Math","floor","getTexture","getFramebuffer","viewport","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_2D"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/webgl/RenderTarget.js"],"sourcesContent":["/**\n * A wrapper class to simplify rendering to a texture instead of the final canvas\n * @module ol/webgl/RenderTarget\n */\nimport {equals} from '../array.js';\n\n// for pixel color reading\nconst tmpArray4 = new Uint8Array(4);\n\n/**\n * @classdesc\n * This class is a wrapper around the association of both a `WebGLTexture` and a `WebGLFramebuffer` instances,\n * simplifying initialization and binding for rendering.\n * @api\n */\nclass WebGLRenderTarget {\n  /**\n   * @param {import(\"./Helper.js\").default} helper WebGL helper; mandatory.\n   * @param {Array<number>} [opt_size] Expected size of the render target texture; note: this can be changed later on.\n   */\n  constructor(helper, opt_size) {\n    /**\n     * @private\n     * @type {import(\"./Helper.js\").default}\n     */\n    this.helper_ = helper;\n    const gl = helper.getGL();\n\n    /**\n     * @private\n     * @type {WebGLTexture}\n     */\n    this.texture_ = gl.createTexture();\n\n    /**\n     * @private\n     * @type {WebGLFramebuffer}\n     */\n    this.framebuffer_ = gl.createFramebuffer();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.size_ = opt_size || [1, 1];\n\n    /**\n     * @type {Uint8Array}\n     * @private\n     */\n    this.data_ = new Uint8Array(0);\n\n    /**\n     * @type {boolean}\n     * @private\n     */\n    this.dataCacheDirty_ = true;\n\n    this.updateSize_();\n  }\n\n  /**\n   * Changes the size of the render target texture. Note: will do nothing if the size\n   * is already the same.\n   * @param {Array<number>} size Expected size of the render target texture\n   * @api\n   */\n  setSize(size) {\n    if (equals(size, this.size_)) {\n      return;\n    }\n    this.size_[0] = size[0];\n    this.size_[1] = size[1];\n    this.updateSize_();\n  }\n\n  /**\n   * Returns the size of the render target texture\n   * @return {Array<number>} Size of the render target texture\n   * @api\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * This will cause following calls to `#readAll` or `#readPixel` to download the content of the\n   * render target into memory, which is an expensive operation.\n   * This content will be kept in cache but should be cleared after each new render.\n   * @api\n   */\n  clearCachedData() {\n    this.dataCacheDirty_ = true;\n  }\n\n  /**\n   * Returns the full content of the frame buffer as a series of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * @return {Uint8Array} Integer array of color values\n   * @api\n   */\n  readAll() {\n    if (this.dataCacheDirty_) {\n      const size = this.size_;\n      const gl = this.helper_.getGL();\n\n      gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n      gl.readPixels(\n        0,\n        0,\n        size[0],\n        size[1],\n        gl.RGBA,\n        gl.UNSIGNED_BYTE,\n        this.data_\n      );\n      this.dataCacheDirty_ = false;\n    }\n    return this.data_;\n  }\n\n  /**\n   * Reads one pixel of the frame buffer as an array of r, g, b, a components\n   * in the 0-255 range (unsigned byte).\n   * If x and/or y are outside of existing data, an array filled with 0 is returned.\n   * @param {number} x Pixel coordinate\n   * @param {number} y Pixel coordinate\n   * @returns {Uint8Array} Integer array with one color value (4 components)\n   * @api\n   */\n  readPixel(x, y) {\n    if (x < 0 || y < 0 || x > this.size_[0] || y >= this.size_[1]) {\n      tmpArray4[0] = 0;\n      tmpArray4[1] = 0;\n      tmpArray4[2] = 0;\n      tmpArray4[3] = 0;\n      return tmpArray4;\n    }\n\n    this.readAll();\n    const index =\n      Math.floor(x) + (this.size_[1] - Math.floor(y) - 1) * this.size_[0];\n    tmpArray4[0] = this.data_[index * 4];\n    tmpArray4[1] = this.data_[index * 4 + 1];\n    tmpArray4[2] = this.data_[index * 4 + 2];\n    tmpArray4[3] = this.data_[index * 4 + 3];\n    return tmpArray4;\n  }\n\n  /**\n   * @return {WebGLTexture} Texture to render to\n   */\n  getTexture() {\n    return this.texture_;\n  }\n\n  /**\n   * @return {WebGLFramebuffer} Frame buffer of the render target\n   */\n  getFramebuffer() {\n    return this.framebuffer_;\n  }\n\n  /**\n   * @private\n   */\n  updateSize_() {\n    const size = this.size_;\n    const gl = this.helper_.getGL();\n\n    this.texture_ = this.helper_.createTexture(size, null, this.texture_);\n\n    gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer_);\n    gl.viewport(0, 0, size[0], size[1]);\n    gl.framebufferTexture2D(\n      gl.FRAMEBUFFER,\n      gl.COLOR_ATTACHMENT0,\n      gl.TEXTURE_2D,\n      this.texture_,\n      0\n    );\n\n    this.data_ = new Uint8Array(size[0] * size[1] * 4);\n  }\n}\n\nexport default WebGLRenderTarget;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}