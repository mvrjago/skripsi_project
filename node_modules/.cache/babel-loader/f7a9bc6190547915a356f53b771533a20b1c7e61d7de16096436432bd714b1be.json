{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/ScaleLine\n */\nimport Control from './Control.js';\nimport ProjUnits from '../proj/Units.js';\nimport { CLASS_UNSELECTABLE } from '../css.js';\nimport { METERS_PER_UNIT, getPointResolution } from '../proj.js';\nimport { assert } from '../asserts.js';\nimport { getChangeEventType } from '../Object.js';\n/**\n * @type {string}\n */\nvar UNITS_PROP = 'units';\n/**\n * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,\n * `'nautical'`, `'metric'`, `'us'`.\n * @enum {string}\n */\nexport var Units = {\n  DEGREES: 'degrees',\n  IMPERIAL: 'imperial',\n  NAUTICAL: 'nautical',\n  METRIC: 'metric',\n  US: 'us'\n};\n/**\n * @const\n * @type {Array<number>}\n */\nvar LEADING_DIGITS = [1, 2, 5];\n/**\n * @const\n * @type {number}\n */\nvar DEFAULT_DPI = 25.4 / 0.28;\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-scale-line'] CSS Class name.\n * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {import(\"./ScaleLine.js\").Units|string} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies\n * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.\n */\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n *\n * @api\n */\nvar ScaleLine = /** @class */function (_super) {\n  __extends(ScaleLine, _super);\n  /**\n   * @param {Options=} opt_options Scale line options.\n   */\n  function ScaleLine(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var className = options.className !== undefined ? options.className : options.bar ? 'ol-scale-bar' : 'ol-scale-line';\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.innerElement_ = document.createElement('div');\n    _this.innerElement_.className = className + '-inner';\n    _this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    _this.element.appendChild(_this.innerElement_);\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n    _this.viewState_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderedVisible_ = false;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.renderedWidth_ = undefined;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.renderedHTML_ = '';\n    _this.addEventListener(getChangeEventType(UNITS_PROP), _this.handleUnitsChanged_);\n    _this.setUnits(options.units || Units.METRIC);\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.scaleBar_ = options.bar || false;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.scaleBarSteps_ = options.steps || 4;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.scaleBarText_ = options.text || false;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.dpi_ = options.dpi || undefined;\n    return _this;\n  }\n  /**\n   * Return the units to use in the scale line.\n   * @return {import(\"./ScaleLine.js\").Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n  ScaleLine.prototype.getUnits = function () {\n    return this.get(UNITS_PROP);\n  };\n  /**\n   * @private\n   */\n  ScaleLine.prototype.handleUnitsChanged_ = function () {\n    this.updateElement_();\n  };\n  /**\n   * Set the units to use in the scale line.\n   * @param {import(\"./ScaleLine.js\").Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n  ScaleLine.prototype.setUnits = function (units) {\n    this.set(UNITS_PROP, units);\n  };\n  /**\n   * Specify the dpi of output device such as printer.\n   * @param {number|undefined} dpi The dpi of output device.\n   * @api\n   */\n  ScaleLine.prototype.setDpi = function (dpi) {\n    this.dpi_ = dpi;\n  };\n  /**\n   * @private\n   */\n  ScaleLine.prototype.updateElement_ = function () {\n    var viewState = this.viewState_;\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n    var center = viewState.center;\n    var projection = viewState.projection;\n    var units = this.getUnits();\n    var pointResolutionUnits = units == Units.DEGREES ? ProjUnits.DEGREES : ProjUnits.METERS;\n    var pointResolution = getPointResolution(projection, viewState.resolution, center, pointResolutionUnits);\n    var minWidth = this.minWidth_ * (this.dpi_ || DEFAULT_DPI) / DEFAULT_DPI;\n    var nominalCount = minWidth * pointResolution;\n    var suffix = '';\n    if (units == Units.DEGREES) {\n      var metersPerDegree = METERS_PER_UNIT[ProjUnits.DEGREES];\n      nominalCount *= metersPerDegree;\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == Units.IMPERIAL) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == Units.NAUTICAL) {\n      pointResolution /= 1852;\n      suffix = 'nm';\n    } else if (units == Units.METRIC) {\n      if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == Units.US) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      assert(false, 33); // Invalid units\n    }\n\n    var i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));\n    var count, width, decimalCount;\n    while (true) {\n      decimalCount = Math.floor(i / 3);\n      var decimal = Math.pow(10, decimalCount);\n      count = LEADING_DIGITS[(i % 3 + 3) % 3] * decimal;\n      width = Math.round(count / pointResolution);\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      } else if (width >= minWidth) {\n        break;\n      }\n      ++i;\n    }\n    var html;\n    if (this.scaleBar_) {\n      html = this.createScaleBar(width, count, suffix);\n    } else {\n      html = count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n    }\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  };\n  /**\n   * @private\n   * @param {number} width The current width of the scalebar.\n   * @param {number} scale The current scale.\n   * @param {string} suffix The suffix to append to the scale text.\n   * @returns {string} The stringified HTML of the scalebar.\n   */\n  ScaleLine.prototype.createScaleBar = function (width, scale, suffix) {\n    var mapScale = '1 : ' + Math.round(this.getScaleForResolution()).toLocaleString();\n    var scaleSteps = [];\n    var stepWidth = width / this.scaleBarSteps_;\n    var backgroundColor = '#ffffff';\n    for (var i = 0; i < this.scaleBarSteps_; i++) {\n      if (i === 0) {\n        // create the first marker at position 0\n        scaleSteps.push(this.createMarker('absolute', i));\n      }\n      scaleSteps.push('<div>' + '<div ' + 'class=\"ol-scale-singlebar\" ' + 'style=' + '\"width: ' + stepWidth + 'px;' + 'background-color: ' + backgroundColor + ';\"' + '>' + '</div>' + this.createMarker('relative', i) + ( /*render text every second step, except when only 2 steps */\n      i % 2 === 0 || this.scaleBarSteps_ === 2 ? this.createStepText(i, width, false, scale, suffix) : '') + '</div>');\n      if (i === this.scaleBarSteps_ - 1) {\n        {\n          /*render text at the end */\n        }\n        scaleSteps.push(this.createStepText(i + 1, width, true, scale, suffix));\n      }\n      // switch colors of steps between black and white\n      if (backgroundColor === '#ffffff') {\n        backgroundColor = '#000000';\n      } else {\n        backgroundColor = '#ffffff';\n      }\n    }\n    var scaleBarText;\n    if (this.scaleBarText_) {\n      scaleBarText = '<div ' + 'class=\"ol-scale-text\" ' + 'style=\"width: ' + width + 'px;\">' + mapScale + '</div>';\n    } else {\n      scaleBarText = '';\n    }\n    var container = '<div ' + 'style=\"display: flex;\">' + scaleBarText + scaleSteps.join('') + '</div>';\n    return container;\n  };\n  /**\n   * Creates a marker at given position\n   * @param {string} position - The position, absolute or relative\n   * @param {number} i - The iterator\n   * @returns {string} The stringified div containing the marker\n   */\n  ScaleLine.prototype.createMarker = function (position, i) {\n    var top = position === 'absolute' ? 3 : -10;\n    return '<div ' + 'class=\"ol-scale-step-marker\" ' + 'style=\"position: ' + position + ';' + 'top: ' + top + 'px;\"' + '></div>';\n  };\n  /**\n   * Creates the label for a marker marker at given position\n   * @param {number} i - The iterator\n   * @param {number} width - The width the scalebar will currently use\n   * @param {boolean} isLast - Flag indicating if we add the last step text\n   * @param {number} scale - The current scale for the whole scalebar\n   * @param {string} suffix - The suffix for the scale\n   * @returns {string} The stringified div containing the step text\n   */\n  ScaleLine.prototype.createStepText = function (i, width, isLast, scale, suffix) {\n    var length = i === 0 ? 0 : Math.round(scale / this.scaleBarSteps_ * i * 100) / 100;\n    var lengthString = length + (i === 0 ? '' : ' ' + suffix);\n    var margin = i === 0 ? -3 : width / this.scaleBarSteps_ * -1;\n    var minWidth = i === 0 ? 0 : width / this.scaleBarSteps_ * 2;\n    return '<div ' + 'class=\"ol-scale-step-text\" ' + 'style=\"' + 'margin-left: ' + margin + 'px;' + 'text-align: ' + (i === 0 ? 'left' : 'center') + '; ' + 'min-width: ' + minWidth + 'px;' + 'left: ' + (isLast ? width + 'px' : 'unset') + ';\"' + '>' + lengthString + '</div>';\n  };\n  /**\n   * Returns the appropriate scale for the given resolution and units.\n   * @return {number} The appropriate scale.\n   */\n  ScaleLine.prototype.getScaleForResolution = function () {\n    var resolution = getPointResolution(this.viewState_.projection, this.viewState_.resolution, this.viewState_.center);\n    var dpi = this.dpi_ || DEFAULT_DPI;\n    var mpu = this.viewState_.projection.getMetersPerUnit();\n    var inchesPerMeter = 39.37;\n    return parseFloat(resolution.toString()) * mpu * inchesPerMeter * dpi;\n  };\n  /**\n   * Update the scale line element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  ScaleLine.prototype.render = function (mapEvent) {\n    var frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.viewState_ = null;\n    } else {\n      this.viewState_ = frameState.viewState;\n    }\n    this.updateElement_();\n  };\n  return ScaleLine;\n}(Control);\nexport default ScaleLine;","map":{"version":3,"names":["Control","ProjUnits","CLASS_UNSELECTABLE","METERS_PER_UNIT","getPointResolution","assert","getChangeEventType","UNITS_PROP","Units","DEGREES","IMPERIAL","NAUTICAL","METRIC","US","LEADING_DIGITS","DEFAULT_DPI","ScaleLine","_super","__extends","opt_options","_this","options","className","undefined","bar","call","element","document","createElement","render","target","innerElement_","appendChild","viewState_","minWidth_","minWidth","renderedVisible_","renderedWidth_","renderedHTML_","addEventListener","handleUnitsChanged_","setUnits","units","scaleBar_","scaleBarSteps_","steps","scaleBarText_","text","dpi_","dpi","prototype","getUnits","get","updateElement_","set","setDpi","viewState","style","display","center","projection","pointResolutionUnits","METERS","pointResolution","resolution","nominalCount","suffix","metersPerDegree","i","Math","floor","log","count","width","decimalCount","decimal","pow","round","isNaN","html","createScaleBar","toFixed","innerHTML","scale","mapScale","getScaleForResolution","toLocaleString","scaleSteps","stepWidth","backgroundColor","push","createMarker","createStepText","scaleBarText","container","join","position","top","isLast","length","lengthString","margin","mpu","getMetersPerUnit","inchesPerMeter","parseFloat","toString","mapEvent","frameState"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/control/ScaleLine.js"],"sourcesContent":["/**\n * @module ol/control/ScaleLine\n */\nimport Control from './Control.js';\nimport ProjUnits from '../proj/Units.js';\nimport {CLASS_UNSELECTABLE} from '../css.js';\nimport {METERS_PER_UNIT, getPointResolution} from '../proj.js';\nimport {assert} from '../asserts.js';\nimport {getChangeEventType} from '../Object.js';\n\n/**\n * @type {string}\n */\nconst UNITS_PROP = 'units';\n\n/**\n * Units for the scale line. Supported values are `'degrees'`, `'imperial'`,\n * `'nautical'`, `'metric'`, `'us'`.\n * @enum {string}\n */\nexport const Units = {\n  DEGREES: 'degrees',\n  IMPERIAL: 'imperial',\n  NAUTICAL: 'nautical',\n  METRIC: 'metric',\n  US: 'us',\n};\n\n/**\n * @const\n * @type {Array<number>}\n */\nconst LEADING_DIGITS = [1, 2, 5];\n\n/**\n * @const\n * @type {number}\n */\nconst DEFAULT_DPI = 25.4 / 0.28;\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-scale-line'] CSS Class name.\n * @property {number} [minWidth=64] Minimum width in pixels at the OGC default dpi. The width will be\n * adjusted to match the dpi used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the control\n * should be re-rendered. This is called in a `requestAnimationFrame` callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the control\n * to be rendered outside of the map's viewport.\n * @property {import(\"./ScaleLine.js\").Units|string} [units='metric'] Units.\n * @property {boolean} [bar=false] Render scalebars instead of a line.\n * @property {number} [steps=4] Number of steps the scalebar should use. Use even numbers\n * for best results. Only applies when `bar` is `true`.\n * @property {boolean} [text=false] Render the text scale above of the scalebar. Only applies\n * when `bar` is `true`.\n * @property {number|undefined} [dpi=undefined] dpi of output device such as printer. Only applies\n * when `bar` is `true`. If undefined the OGC default screen pixel size of 0.28mm will be assumed.\n */\n\n/**\n * @classdesc\n * A control displaying rough y-axis distances, calculated for the center of the\n * viewport. For conformal projections (e.g. EPSG:3857, the default view\n * projection in OpenLayers), the scale is valid for all directions.\n * No scale line will be shown when the y-axis distance of a pixel at the\n * viewport center cannot be calculated in the view projection.\n * By default the scale line will show in the bottom left portion of the map,\n * but this can be changed by using the css selector `.ol-scale-line`.\n * When specifying `bar` as `true`, a scalebar will be rendered instead\n * of a scaleline.\n *\n * @api\n */\nclass ScaleLine extends Control {\n  /**\n   * @param {Options=} opt_options Scale line options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const className =\n      options.className !== undefined\n        ? options.className\n        : options.bar\n        ? 'ol-scale-bar'\n        : 'ol-scale-line';\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.innerElement_ = document.createElement('div');\n    this.innerElement_.className = className + '-inner';\n\n    this.element.className = className + ' ' + CLASS_UNSELECTABLE;\n    this.element.appendChild(this.innerElement_);\n\n    /**\n     * @private\n     * @type {?import(\"../View.js\").State}\n     */\n    this.viewState_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minWidth_ = options.minWidth !== undefined ? options.minWidth : 64;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.renderedWidth_ = undefined;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = '';\n\n    this.addEventListener(\n      getChangeEventType(UNITS_PROP),\n      this.handleUnitsChanged_\n    );\n\n    this.setUnits(options.units || Units.METRIC);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBar_ = options.bar || false;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.scaleBarSteps_ = options.steps || 4;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.scaleBarText_ = options.text || false;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.dpi_ = options.dpi || undefined;\n  }\n\n  /**\n   * Return the units to use in the scale line.\n   * @return {import(\"./ScaleLine.js\").Units} The units\n   * to use in the scale line.\n   * @observable\n   * @api\n   */\n  getUnits() {\n    return this.get(UNITS_PROP);\n  }\n\n  /**\n   * @private\n   */\n  handleUnitsChanged_() {\n    this.updateElement_();\n  }\n\n  /**\n   * Set the units to use in the scale line.\n   * @param {import(\"./ScaleLine.js\").Units} units The units to use in the scale line.\n   * @observable\n   * @api\n   */\n  setUnits(units) {\n    this.set(UNITS_PROP, units);\n  }\n\n  /**\n   * Specify the dpi of output device such as printer.\n   * @param {number|undefined} dpi The dpi of output device.\n   * @api\n   */\n  setDpi(dpi) {\n    this.dpi_ = dpi;\n  }\n\n  /**\n   * @private\n   */\n  updateElement_() {\n    const viewState = this.viewState_;\n\n    if (!viewState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const center = viewState.center;\n    const projection = viewState.projection;\n    const units = this.getUnits();\n    const pointResolutionUnits =\n      units == Units.DEGREES ? ProjUnits.DEGREES : ProjUnits.METERS;\n    let pointResolution = getPointResolution(\n      projection,\n      viewState.resolution,\n      center,\n      pointResolutionUnits\n    );\n\n    const minWidth =\n      (this.minWidth_ * (this.dpi_ || DEFAULT_DPI)) / DEFAULT_DPI;\n\n    let nominalCount = minWidth * pointResolution;\n    let suffix = '';\n    if (units == Units.DEGREES) {\n      const metersPerDegree = METERS_PER_UNIT[ProjUnits.DEGREES];\n      nominalCount *= metersPerDegree;\n      if (nominalCount < metersPerDegree / 60) {\n        suffix = '\\u2033'; // seconds\n        pointResolution *= 3600;\n      } else if (nominalCount < metersPerDegree) {\n        suffix = '\\u2032'; // minutes\n        pointResolution *= 60;\n      } else {\n        suffix = '\\u00b0'; // degrees\n      }\n    } else if (units == Units.IMPERIAL) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution /= 0.0254;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.3048;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.344;\n      }\n    } else if (units == Units.NAUTICAL) {\n      pointResolution /= 1852;\n      suffix = 'nm';\n    } else if (units == Units.METRIC) {\n      if (nominalCount < 0.001) {\n        suffix = 'Î¼m';\n        pointResolution *= 1000000;\n      } else if (nominalCount < 1) {\n        suffix = 'mm';\n        pointResolution *= 1000;\n      } else if (nominalCount < 1000) {\n        suffix = 'm';\n      } else {\n        suffix = 'km';\n        pointResolution /= 1000;\n      }\n    } else if (units == Units.US) {\n      if (nominalCount < 0.9144) {\n        suffix = 'in';\n        pointResolution *= 39.37;\n      } else if (nominalCount < 1609.344) {\n        suffix = 'ft';\n        pointResolution /= 0.30480061;\n      } else {\n        suffix = 'mi';\n        pointResolution /= 1609.3472;\n      }\n    } else {\n      assert(false, 33); // Invalid units\n    }\n\n    let i = 3 * Math.floor(Math.log(minWidth * pointResolution) / Math.log(10));\n    let count, width, decimalCount;\n    while (true) {\n      decimalCount = Math.floor(i / 3);\n      const decimal = Math.pow(10, decimalCount);\n      count = LEADING_DIGITS[((i % 3) + 3) % 3] * decimal;\n      width = Math.round(count / pointResolution);\n      if (isNaN(width)) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n        return;\n      } else if (width >= minWidth) {\n        break;\n      }\n      ++i;\n    }\n    let html;\n    if (this.scaleBar_) {\n      html = this.createScaleBar(width, count, suffix);\n    } else {\n      html = count.toFixed(decimalCount < 0 ? -decimalCount : 0) + ' ' + suffix;\n    }\n\n    if (this.renderedHTML_ != html) {\n      this.innerElement_.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n\n    if (this.renderedWidth_ != width) {\n      this.innerElement_.style.width = width + 'px';\n      this.renderedWidth_ = width;\n    }\n\n    if (!this.renderedVisible_) {\n      this.element.style.display = '';\n      this.renderedVisible_ = true;\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} width The current width of the scalebar.\n   * @param {number} scale The current scale.\n   * @param {string} suffix The suffix to append to the scale text.\n   * @returns {string} The stringified HTML of the scalebar.\n   */\n  createScaleBar(width, scale, suffix) {\n    const mapScale =\n      '1 : ' + Math.round(this.getScaleForResolution()).toLocaleString();\n    const scaleSteps = [];\n    const stepWidth = width / this.scaleBarSteps_;\n    let backgroundColor = '#ffffff';\n    for (let i = 0; i < this.scaleBarSteps_; i++) {\n      if (i === 0) {\n        // create the first marker at position 0\n        scaleSteps.push(this.createMarker('absolute', i));\n      }\n      scaleSteps.push(\n        '<div>' +\n          '<div ' +\n          'class=\"ol-scale-singlebar\" ' +\n          'style=' +\n          '\"width: ' +\n          stepWidth +\n          'px;' +\n          'background-color: ' +\n          backgroundColor +\n          ';\"' +\n          '>' +\n          '</div>' +\n          this.createMarker('relative', i) +\n          /*render text every second step, except when only 2 steps */\n          (i % 2 === 0 || this.scaleBarSteps_ === 2\n            ? this.createStepText(i, width, false, scale, suffix)\n            : '') +\n          '</div>'\n      );\n      if (i === this.scaleBarSteps_ - 1) {\n        {\n          /*render text at the end */\n        }\n        scaleSteps.push(this.createStepText(i + 1, width, true, scale, suffix));\n      }\n      // switch colors of steps between black and white\n      if (backgroundColor === '#ffffff') {\n        backgroundColor = '#000000';\n      } else {\n        backgroundColor = '#ffffff';\n      }\n    }\n\n    let scaleBarText;\n    if (this.scaleBarText_) {\n      scaleBarText =\n        '<div ' +\n        'class=\"ol-scale-text\" ' +\n        'style=\"width: ' +\n        width +\n        'px;\">' +\n        mapScale +\n        '</div>';\n    } else {\n      scaleBarText = '';\n    }\n    const container =\n      '<div ' +\n      'style=\"display: flex;\">' +\n      scaleBarText +\n      scaleSteps.join('') +\n      '</div>';\n    return container;\n  }\n\n  /**\n   * Creates a marker at given position\n   * @param {string} position - The position, absolute or relative\n   * @param {number} i - The iterator\n   * @returns {string} The stringified div containing the marker\n   */\n  createMarker(position, i) {\n    const top = position === 'absolute' ? 3 : -10;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-marker\" ' +\n      'style=\"position: ' +\n      position +\n      ';' +\n      'top: ' +\n      top +\n      'px;\"' +\n      '></div>'\n    );\n  }\n\n  /**\n   * Creates the label for a marker marker at given position\n   * @param {number} i - The iterator\n   * @param {number} width - The width the scalebar will currently use\n   * @param {boolean} isLast - Flag indicating if we add the last step text\n   * @param {number} scale - The current scale for the whole scalebar\n   * @param {string} suffix - The suffix for the scale\n   * @returns {string} The stringified div containing the step text\n   */\n  createStepText(i, width, isLast, scale, suffix) {\n    const length =\n      i === 0 ? 0 : Math.round((scale / this.scaleBarSteps_) * i * 100) / 100;\n    const lengthString = length + (i === 0 ? '' : ' ' + suffix);\n    const margin = i === 0 ? -3 : (width / this.scaleBarSteps_) * -1;\n    const minWidth = i === 0 ? 0 : (width / this.scaleBarSteps_) * 2;\n    return (\n      '<div ' +\n      'class=\"ol-scale-step-text\" ' +\n      'style=\"' +\n      'margin-left: ' +\n      margin +\n      'px;' +\n      'text-align: ' +\n      (i === 0 ? 'left' : 'center') +\n      '; ' +\n      'min-width: ' +\n      minWidth +\n      'px;' +\n      'left: ' +\n      (isLast ? width + 'px' : 'unset') +\n      ';\"' +\n      '>' +\n      lengthString +\n      '</div>'\n    );\n  }\n\n  /**\n   * Returns the appropriate scale for the given resolution and units.\n   * @return {number} The appropriate scale.\n   */\n  getScaleForResolution() {\n    const resolution = getPointResolution(\n      this.viewState_.projection,\n      this.viewState_.resolution,\n      this.viewState_.center\n    );\n    const dpi = this.dpi_ || DEFAULT_DPI;\n    const mpu = this.viewState_.projection.getMetersPerUnit();\n    const inchesPerMeter = 39.37;\n    return parseFloat(resolution.toString()) * mpu * inchesPerMeter * dpi;\n  }\n\n  /**\n   * Update the scale line element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.viewState_ = null;\n    } else {\n      this.viewState_ = frameState.viewState;\n    }\n    this.updateElement_();\n  }\n}\n\nexport default ScaleLine;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}