{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/interaction/Pointer\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport { getValues } from '../obj.js';\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nvar PointerInteraction = /** @class */function (_super) {\n  __extends(PointerInteraction, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function PointerInteraction(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, /** @type {import(\"./Interaction.js\").InteractionOptions} */options) || this;\n    if (options.handleDownEvent) {\n      _this.handleDownEvent = options.handleDownEvent;\n    }\n    if (options.handleDragEvent) {\n      _this.handleDragEvent = options.handleDragEvent;\n    }\n    if (options.handleMoveEvent) {\n      _this.handleMoveEvent = options.handleMoveEvent;\n    }\n    if (options.handleUpEvent) {\n      _this.handleUpEvent = options.handleUpEvent;\n    }\n    if (options.stopDown) {\n      _this.stopDown = options.stopDown;\n    }\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    _this.handlingDownUpSequence = false;\n    /**\n     * @type {!Object<string, PointerEvent>}\n     * @private\n     */\n    _this.trackedPointers_ = {};\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    _this.targetPointers = [];\n    return _this;\n  }\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  PointerInteraction.prototype.getPointerCount = function () {\n    return this.targetPointers.length;\n  };\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  PointerInteraction.prototype.handleDownEvent = function (mapBrowserEvent) {\n    return false;\n  };\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  PointerInteraction.prototype.handleDragEvent = function (mapBrowserEvent) {};\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  PointerInteraction.prototype.handleEvent = function (mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n    var stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        var handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        var handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  };\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  PointerInteraction.prototype.handleMoveEvent = function (mapBrowserEvent) {};\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  PointerInteraction.prototype.handleUpEvent = function (mapBrowserEvent) {\n    return false;\n  };\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  PointerInteraction.prototype.stopDown = function (handled) {\n    return handled;\n  };\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  PointerInteraction.prototype.updateTrackedPointers_ = function (mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      var event_1 = mapBrowserEvent.originalEvent;\n      var id = event_1.pointerId.toString();\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event_1;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event_1;\n      }\n      this.targetPointers = getValues(this.trackedPointers_);\n    }\n  };\n  return PointerInteraction;\n}(Interaction);\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {import(\"../pixel.js\").Pixel} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  var length = pointerEvents.length;\n  var clientX = 0;\n  var clientY = 0;\n  for (var i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return [clientX / length, clientY / length];\n}\n/**\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n */\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  var type = mapBrowserEvent.type;\n  return type === MapBrowserEventType.POINTERDOWN || type === MapBrowserEventType.POINTERDRAG || type === MapBrowserEventType.POINTERUP;\n}\nexport default PointerInteraction;","map":{"version":3,"names":["Interaction","MapBrowserEventType","getValues","PointerInteraction","_super","__extends","opt_options","_this","options","call","handleDownEvent","handleDragEvent","handleMoveEvent","handleUpEvent","stopDown","handlingDownUpSequence","trackedPointers_","targetPointers","prototype","getPointerCount","length","mapBrowserEvent","handleEvent","originalEvent","stopEvent","updateTrackedPointers_","type","POINTERDRAG","preventDefault","POINTERUP","handledUp","POINTERDOWN","handled","POINTERMOVE","isPointerDraggingEvent","event_1","id","pointerId","toString","centroid","pointerEvents","clientX","clientY","i"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/interaction/Pointer.js"],"sourcesContent":["/**\n * @module ol/interaction/Pointer\n */\nimport Interaction from './Interaction.js';\nimport MapBrowserEventType from '../MapBrowserEventType.js';\nimport {getValues} from '../obj.js';\n\n/**\n * @typedef {Object} Options\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleDownEvent]\n * Function handling \"down\" events. If the function returns `true` then a drag\n * sequence is started.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleDragEvent]\n * Function handling \"drag\" events. This function is called on \"move\" events\n * during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleEvent]\n * Method called by the map to notify the interaction that a browser event was\n * dispatched to the map. The function may return `false` to prevent the\n * propagation of the event to other interactions in the map's interactions\n * chain.\n * @property {function(import(\"../MapBrowserEvent.js\").default):void} [handleMoveEvent]\n * Function handling \"move\" events. This function is called on \"move\" events.\n * This functions is also called during a drag sequence, so during a drag\n * sequence both the `handleDragEvent` function and this function are called.\n * If `handleDownEvent` is defined and it returns true this function will not\n * be called during a drag sequence.\n * @property {function(import(\"../MapBrowserEvent.js\").default):boolean} [handleUpEvent]\n *  Function handling \"up\" events. If the function returns `false` then the\n * current drag sequence is stopped.\n * @property {function(boolean):boolean} [stopDown]\n * Should the down event be propagated to other interactions, or should be\n * stopped?\n */\n\n/**\n * @classdesc\n * Base class that calls user-defined functions on `down`, `move` and `up`\n * events. This class also manages \"drag sequences\".\n *\n * When the `handleDownEvent` user function returns `true` a drag sequence is\n * started. During a drag sequence the `handleDragEvent` user function is\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\n * user function is called and returns `false`.\n * @api\n */\nclass PointerInteraction extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super(\n      /** @type {import(\"./Interaction.js\").InteractionOptions} */ (options)\n    );\n\n    if (options.handleDownEvent) {\n      this.handleDownEvent = options.handleDownEvent;\n    }\n\n    if (options.handleDragEvent) {\n      this.handleDragEvent = options.handleDragEvent;\n    }\n\n    if (options.handleMoveEvent) {\n      this.handleMoveEvent = options.handleMoveEvent;\n    }\n\n    if (options.handleUpEvent) {\n      this.handleUpEvent = options.handleUpEvent;\n    }\n\n    if (options.stopDown) {\n      this.stopDown = options.stopDown;\n    }\n\n    /**\n     * @type {boolean}\n     * @protected\n     */\n    this.handlingDownUpSequence = false;\n\n    /**\n     * @type {!Object<string, PointerEvent>}\n     * @private\n     */\n    this.trackedPointers_ = {};\n\n    /**\n     * @type {Array<PointerEvent>}\n     * @protected\n     */\n    this.targetPointers = [];\n  }\n\n  /**\n   * Returns the current number of pointers involved in the interaction,\n   * e.g. `2` when two fingers are used.\n   * @return {number} The number of pointers.\n   * @api\n   */\n  getPointerCount() {\n    return this.targetPointers.length;\n  }\n\n  /**\n   * Handle pointer down events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleDownEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * Handle pointer drag events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleDragEvent(mapBrowserEvent) {}\n\n  /**\n   * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into\n   * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\n   * detected.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Map browser event.\n   * @return {boolean} `false` to stop event propagation.\n   * @api\n   */\n  handleEvent(mapBrowserEvent) {\n    if (!mapBrowserEvent.originalEvent) {\n      return true;\n    }\n\n    let stopEvent = false;\n    this.updateTrackedPointers_(mapBrowserEvent);\n    if (this.handlingDownUpSequence) {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\n        this.handleDragEvent(mapBrowserEvent);\n        // prevent page scrolling during dragging\n        mapBrowserEvent.preventDefault();\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        const handledUp = this.handleUpEvent(mapBrowserEvent);\n        this.handlingDownUpSequence =\n          handledUp && this.targetPointers.length > 0;\n      }\n    } else {\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        const handled = this.handleDownEvent(mapBrowserEvent);\n        this.handlingDownUpSequence = handled;\n        stopEvent = this.stopDown(handled);\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\n        this.handleMoveEvent(mapBrowserEvent);\n      }\n    }\n    return !stopEvent;\n  }\n\n  /**\n   * Handle pointer move events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @protected\n   */\n  handleMoveEvent(mapBrowserEvent) {}\n\n  /**\n   * Handle pointer up events.\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @return {boolean} If the event was consumed.\n   * @protected\n   */\n  handleUpEvent(mapBrowserEvent) {\n    return false;\n  }\n\n  /**\n   * This function is used to determine if \"down\" events should be propagated\n   * to other interactions or should be stopped.\n   * @param {boolean} handled Was the event handled by the interaction?\n   * @return {boolean} Should the `down` event be stopped?\n   */\n  stopDown(handled) {\n    return handled;\n  }\n\n  /**\n   * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n   * @private\n   */\n  updateTrackedPointers_(mapBrowserEvent) {\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\n      const event = mapBrowserEvent.originalEvent;\n\n      const id = event.pointerId.toString();\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\n        delete this.trackedPointers_[id];\n      } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\n        this.trackedPointers_[id] = event;\n      } else if (id in this.trackedPointers_) {\n        // update only when there was a pointerdown event for this pointer\n        this.trackedPointers_[id] = event;\n      }\n      this.targetPointers = getValues(this.trackedPointers_);\n    }\n  }\n}\n\n/**\n * @param {Array<PointerEvent>} pointerEvents List of events.\n * @return {import(\"../pixel.js\").Pixel} Centroid pixel.\n */\nexport function centroid(pointerEvents) {\n  const length = pointerEvents.length;\n  let clientX = 0;\n  let clientY = 0;\n  for (let i = 0; i < length; i++) {\n    clientX += pointerEvents[i].clientX;\n    clientY += pointerEvents[i].clientY;\n  }\n  return [clientX / length, clientY / length];\n}\n\n/**\n * @param {import(\"../MapBrowserEvent.js\").default} mapBrowserEvent Event.\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\n *     or pointerup event.\n */\nfunction isPointerDraggingEvent(mapBrowserEvent) {\n  const type = mapBrowserEvent.type;\n  return (\n    type === MapBrowserEventType.POINTERDOWN ||\n    type === MapBrowserEventType.POINTERDRAG ||\n    type === MapBrowserEventType.POINTERUP\n  );\n}\n\nexport default PointerInteraction;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,WAAW,MAAM,kBAAkB;AAC1C,OAAOC,mBAAmB,MAAM,2BAA2B;AAC3D,SAAQC,SAAS,QAAO,WAAW;AAEnC;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;;;;;;;;;;;AAWA,IAAAC,kBAAA,0BAAAC,MAAA;EAAiCC,SAAA,CAAAF,kBAAA,EAAAC,MAAA;EAC/B;;;EAGA,SAAAD,mBAAYG,WAAW;IAAvB,IAAAC,KAAA;IACE,IAAMC,OAAO,GAAGF,WAAW,GAAGA,WAAW,GAAG,EAAE;IAE9CC,KAAA,GAAAH,MAAA,CAAAK,IAAA,OACE,4DAA8DD,OAAQ,CACvE;IAED,IAAIA,OAAO,CAACE,eAAe,EAAE;MAC3BH,KAAI,CAACG,eAAe,GAAGF,OAAO,CAACE,eAAe;;IAGhD,IAAIF,OAAO,CAACG,eAAe,EAAE;MAC3BJ,KAAI,CAACI,eAAe,GAAGH,OAAO,CAACG,eAAe;;IAGhD,IAAIH,OAAO,CAACI,eAAe,EAAE;MAC3BL,KAAI,CAACK,eAAe,GAAGJ,OAAO,CAACI,eAAe;;IAGhD,IAAIJ,OAAO,CAACK,aAAa,EAAE;MACzBN,KAAI,CAACM,aAAa,GAAGL,OAAO,CAACK,aAAa;;IAG5C,IAAIL,OAAO,CAACM,QAAQ,EAAE;MACpBP,KAAI,CAACO,QAAQ,GAAGN,OAAO,CAACM,QAAQ;;IAGlC;;;;IAIAP,KAAI,CAACQ,sBAAsB,GAAG,KAAK;IAEnC;;;;IAIAR,KAAI,CAACS,gBAAgB,GAAG,EAAE;IAE1B;;;;IAIAT,KAAI,CAACU,cAAc,GAAG,EAAE;;EAC1B;EAEA;;;;;;EAMAd,kBAAA,CAAAe,SAAA,CAAAC,eAAe,GAAf;IACE,OAAO,IAAI,CAACF,cAAc,CAACG,MAAM;EACnC,CAAC;EAED;;;;;;EAMAjB,kBAAA,CAAAe,SAAA,CAAAR,eAAe,GAAf,UAAgBW,eAAe;IAC7B,OAAO,KAAK;EACd,CAAC;EAED;;;;;EAKAlB,kBAAA,CAAAe,SAAA,CAAAP,eAAe,GAAf,UAAgBU,eAAe,GAAG,CAAC;EAEnC;;;;;;;;EAQAlB,kBAAA,CAAAe,SAAA,CAAAI,WAAW,GAAX,UAAYD,eAAe;IACzB,IAAI,CAACA,eAAe,CAACE,aAAa,EAAE;MAClC,OAAO,IAAI;;IAGb,IAAIC,SAAS,GAAG,KAAK;IACrB,IAAI,CAACC,sBAAsB,CAACJ,eAAe,CAAC;IAC5C,IAAI,IAAI,CAACN,sBAAsB,EAAE;MAC/B,IAAIM,eAAe,CAACK,IAAI,IAAIzB,mBAAmB,CAAC0B,WAAW,EAAE;QAC3D,IAAI,CAAChB,eAAe,CAACU,eAAe,CAAC;QACrC;QACAA,eAAe,CAACO,cAAc,EAAE;OACjC,MAAM,IAAIP,eAAe,CAACK,IAAI,IAAIzB,mBAAmB,CAAC4B,SAAS,EAAE;QAChE,IAAMC,SAAS,GAAG,IAAI,CAACjB,aAAa,CAACQ,eAAe,CAAC;QACrD,IAAI,CAACN,sBAAsB,GACzBe,SAAS,IAAI,IAAI,CAACb,cAAc,CAACG,MAAM,GAAG,CAAC;;KAEhD,MAAM;MACL,IAAIC,eAAe,CAACK,IAAI,IAAIzB,mBAAmB,CAAC8B,WAAW,EAAE;QAC3D,IAAMC,OAAO,GAAG,IAAI,CAACtB,eAAe,CAACW,eAAe,CAAC;QACrD,IAAI,CAACN,sBAAsB,GAAGiB,OAAO;QACrCR,SAAS,GAAG,IAAI,CAACV,QAAQ,CAACkB,OAAO,CAAC;OACnC,MAAM,IAAIX,eAAe,CAACK,IAAI,IAAIzB,mBAAmB,CAACgC,WAAW,EAAE;QAClE,IAAI,CAACrB,eAAe,CAACS,eAAe,CAAC;;;IAGzC,OAAO,CAACG,SAAS;EACnB,CAAC;EAED;;;;;EAKArB,kBAAA,CAAAe,SAAA,CAAAN,eAAe,GAAf,UAAgBS,eAAe,GAAG,CAAC;EAEnC;;;;;;EAMAlB,kBAAA,CAAAe,SAAA,CAAAL,aAAa,GAAb,UAAcQ,eAAe;IAC3B,OAAO,KAAK;EACd,CAAC;EAED;;;;;;EAMAlB,kBAAA,CAAAe,SAAA,CAAAJ,QAAQ,GAAR,UAASkB,OAAO;IACd,OAAOA,OAAO;EAChB,CAAC;EAED;;;;EAIA7B,kBAAA,CAAAe,SAAA,CAAAO,sBAAsB,GAAtB,UAAuBJ,eAAe;IACpC,IAAIa,sBAAsB,CAACb,eAAe,CAAC,EAAE;MAC3C,IAAMc,OAAK,GAAGd,eAAe,CAACE,aAAa;MAE3C,IAAMa,EAAE,GAAGD,OAAK,CAACE,SAAS,CAACC,QAAQ,EAAE;MACrC,IAAIjB,eAAe,CAACK,IAAI,IAAIzB,mBAAmB,CAAC4B,SAAS,EAAE;QACzD,OAAO,IAAI,CAACb,gBAAgB,CAACoB,EAAE,CAAC;OACjC,MAAM,IAAIf,eAAe,CAACK,IAAI,IAAIzB,mBAAmB,CAAC8B,WAAW,EAAE;QAClE,IAAI,CAACf,gBAAgB,CAACoB,EAAE,CAAC,GAAGD,OAAK;OAClC,MAAM,IAAIC,EAAE,IAAI,IAAI,CAACpB,gBAAgB,EAAE;QACtC;QACA,IAAI,CAACA,gBAAgB,CAACoB,EAAE,CAAC,GAAGD,OAAK;;MAEnC,IAAI,CAAClB,cAAc,GAAGf,SAAS,CAAC,IAAI,CAACc,gBAAgB,CAAC;;EAE1D,CAAC;EACH,OAAAb,kBAAC;AAAD,CAAC,CAjKgCH,WAAW;AAmK5C;;;;AAIA,OAAM,SAAUuC,QAAQA,CAACC,aAAa;EACpC,IAAMpB,MAAM,GAAGoB,aAAa,CAACpB,MAAM;EACnC,IAAIqB,OAAO,GAAG,CAAC;EACf,IAAIC,OAAO,GAAG,CAAC;EACf,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGvB,MAAM,EAAEuB,CAAC,EAAE,EAAE;IAC/BF,OAAO,IAAID,aAAa,CAACG,CAAC,CAAC,CAACF,OAAO;IACnCC,OAAO,IAAIF,aAAa,CAACG,CAAC,CAAC,CAACD,OAAO;;EAErC,OAAO,CAACD,OAAO,GAAGrB,MAAM,EAAEsB,OAAO,GAAGtB,MAAM,CAAC;AAC7C;AAEA;;;;;AAKA,SAASc,sBAAsBA,CAACb,eAAe;EAC7C,IAAMK,IAAI,GAAGL,eAAe,CAACK,IAAI;EACjC,OACEA,IAAI,KAAKzB,mBAAmB,CAAC8B,WAAW,IACxCL,IAAI,KAAKzB,mBAAmB,CAAC0B,WAAW,IACxCD,IAAI,KAAKzB,mBAAmB,CAAC4B,SAAS;AAE1C;AAEA,eAAe1B,kBAAkB"},"metadata":{},"sourceType":"module","externalDependencies":[]}