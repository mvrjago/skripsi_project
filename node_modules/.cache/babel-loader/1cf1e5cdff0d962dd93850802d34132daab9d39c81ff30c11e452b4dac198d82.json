{"ast":null,"code":"/**\n * @module ol/source/WMTS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport TileImage from './TileImage.js';\nimport WMTSRequestEncoding from './WMTSRequestEncoding.js';\nimport { appendParams } from '../uri.js';\nimport { assign } from '../obj.js';\nimport { createFromCapabilitiesMatrixSet } from '../tilegrid/WMTS.js';\nimport { createFromTileUrlFunctions, expandUrl } from '../tileurlfunction.js';\nimport { equivalent, get as getProjection } from '../proj.js';\nimport { find, findIndex, includes } from '../array.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./WMTSRequestEncoding.js\").default|string} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nvar WMTS = /** @class */function (_super) {\n  __extends(WMTS, _super);\n  /**\n   * @param {Options} options WMTS options.\n   */\n  function WMTS(options) {\n    // TODO: add support for TileMatrixLimits\n    var _this = this;\n    var requestEncoding = options.requestEncoding !== undefined ? /** @type {import(\"./WMTSRequestEncoding.js\").default} */options.requestEncoding : WMTSRequestEncoding.KVP;\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    var tileGrid = options.tileGrid;\n    var urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition\n    }) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.version_ = options.version !== undefined ? options.version : '1.0.0';\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.dimensions_ = options.dimensions !== undefined ? options.dimensions : {};\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.layer_ = options.layer;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.matrixSet_ = options.matrixSet;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.style_ = options.style;\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n    /**\n     * @private\n     * @type {import(\"./WMTSRequestEncoding.js\").default}\n     */\n    _this.requestEncoding_ = requestEncoding;\n    _this.setKey(_this.getKeyForDimensions_());\n    if (urls && urls.length > 0) {\n      _this.tileUrlFunction = createFromTileUrlFunctions(urls.map(_this.createFromWMTSTemplate.bind(_this)));\n    }\n    return _this;\n  }\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  WMTS.prototype.setUrls = function (urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n    this.setTileUrlFunction(createFromTileUrlFunctions(urls.map(this.createFromWMTSTemplate.bind(this))), key);\n  };\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  WMTS.prototype.getDimensions = function () {\n    return this.dimensions_;\n  };\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  WMTS.prototype.getFormat = function () {\n    return this.format_;\n  };\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  WMTS.prototype.getLayer = function () {\n    return this.layer_;\n  };\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  WMTS.prototype.getMatrixSet = function () {\n    return this.matrixSet_;\n  };\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {import(\"./WMTSRequestEncoding.js\").default} Request encoding.\n   * @api\n   */\n  WMTS.prototype.getRequestEncoding = function () {\n    return this.requestEncoding_;\n  };\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  WMTS.prototype.getStyle = function () {\n    return this.style_;\n  };\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  WMTS.prototype.getVersion = function () {\n    return this.version_;\n  };\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  WMTS.prototype.getKeyForDimensions_ = function () {\n    var i = 0;\n    var res = [];\n    for (var key in this.dimensions_) {\n      res[i++] = key + '-' + this.dimensions_[key];\n    }\n    return res.join('/');\n  };\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  WMTS.prototype.updateDimensions = function (dimensions) {\n    assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  };\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  WMTS.prototype.createFromWMTSTemplate = function (template) {\n    var requestEncoding = this.requestEncoding_;\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    var context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_\n    };\n    if (requestEncoding == WMTSRequestEncoding.KVP) {\n      assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_\n      });\n    }\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n    template = requestEncoding == WMTSRequestEncoding.KVP ? appendParams(template, context) : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n      return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n    });\n    var tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */this.tileGrid;\n    var dimensions = this.dimensions_;\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        } else {\n          var localContext_1 = {\n            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n            'TileCol': tileCoord[1],\n            'TileRow': tileCoord[2]\n          };\n          assign(localContext_1, dimensions);\n          var url = template;\n          if (requestEncoding == WMTSRequestEncoding.KVP) {\n            url = appendParams(url, localContext_1);\n          } else {\n            url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext_1[p];\n            });\n          }\n          return url;\n        }\n      }\n    );\n  };\n  return WMTS;\n}(TileImage);\nexport default WMTS;\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {?Options} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  var layers = wmtsCap['Contents']['Layer'];\n  var l = find(layers, function (elt, index, array) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (l === null) {\n    return null;\n  }\n  var tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  var idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        var tileMatrixSet = find(tileMatrixSets, function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        var supportedCRS = tileMatrixSet['SupportedCRS'];\n        var proj1 = getProjection(supportedCRS.replace(/urn:ogc:def:crs:(\\w+):(.*:)?(\\w+)$/, '$1:$3')) || getProjection(supportedCRS);\n        var proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        } else {\n          return supportedCRS == config['projection'];\n        }\n      });\n    } else {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  var matrixSet = /** @type {string} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSet'];\n  var matrixLimits = /** @type {Array<Object>} */\n  l['TileMatrixSetLink'][idx]['TileMatrixSetLimits'];\n  var format = /** @type {string} */l['Format'][0];\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = findIndex(l['Style'], function (elt, index, array) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    } else {\n      return elt['isDefault'];\n    }\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  var style = /** @type {string} */l['Style'][idx]['Identifier'];\n  var dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      var key = elt['Identifier'];\n      var value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n  var matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  var matrixSetObj = find(matrixSets, function (elt, index, array) {\n    return elt['Identifier'] == matrixSet;\n  });\n  var projection;\n  var code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection = getProjection(code.replace(/urn:ogc:def:crs:(\\w+):(.*:)?(\\w+)$/, '$1:$3')) || getProjection(code);\n  }\n  if ('projection' in config) {\n    var projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n  var wrapX = false;\n  var switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n  var matrix = matrixSetObj.TileMatrix[0];\n  // create default matrixLimit\n  var selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // substract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1\n  };\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    matrix = find(matrixSetObj.TileMatrix, function (value) {\n      return value.Identifier === selectedMatrixLimit.TileMatrix;\n    });\n  }\n  var resolution = matrix.ScaleDenominator * 0.00028 / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  var origin = switchOriginXY ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]] : matrix.TopLeftCorner;\n  var tileSpanX = matrix.TileWidth * resolution;\n  var tileSpanY = matrix.TileHeight * resolution;\n  var extent = [origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n  // add one to get proper bottom/right coordinate\n  origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow), origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol), origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow];\n  if (projection.getExtent() === null) {\n    projection.setExtent(extent);\n  }\n  var tileGrid = createFromCapabilitiesMatrixSet(matrixSetObj, extent, matrixLimits);\n  /** @type {!Array<string>} */\n  var urls = [];\n  var requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n  if ('OperationsMetadata' in wmtsCap && 'GetTile' in wmtsCap['OperationsMetadata']) {\n    var gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n    for (var i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        var constraint = find(gets[i]['Constraint'], function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        var encodings = constraint['AllowedValues']['Value'];\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === WMTSRequestEncoding.KVP) {\n          if (includes(encodings, WMTSRequestEncoding.KVP)) {\n            urls.push( /** @type {string} */gets[i]['href']);\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = WMTSRequestEncoding.KVP;\n        urls.push( /** @type {string} */gets[i]['href']);\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = WMTSRequestEncoding.REST;\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push( /** @type {string} */element['template']);\n      }\n    });\n  }\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin']\n  };\n}","map":{"version":3,"names":["TileImage","WMTSRequestEncoding","appendParams","assign","createFromCapabilitiesMatrixSet","createFromTileUrlFunctions","expandUrl","equivalent","get","getProjection","find","findIndex","includes","WMTS","_super","__extends","options","_this","requestEncoding","undefined","KVP","tileGrid","urls","url","call","attributions","cacheSize","crossOrigin","imageSmoothing","projection","reprojectionErrorThreshold","tileClass","tileLoadFunction","tilePixelRatio","wrapX","transition","version_","version","format_","format","dimensions_","dimensions","layer_","layer","matrixSet_","matrixSet","style_","style","requestEncoding_","setKey","getKeyForDimensions_","length","tileUrlFunction","map","createFromWMTSTemplate","bind","prototype","setUrls","key","join","setTileUrlFunction","getDimensions","getFormat","getLayer","getMatrixSet","getRequestEncoding","getStyle","getVersion","i","res","updateDimensions","template","context","replace","m","p","toLowerCase","tileCoord","pixelRatio","localContext_1","getMatrixId","optionsFromCapabilities","wmtsCap","config","layers","l","elt","index","array","tileMatrixSets","idx","tileMatrixSet","el","supportedCRS","proj1","proj2","matrixLimits","forEach","value","matrixSets","matrixSetObj","code","projConfig","switchOriginXY","getAxisOrientation","substr","matrix","TileMatrix","selectedMatrixLimit","MinTileCol","MinTileRow","MaxTileCol","MatrixWidth","MaxTileRow","MatrixHeight","Identifier","resolution","ScaleDenominator","getMetersPerUnit","origin","TopLeftCorner","tileSpanX","TileWidth","tileSpanY","TileHeight","extent","getExtent","setExtent","gets","ii","constraint","element","encodings","push","REST"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/WMTS.js"],"sourcesContent":["/**\n * @module ol/source/WMTS\n */\n\nimport TileImage from './TileImage.js';\nimport WMTSRequestEncoding from './WMTSRequestEncoding.js';\nimport {appendParams} from '../uri.js';\nimport {assign} from '../obj.js';\nimport {createFromCapabilitiesMatrixSet} from '../tilegrid/WMTS.js';\nimport {createFromTileUrlFunctions, expandUrl} from '../tileurlfunction.js';\nimport {equivalent, get as getProjection} from '../proj.js';\nimport {find, findIndex, includes} from '../array.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../tilegrid/WMTS.js\").default} tileGrid Tile grid.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"./WMTSRequestEncoding.js\").default|string} [requestEncoding='KVP'] Request encoding.\n * @property {string} layer Layer name as advertised in the WMTS capabilities.\n * @property {string} style Style name as advertised in the WMTS capabilities.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass]  Class used to instantiate image tiles. Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service.\n * For example, if the tile service advertizes 256px by 256px tiles but actually sends 512px\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\n * should be set to `2`.\n * @property {string} [format='image/jpeg'] Image format. Only used when `requestEncoding` is `'KVP'`.\n * @property {string} [version='1.0.0'] WMTS version.\n * @property {string} matrixSet Matrix set.\n * @property {!Object} [dimensions] Additional \"dimensions\" for tile requests.\n * This is an object with properties named like the advertised WMTS dimensions.\n * @property {string} [url]  A URL for the service.\n * For the RESTful request encoding, this is a URL\n * template.  For KVP encoding, it is normal URL. A `{?-?}` template pattern,\n * for example `subdomain{a-f}.domain.com`, may be used instead of defining\n * each one separately in the `urls` option.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {Array<string>} [urls] An array of URLs.\n * Requests will be distributed among the URLs in this array.\n * @property {boolean} [wrapX=false] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMTS servers.\n * @api\n */\nclass WMTS extends TileImage {\n  /**\n   * @param {Options} options WMTS options.\n   */\n  constructor(options) {\n    // TODO: add support for TileMatrixLimits\n\n    const requestEncoding =\n      options.requestEncoding !== undefined\n        ? /** @type {import(\"./WMTSRequestEncoding.js\").default} */ (options.requestEncoding)\n        : WMTSRequestEncoding.KVP;\n\n    // FIXME: should we create a default tileGrid?\n    // we could issue a getCapabilities xhr to retrieve missing configuration\n    const tileGrid = options.tileGrid;\n\n    let urls = options.urls;\n    if (urls === undefined && options.url !== undefined) {\n      urls = expandUrl(options.url);\n    }\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: options.tilePixelRatio,\n      urls: urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : false,\n      transition: options.transition,\n    });\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.version_ = options.version !== undefined ? options.version : '1.0.0';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.format_ = options.format !== undefined ? options.format : 'image/jpeg';\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.dimensions_ =\n      options.dimensions !== undefined ? options.dimensions : {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.layer_ = options.layer;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.matrixSet_ = options.matrixSet;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.style_ = options.style;\n\n    // FIXME: should we guess this requestEncoding from options.url(s)\n    //        structure? that would mean KVP only if a template is not provided.\n\n    /**\n     * @private\n     * @type {import(\"./WMTSRequestEncoding.js\").default}\n     */\n    this.requestEncoding_ = requestEncoding;\n\n    this.setKey(this.getKeyForDimensions_());\n\n    if (urls && urls.length > 0) {\n      this.tileUrlFunction = createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      );\n    }\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * URLs may contain OGC conform URL Template Variables: {TileMatrix}, {TileRow}, {TileCol}.\n   * @param {Array<string>} urls URLs.\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    this.setTileUrlFunction(\n      createFromTileUrlFunctions(\n        urls.map(this.createFromWMTSTemplate.bind(this))\n      ),\n      key\n    );\n  }\n\n  /**\n   * Get the dimensions, i.e. those passed to the constructor through the\n   * \"dimensions\" option, and possibly updated using the updateDimensions\n   * method.\n   * @return {!Object} Dimensions.\n   * @api\n   */\n  getDimensions() {\n    return this.dimensions_;\n  }\n\n  /**\n   * Return the image format of the WMTS source.\n   * @return {string} Format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * Return the layer of the WMTS source.\n   * @return {string} Layer.\n   * @api\n   */\n  getLayer() {\n    return this.layer_;\n  }\n\n  /**\n   * Return the matrix set of the WMTS source.\n   * @return {string} MatrixSet.\n   * @api\n   */\n  getMatrixSet() {\n    return this.matrixSet_;\n  }\n\n  /**\n   * Return the request encoding, either \"KVP\" or \"REST\".\n   * @return {import(\"./WMTSRequestEncoding.js\").default} Request encoding.\n   * @api\n   */\n  getRequestEncoding() {\n    return this.requestEncoding_;\n  }\n\n  /**\n   * Return the style of the WMTS source.\n   * @return {string} Style.\n   * @api\n   */\n  getStyle() {\n    return this.style_;\n  }\n\n  /**\n   * Return the version of the WMTS source.\n   * @return {string} Version.\n   * @api\n   */\n  getVersion() {\n    return this.version_;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current dimensions.\n   */\n  getKeyForDimensions_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.dimensions_) {\n      res[i++] = key + '-' + this.dimensions_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the dimensions.\n   * @param {Object} dimensions Dimensions.\n   * @api\n   */\n  updateDimensions(dimensions) {\n    assign(this.dimensions_, dimensions);\n    this.setKey(this.getKeyForDimensions_());\n  }\n\n  /**\n   * @param {string} template Template.\n   * @return {import(\"../Tile.js\").UrlFunction} Tile URL function.\n   */\n  createFromWMTSTemplate(template) {\n    const requestEncoding = this.requestEncoding_;\n\n    // context property names are lower case to allow for a case insensitive\n    // replacement as some services use different naming conventions\n    const context = {\n      'layer': this.layer_,\n      'style': this.style_,\n      'tilematrixset': this.matrixSet_,\n    };\n\n    if (requestEncoding == WMTSRequestEncoding.KVP) {\n      assign(context, {\n        'Service': 'WMTS',\n        'Request': 'GetTile',\n        'Version': this.version_,\n        'Format': this.format_,\n      });\n    }\n\n    // TODO: we may want to create our own appendParams function so that params\n    // order conforms to wmts spec guidance, and so that we can avoid to escape\n    // special template params\n\n    template =\n      requestEncoding == WMTSRequestEncoding.KVP\n        ? appendParams(template, context)\n        : template.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n            return p.toLowerCase() in context ? context[p.toLowerCase()] : m;\n          });\n\n    const tileGrid = /** @type {import(\"../tilegrid/WMTS.js\").default} */ (this\n      .tileGrid);\n    const dimensions = this.dimensions_;\n\n    return (\n      /**\n       * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n       * @param {number} pixelRatio Pixel ratio.\n       * @param {import(\"../proj/Projection.js\").default} projection Projection.\n       * @return {string|undefined} Tile URL.\n       */\n      function (tileCoord, pixelRatio, projection) {\n        if (!tileCoord) {\n          return undefined;\n        } else {\n          const localContext = {\n            'TileMatrix': tileGrid.getMatrixId(tileCoord[0]),\n            'TileCol': tileCoord[1],\n            'TileRow': tileCoord[2],\n          };\n          assign(localContext, dimensions);\n          let url = template;\n          if (requestEncoding == WMTSRequestEncoding.KVP) {\n            url = appendParams(url, localContext);\n          } else {\n            url = url.replace(/\\{(\\w+?)\\}/g, function (m, p) {\n              return localContext[p];\n            });\n          }\n          return url;\n        }\n      }\n    );\n  }\n}\n\nexport default WMTS;\n\n/**\n * Generate source options from a capabilities object.\n * @param {Object} wmtsCap An object representing the capabilities document.\n * @param {!Object} config Configuration properties for the layer.  Defaults for\n *                  the layer will apply if not provided.\n *\n * Required config properties:\n *  - layer - {string} The layer identifier.\n *\n * Optional config properties:\n *  - matrixSet - {string} The matrix set identifier, required if there is\n *       more than one matrix set in the layer capabilities.\n *  - projection - {string} The desired CRS when no matrixSet is specified.\n *       eg: \"EPSG:3857\". If the desired projection is not available,\n *       an error is thrown.\n *  - requestEncoding - {string} url encoding format for the layer. Default is\n *       the first tile url format found in the GetCapabilities response.\n *  - style - {string} The name of the style\n *  - format - {string} Image format for the layer. Default is the first\n *       format returned in the GetCapabilities response.\n *  - crossOrigin - {string|null|undefined} Cross origin. Default is `undefined`.\n * @return {?Options} WMTS source options object or `null` if the layer was not found.\n * @api\n */\nexport function optionsFromCapabilities(wmtsCap, config) {\n  const layers = wmtsCap['Contents']['Layer'];\n  const l = find(layers, function (elt, index, array) {\n    return elt['Identifier'] == config['layer'];\n  });\n  if (l === null) {\n    return null;\n  }\n  const tileMatrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  let idx;\n  if (l['TileMatrixSetLink'].length > 1) {\n    if ('projection' in config) {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        const tileMatrixSet = find(tileMatrixSets, function (el) {\n          return el['Identifier'] == elt['TileMatrixSet'];\n        });\n        const supportedCRS = tileMatrixSet['SupportedCRS'];\n        const proj1 =\n          getProjection(\n            supportedCRS.replace(/urn:ogc:def:crs:(\\w+):(.*:)?(\\w+)$/, '$1:$3')\n          ) || getProjection(supportedCRS);\n        const proj2 = getProjection(config['projection']);\n        if (proj1 && proj2) {\n          return equivalent(proj1, proj2);\n        } else {\n          return supportedCRS == config['projection'];\n        }\n      });\n    } else {\n      idx = findIndex(l['TileMatrixSetLink'], function (elt, index, array) {\n        return elt['TileMatrixSet'] == config['matrixSet'];\n      });\n    }\n  } else {\n    idx = 0;\n  }\n  if (idx < 0) {\n    idx = 0;\n  }\n  const matrixSet =\n    /** @type {string} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSet']);\n  const matrixLimits =\n    /** @type {Array<Object>} */\n    (l['TileMatrixSetLink'][idx]['TileMatrixSetLimits']);\n\n  let format = /** @type {string} */ (l['Format'][0]);\n  if ('format' in config) {\n    format = config['format'];\n  }\n  idx = findIndex(l['Style'], function (elt, index, array) {\n    if ('style' in config) {\n      return elt['Title'] == config['style'];\n    } else {\n      return elt['isDefault'];\n    }\n  });\n  if (idx < 0) {\n    idx = 0;\n  }\n  const style = /** @type {string} */ (l['Style'][idx]['Identifier']);\n\n  const dimensions = {};\n  if ('Dimension' in l) {\n    l['Dimension'].forEach(function (elt, index, array) {\n      const key = elt['Identifier'];\n      let value = elt['Default'];\n      if (value === undefined) {\n        value = elt['Value'][0];\n      }\n      dimensions[key] = value;\n    });\n  }\n\n  const matrixSets = wmtsCap['Contents']['TileMatrixSet'];\n  const matrixSetObj = find(matrixSets, function (elt, index, array) {\n    return elt['Identifier'] == matrixSet;\n  });\n\n  let projection;\n  const code = matrixSetObj['SupportedCRS'];\n  if (code) {\n    projection =\n      getProjection(\n        code.replace(/urn:ogc:def:crs:(\\w+):(.*:)?(\\w+)$/, '$1:$3')\n      ) || getProjection(code);\n  }\n  if ('projection' in config) {\n    const projConfig = getProjection(config['projection']);\n    if (projConfig) {\n      if (!projection || equivalent(projConfig, projection)) {\n        projection = projConfig;\n      }\n    }\n  }\n\n  const wrapX = false;\n  const switchOriginXY = projection.getAxisOrientation().substr(0, 2) == 'ne';\n\n  let matrix = matrixSetObj.TileMatrix[0];\n\n  // create default matrixLimit\n  let selectedMatrixLimit = {\n    MinTileCol: 0,\n    MinTileRow: 0,\n    // substract one to end up at tile top left\n    MaxTileCol: matrix.MatrixWidth - 1,\n    MaxTileRow: matrix.MatrixHeight - 1,\n  };\n\n  //in case of matrix limits, use matrix limits to calculate extent\n  if (matrixLimits) {\n    selectedMatrixLimit = matrixLimits[matrixLimits.length - 1];\n    matrix = find(\n      matrixSetObj.TileMatrix,\n      (value) => value.Identifier === selectedMatrixLimit.TileMatrix\n    );\n  }\n\n  const resolution =\n    (matrix.ScaleDenominator * 0.00028) / projection.getMetersPerUnit(); // WMTS 1.0.0: standardized rendering pixel size\n  const origin = switchOriginXY\n    ? [matrix.TopLeftCorner[1], matrix.TopLeftCorner[0]]\n    : matrix.TopLeftCorner;\n  const tileSpanX = matrix.TileWidth * resolution;\n  const tileSpanY = matrix.TileHeight * resolution;\n\n  const extent = [\n    origin[0] + tileSpanX * selectedMatrixLimit.MinTileCol,\n    // add one to get proper bottom/right coordinate\n    origin[1] - tileSpanY * (1 + selectedMatrixLimit.MaxTileRow),\n    origin[0] + tileSpanX * (1 + selectedMatrixLimit.MaxTileCol),\n    origin[1] - tileSpanY * selectedMatrixLimit.MinTileRow,\n  ];\n\n  if (projection.getExtent() === null) {\n    projection.setExtent(extent);\n  }\n\n  const tileGrid = createFromCapabilitiesMatrixSet(\n    matrixSetObj,\n    extent,\n    matrixLimits\n  );\n\n  /** @type {!Array<string>} */\n  const urls = [];\n  let requestEncoding = config['requestEncoding'];\n  requestEncoding = requestEncoding !== undefined ? requestEncoding : '';\n\n  if (\n    'OperationsMetadata' in wmtsCap &&\n    'GetTile' in wmtsCap['OperationsMetadata']\n  ) {\n    const gets = wmtsCap['OperationsMetadata']['GetTile']['DCP']['HTTP']['Get'];\n\n    for (let i = 0, ii = gets.length; i < ii; ++i) {\n      if (gets[i]['Constraint']) {\n        const constraint = find(gets[i]['Constraint'], function (element) {\n          return element['name'] == 'GetEncoding';\n        });\n        const encodings = constraint['AllowedValues']['Value'];\n\n        if (requestEncoding === '') {\n          // requestEncoding not provided, use the first encoding from the list\n          requestEncoding = encodings[0];\n        }\n        if (requestEncoding === WMTSRequestEncoding.KVP) {\n          if (includes(encodings, WMTSRequestEncoding.KVP)) {\n            urls.push(/** @type {string} */ (gets[i]['href']));\n          }\n        } else {\n          break;\n        }\n      } else if (gets[i]['href']) {\n        requestEncoding = WMTSRequestEncoding.KVP;\n        urls.push(/** @type {string} */ (gets[i]['href']));\n      }\n    }\n  }\n  if (urls.length === 0) {\n    requestEncoding = WMTSRequestEncoding.REST;\n    l['ResourceURL'].forEach(function (element) {\n      if (element['resourceType'] === 'tile') {\n        format = element['format'];\n        urls.push(/** @type {string} */ (element['template']));\n      }\n    });\n  }\n\n  return {\n    urls: urls,\n    layer: config['layer'],\n    matrixSet: matrixSet,\n    format: format,\n    projection: projection,\n    requestEncoding: requestEncoding,\n    tileGrid: tileGrid,\n    style: style,\n    dimensions: dimensions,\n    wrapX: wrapX,\n    crossOrigin: config['crossOrigin'],\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}