{"ast":null,"code":"/**\n * @module ol/style/Image\n */\nimport { abstract } from '../util.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {number} opacity\n * @property {boolean} rotateWithView\n * @property {number} rotation\n * @property {number|import(\"../size.js\").Size} scale\n * @property {Array<number>} displacement\n */\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nvar ImageStyle = /** @class */function () {\n  /**\n   * @param {Options} options Options.\n   */\n  function ImageStyle(options) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = options.opacity;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotation_ = options.rotation;\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.scale_ = options.scale;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.displacement_ = options.displacement;\n  }\n  /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */\n  ImageStyle.prototype.clone = function () {\n    var scale = this.getScale();\n    return new ImageStyle({\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice()\n    });\n  };\n  /**\n   * Get the symbolizer opacity.\n   * @return {number} Opacity.\n   * @api\n   */\n  ImageStyle.prototype.getOpacity = function () {\n    return this.opacity_;\n  };\n  /**\n   * Determine whether the symbolizer rotates with the map.\n   * @return {boolean} Rotate with map.\n   * @api\n   */\n  ImageStyle.prototype.getRotateWithView = function () {\n    return this.rotateWithView_;\n  };\n  /**\n   * Get the symoblizer rotation.\n   * @return {number} Rotation.\n   * @api\n   */\n  ImageStyle.prototype.getRotation = function () {\n    return this.rotation_;\n  };\n  /**\n   * Get the symbolizer scale.\n   * @return {number|import(\"../size.js\").Size} Scale.\n   * @api\n   */\n  ImageStyle.prototype.getScale = function () {\n    return this.scale_;\n  };\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  ImageStyle.prototype.getScaleArray = function () {\n    return this.scaleArray_;\n  };\n  /**\n   * Get the displacement of the shape\n   * @return {Array<number>} Shape's center displacement\n   * @api\n   */\n  ImageStyle.prototype.getDisplacement = function () {\n    return this.displacement_;\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @abstract\n   * @return {Array<number>} Anchor.\n   */\n  ImageStyle.prototype.getAnchor = function () {\n    return abstract();\n  };\n  /**\n   * Get the image element for the symbolizer.\n   * @abstract\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  ImageStyle.prototype.getImage = function (pixelRatio) {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  ImageStyle.prototype.getHitDetectionImage = function () {\n    return abstract();\n  };\n  /*\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * */\n  ImageStyle.prototype.getPixelRatio = function (pixelRatio) {\n    return 1;\n  };\n  /**\n   * @abstract\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  ImageStyle.prototype.getImageState = function () {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  ImageStyle.prototype.getImageSize = function () {\n    return abstract();\n  };\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size of the hit-detection image.\n   */\n  ImageStyle.prototype.getHitDetectionImageSize = function () {\n    return abstract();\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @abstract\n   * @return {Array<number>} Origin.\n   */\n  ImageStyle.prototype.getOrigin = function () {\n    return abstract();\n  };\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size.\n   */\n  ImageStyle.prototype.getSize = function () {\n    return abstract();\n  };\n  /**\n   * Set the opacity.\n   *\n   * @param {number} opacity Opacity.\n   * @api\n   */\n  ImageStyle.prototype.setOpacity = function (opacity) {\n    this.opacity_ = opacity;\n  };\n  /**\n   * Set whether to rotate the style with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  ImageStyle.prototype.setRotateWithView = function (rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  };\n  /**\n   * Set the rotation.\n   *\n   * @param {number} rotation Rotation.\n   * @api\n   */\n  ImageStyle.prototype.setRotation = function (rotation) {\n    this.rotation_ = rotation;\n  };\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  ImageStyle.prototype.setScale = function (scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale);\n  };\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  ImageStyle.prototype.listenImageChange = function (listener) {\n    abstract();\n  };\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n  ImageStyle.prototype.load = function () {\n    abstract();\n  };\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  ImageStyle.prototype.unlistenImageChange = function (listener) {\n    abstract();\n  };\n  return ImageStyle;\n}();\nexport default ImageStyle;","map":{"version":3,"names":["abstract","toSize","ImageStyle","options","opacity_","opacity","rotateWithView_","rotateWithView","rotation_","rotation","scale_","scale","scaleArray_","displacement_","displacement","prototype","clone","getScale","getOpacity","Array","isArray","slice","getRotation","getRotateWithView","getDisplacement","getScaleArray","getAnchor","getImage","pixelRatio","getHitDetectionImage","getPixelRatio","getImageState","getImageSize","getHitDetectionImageSize","getOrigin","getSize","setOpacity","setRotateWithView","setRotation","setScale","listenImageChange","listener","load","unlistenImageChange"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/style/Image.js"],"sourcesContent":["/**\n * @module ol/style/Image\n */\nimport {abstract} from '../util.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {number} opacity\n * @property {boolean} rotateWithView\n * @property {number} rotation\n * @property {number|import(\"../size.js\").Size} scale\n * @property {Array<number>} displacement\n */\n\n/**\n * @classdesc\n * A base class used for creating subclasses and not instantiated in\n * apps. Base class for {@link module:ol/style/Icon~Icon}, {@link module:ol/style/Circle~CircleStyle} and\n * {@link module:ol/style/RegularShape~RegularShape}.\n * @abstract\n * @api\n */\nclass ImageStyle {\n  /**\n   * @param {Options} options Options.\n   */\n  constructor(options) {\n    /**\n     * @private\n     * @type {number}\n     */\n    this.opacity_ = options.opacity;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.rotateWithView_ = options.rotateWithView;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.rotation_ = options.rotation;\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.scale_ = options.scale;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.scaleArray_ = toSize(options.scale);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.displacement_ = options.displacement;\n  }\n\n  /**\n   * Clones the style.\n   * @return {ImageStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new ImageStyle({\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n      displacement: this.getDisplacement().slice(),\n    });\n  }\n\n  /**\n   * Get the symbolizer opacity.\n   * @return {number} Opacity.\n   * @api\n   */\n  getOpacity() {\n    return this.opacity_;\n  }\n\n  /**\n   * Determine whether the symbolizer rotates with the map.\n   * @return {boolean} Rotate with map.\n   * @api\n   */\n  getRotateWithView() {\n    return this.rotateWithView_;\n  }\n\n  /**\n   * Get the symoblizer rotation.\n   * @return {number} Rotation.\n   * @api\n   */\n  getRotation() {\n    return this.rotation_;\n  }\n\n  /**\n   * Get the symbolizer scale.\n   * @return {number|import(\"../size.js\").Size} Scale.\n   * @api\n   */\n  getScale() {\n    return this.scale_;\n  }\n\n  /**\n   * Get the symbolizer scale array.\n   * @return {import(\"../size.js\").Size} Scale array.\n   */\n  getScaleArray() {\n    return this.scaleArray_;\n  }\n\n  /**\n   * Get the displacement of the shape\n   * @return {Array<number>} Shape's center displacement\n   * @api\n   */\n  getDisplacement() {\n    return this.displacement_;\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @abstract\n   * @return {Array<number>} Anchor.\n   */\n  getAnchor() {\n    return abstract();\n  }\n\n  /**\n   * Get the image element for the symbolizer.\n   * @abstract\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  getImage(pixelRatio) {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {HTMLCanvasElement|HTMLVideoElement|HTMLImageElement} Image element.\n   */\n  getHitDetectionImage() {\n    return abstract();\n  }\n\n  /*\n   * Get the image pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * */\n  getPixelRatio(pixelRatio) {\n    return 1;\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return abstract();\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size of the hit-detection image.\n   */\n  getHitDetectionImageSize() {\n    return abstract();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @abstract\n   * @return {Array<number>} Origin.\n   */\n  getOrigin() {\n    return abstract();\n  }\n\n  /**\n   * Get the size of the symbolizer (in pixels).\n   * @abstract\n   * @return {import(\"../size.js\").Size} Size.\n   */\n  getSize() {\n    return abstract();\n  }\n\n  /**\n   * Set the opacity.\n   *\n   * @param {number} opacity Opacity.\n   * @api\n   */\n  setOpacity(opacity) {\n    this.opacity_ = opacity;\n  }\n\n  /**\n   * Set whether to rotate the style with the view.\n   *\n   * @param {boolean} rotateWithView Rotate with map.\n   * @api\n   */\n  setRotateWithView(rotateWithView) {\n    this.rotateWithView_ = rotateWithView;\n  }\n\n  /**\n   * Set the rotation.\n   *\n   * @param {number} rotation Rotation.\n   * @api\n   */\n  setRotation(rotation) {\n    this.rotation_ = rotation;\n  }\n  /**\n   * Set the scale.\n   *\n   * @param {number|import(\"../size.js\").Size} scale Scale.\n   * @api\n   */\n  setScale(scale) {\n    this.scale_ = scale;\n    this.scaleArray_ = toSize(scale);\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    abstract();\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * @abstract\n   */\n  load() {\n    abstract();\n  }\n\n  /**\n   * @abstract\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    abstract();\n  }\n}\n\nexport default ImageStyle;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}