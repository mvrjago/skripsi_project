{"ast":null,"code":"/**\n * @module ol/source/UTFGrid\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport EventType from '../events/EventType.js';\nimport SourceState from './State.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { assert } from '../asserts.js';\nimport { createFromTemplates, nullTileUrlFunction } from '../tileurlfunction.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { listenOnce } from '../events.js';\nimport { jsonp as requestJSONP } from '../net.js';\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\nvar CustomTile = /** @class */function (_super) {\n  __extends(CustomTile, _super);\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  function CustomTile(tileCoord, state, src, extent, preemptive, jsonp) {\n    var _this = _super.call(this, tileCoord, state) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.src_ = src;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.extent_ = extent;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.preemptive_ = preemptive;\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.grid_ = null;\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    _this.keys_ = null;\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    _this.data_ = null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.jsonp_ = jsonp;\n    return _this;\n  }\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  CustomTile.prototype.getImage = function () {\n    return null;\n  };\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  CustomTile.prototype.getData = function (coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    var xRelative = (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    var yRelative = (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n    var row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n    if (typeof row !== 'string') {\n      return null;\n    }\n    var code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n    var data = null;\n    if (code in this.keys_) {\n      var id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  };\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  CustomTile.prototype.forDataAtCoordinate = function (coordinate, callback, opt_request) {\n    if (this.state == TileState.EMPTY && opt_request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(this, EventType.CHANGE, function (e) {\n        callback(this.getData(coordinate));\n      }, this);\n      this.loadInternal_();\n    } else {\n      if (opt_request === true) {\n        setTimeout(function () {\n          callback(this.getData(coordinate));\n        }.bind(this), 0);\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  };\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  CustomTile.prototype.getKey = function () {\n    return this.src_;\n  };\n  /**\n   * @private\n   */\n  CustomTile.prototype.handleError_ = function () {\n    this.state = TileState.ERROR;\n    this.changed();\n  };\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  CustomTile.prototype.handleLoad_ = function (json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n    this.state = TileState.LOADED;\n    this.changed();\n  };\n  /**\n   * @private\n   */\n  CustomTile.prototype.loadInternal_ = function () {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(this.src_, this.handleLoad_.bind(this), this.handleError_.bind(this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  CustomTile.prototype.onXHRLoad_ = function (event) {\n    var client = /** @type {XMLHttpRequest} */event.target;\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n      try {\n        response = /** @type {!UTFGridJSON} */JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  CustomTile.prototype.onXHRError_ = function (event) {\n    this.handleError_();\n  };\n  /**\n   */\n  CustomTile.prototype.load = function () {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  };\n  return CustomTile;\n}(Tile);\nexport { CustomTile };\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `opt_request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n */\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nvar UTFGrid = /** @class */function (_super) {\n  __extends(UTFGrid, _super);\n  /**\n   * @param {Options} options Source options.\n   */\n  function UTFGrid(options) {\n    var _this = _super.call(this, {\n      projection: getProjection('EPSG:3857'),\n      state: SourceState.LOADING\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.preemptive_ = options.preemptive !== undefined ? options.preemptive : true;\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    _this.tileUrlFunction_ = nullTileUrlFunction;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.template_ = undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.jsonp_ = options.jsonp || false;\n    if (options.url) {\n      if (_this.jsonp_) {\n        requestJSONP(options.url, _this.handleTileJSONResponse.bind(_this), _this.handleTileJSONError.bind(_this));\n      } else {\n        var client = new XMLHttpRequest();\n        client.addEventListener('load', _this.onXHRLoad_.bind(_this));\n        client.addEventListener('error', _this.onXHRError_.bind(_this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      _this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n\n    return _this;\n  }\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  UTFGrid.prototype.onXHRLoad_ = function (event) {\n    var client = /** @type {XMLHttpRequest} */event.target;\n    // status will be 0 for file:// urls\n    if (!client.status || client.status >= 200 && client.status < 300) {\n      var response = void 0;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */JSON.parse(client.responseText);\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  };\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  UTFGrid.prototype.onXHRError_ = function (event) {\n    this.handleTileJSONError();\n  };\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  UTFGrid.prototype.getTemplate = function () {\n    return this.template_;\n  };\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  UTFGrid.prototype.forDataAtCoordinateAndResolution = function (coordinate, resolution, callback, opt_request) {\n    if (this.tileGrid) {\n      var z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      var tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      var tile = /** @type {!CustomTile} */this.getTile(tileCoord[0], tileCoord[1], tileCoord[2], 1, this.getProjection());\n      tile.forDataAtCoordinate(coordinate, callback, opt_request);\n    } else {\n      if (opt_request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n  UTFGrid.prototype.handleTileJSONError = function () {\n    this.setState(SourceState.ERROR);\n  };\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  UTFGrid.prototype.handleTileJSONResponse = function (tileJSON) {\n    var epsg4326Projection = getProjection('EPSG:4326');\n    var sourceProjection = this.getProjection();\n    var extent;\n    if (tileJSON['bounds'] !== undefined) {\n      var transform = getTransformFromProjections(epsg4326Projection, sourceProjection);\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n    var minZoom = tileJSON['minzoom'] || 0;\n    var maxZoom = tileJSON['maxzoom'] || 22;\n    var tileGrid = createXYZ({\n      extent: extentFromProjection(sourceProjection),\n      maxZoom: maxZoom,\n      minZoom: minZoom\n    });\n    this.tileGrid = tileGrid;\n    this.template_ = tileJSON['template'];\n    var grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n    if (tileJSON['attribution'] !== undefined) {\n      var attributionExtent_1 = extent !== undefined ? extent : epsg4326Projection.getExtent();\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent_1, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n    this.setState(SourceState.READY);\n  };\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n  UTFGrid.prototype.getTile = function (z, x, y, pixelRatio, projection) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    } else {\n      var tileCoord = [z, x, y];\n      var urlTileCoord = this.getTileCoordForTileUrlFunction(tileCoord, projection);\n      var tileUrl = this.tileUrlFunction_(urlTileCoord, pixelRatio, projection);\n      var tile = new CustomTile(tileCoord, tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY, tileUrl !== undefined ? tileUrl : '', this.tileGrid.getTileCoordExtent(tileCoord), this.preemptive_, this.jsonp_);\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  UTFGrid.prototype.useTile = function (z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n  return UTFGrid;\n}(TileSource);\nexport default UTFGrid;","map":{"version":3,"names":["EventType","SourceState","Tile","TileSource","TileState","applyTransform","intersects","assert","createFromTemplates","nullTileUrlFunction","createXYZ","extentFromProjection","getKeyZXY","get","getProjection","getTransformFromProjections","listenOnce","jsonp","requestJSONP","CustomTile","_super","__extends","tileCoord","state","src","extent","preemptive","_this","call","src_","extent_","preemptive_","grid_","keys_","data_","jsonp_","prototype","getImage","getData","coordinate","xRelative","yRelative","row","Math","floor","length","code","charCodeAt","data","id","forDataAtCoordinate","callback","opt_request","EMPTY","IDLE","CHANGE","e","loadInternal_","setTimeout","bind","getKey","handleError_","ERROR","changed","handleLoad_","json","LOADED","LOADING","client","XMLHttpRequest","addEventListener","onXHRLoad_","onXHRError_","open","send","event","target","status","response","JSON","parse","responseText","err","load","setState","UTFGrid","options","projection","undefined","tileUrlFunction_","template_","url","handleTileJSONResponse","handleTileJSONError","tileJSON","getTemplate","forDataAtCoordinateAndResolution","resolution","tileGrid","z","getZForResolution","zDirection","getTileCoordForCoordAndZ","tile","getTile","epsg4326Projection","sourceProjection","transform","minZoom","maxZoom","grids","attributionExtent_1","getExtent","setAttributions","frameState","READY","x","y","pixelRatio","tileCoordKey","tileCache","containsKey","urlTileCoord","getTileCoordForTileUrlFunction","tileUrl","getTileCoordExtent","set","useTile"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/UTFGrid.js"],"sourcesContent":["/**\n * @module ol/source/UTFGrid\n */\n\nimport EventType from '../events/EventType.js';\nimport SourceState from './State.js';\nimport Tile from '../Tile.js';\nimport TileSource from './Tile.js';\nimport TileState from '../TileState.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {assert} from '../asserts.js';\nimport {createFromTemplates, nullTileUrlFunction} from '../tileurlfunction.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {listenOnce} from '../events.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @typedef {Object} UTFGridJSON\n * @property {Array<string>} grid The grid.\n * @property {Array<string>} keys The keys.\n * @property {Object<string, Object>} [data] Optional data.\n */\n\nexport class CustomTile extends Tile {\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileState.js\").default} state State.\n   * @param {string} src Image source URI.\n   * @param {import(\"../extent.js\").Extent} extent Extent of the tile.\n   * @param {boolean} preemptive Load the tile when visible (before it's needed).\n   * @param {boolean} jsonp Load the tile as a script.\n   */\n  constructor(tileCoord, state, src, extent, preemptive, jsonp) {\n    super(tileCoord, state);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ = preemptive;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.grid_ = null;\n\n    /**\n     * @private\n     * @type {Array<string>}\n     */\n    this.keys_ = null;\n\n    /**\n     * @private\n     * @type {Object<string, Object>|undefined}\n     */\n    this.data_ = null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = jsonp;\n  }\n\n  /**\n   * Get the image element for this tile.\n   * @return {HTMLImageElement} Image.\n   */\n  getImage() {\n    return null;\n  }\n\n  /**\n   * Synchronously returns data at given coordinate (if available).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {*} The data.\n   */\n  getData(coordinate) {\n    if (!this.grid_ || !this.keys_) {\n      return null;\n    }\n    const xRelative =\n      (coordinate[0] - this.extent_[0]) / (this.extent_[2] - this.extent_[0]);\n    const yRelative =\n      (coordinate[1] - this.extent_[1]) / (this.extent_[3] - this.extent_[1]);\n\n    const row = this.grid_[Math.floor((1 - yRelative) * this.grid_.length)];\n\n    if (typeof row !== 'string') {\n      return null;\n    }\n\n    let code = row.charCodeAt(Math.floor(xRelative * row.length));\n    if (code >= 93) {\n      code--;\n    }\n    if (code >= 35) {\n      code--;\n    }\n    code -= 32;\n\n    let data = null;\n    if (code in this.keys_) {\n      const id = this.keys_[code];\n      if (this.data_ && id in this.data_) {\n        data = this.data_[id];\n      } else {\n        data = id;\n      }\n    }\n    return data;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate (or `null` if not yet loaded).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   */\n  forDataAtCoordinate(coordinate, callback, opt_request) {\n    if (this.state == TileState.EMPTY && opt_request === true) {\n      this.state = TileState.IDLE;\n      listenOnce(\n        this,\n        EventType.CHANGE,\n        function (e) {\n          callback(this.getData(coordinate));\n        },\n        this\n      );\n      this.loadInternal_();\n    } else {\n      if (opt_request === true) {\n        setTimeout(\n          function () {\n            callback(this.getData(coordinate));\n          }.bind(this),\n          0\n        );\n      } else {\n        callback(this.getData(coordinate));\n      }\n    }\n  }\n\n  /**\n   * Return the key to be used for all tiles in the source.\n   * @return {string} The key for all tiles.\n   */\n  getKey() {\n    return this.src_;\n  }\n\n  /**\n   * @private\n   */\n  handleError_() {\n    this.state = TileState.ERROR;\n    this.changed();\n  }\n\n  /**\n   * @param {!UTFGridJSON} json UTFGrid data.\n   * @private\n   */\n  handleLoad_(json) {\n    this.grid_ = json['grid'];\n    this.keys_ = json['keys'];\n    this.data_ = json['data'];\n\n    this.state = TileState.LOADED;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  loadInternal_() {\n    if (this.state == TileState.IDLE) {\n      this.state = TileState.LOADING;\n      if (this.jsonp_) {\n        requestJSONP(\n          this.src_,\n          this.handleLoad_.bind(this),\n          this.handleError_.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', this.src_);\n        client.send();\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {!UTFGridJSON} */ (JSON.parse(\n          client.responseText\n        ));\n      } catch (err) {\n        this.handleError_();\n        return;\n      }\n      this.handleLoad_(response);\n    } else {\n      this.handleError_();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleError_();\n  }\n\n  /**\n   */\n  load() {\n    if (this.preemptive_) {\n      this.loadInternal_();\n    } else {\n      this.setState(TileState.EMPTY);\n    }\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {boolean} [preemptive=true]\n * If `true` the UTFGrid source loads the tiles based on their \"visibility\".\n * This improves the speed of response, but increases traffic.\n * Note that if set to `false` (lazy loading), you need to pass `true` as\n * `opt_request` to the `forDataAtCoordinateAndResolution` method otherwise no\n * data will ever be loaded.\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\n * Useful when the server does not support CORS..\n * @property {import(\"./TileJSON.js\").Config} [tileJSON] TileJSON configuration for this source.\n * If not provided, `url` must be configured.\n * @property {string} [url] TileJSON endpoint that provides the configuration for this source.\n * Request will be made through JSONP. If not provided, `tileJSON` must be configured.\n */\n\n/**\n * @classdesc\n * Layer source for UTFGrid interaction data loaded from TileJSON format.\n * @api\n */\nclass UTFGrid extends TileSource {\n  /**\n   * @param {Options} options Source options.\n   */\n  constructor(options) {\n    super({\n      projection: getProjection('EPSG:3857'),\n      state: SourceState.LOADING,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.preemptive_ =\n      options.preemptive !== undefined ? options.preemptive : true;\n\n    /**\n     * @private\n     * @type {!import(\"../Tile.js\").UrlFunction}\n     */\n    this.tileUrlFunction_ = nullTileUrlFunction;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.template_ = undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.jsonp_ = options.jsonp || false;\n\n    if (options.url) {\n      if (this.jsonp_) {\n        requestJSONP(\n          options.url,\n          this.handleTileJSONResponse.bind(this),\n          this.handleTileJSONError.bind(this)\n        );\n      } else {\n        const client = new XMLHttpRequest();\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\n        client.addEventListener('error', this.onXHRError_.bind(this));\n        client.open('GET', options.url);\n        client.send();\n      }\n    } else if (options.tileJSON) {\n      this.handleTileJSONResponse(options.tileJSON);\n    } else {\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The load event.\n   */\n  onXHRLoad_(event) {\n    const client = /** @type {XMLHttpRequest} */ (event.target);\n    // status will be 0 for file:// urls\n    if (!client.status || (client.status >= 200 && client.status < 300)) {\n      let response;\n      try {\n        response = /** @type {import(\"./TileJSON.js\").Config} */ (JSON.parse(\n          client.responseText\n        ));\n      } catch (err) {\n        this.handleTileJSONError();\n        return;\n      }\n      this.handleTileJSONResponse(response);\n    } else {\n      this.handleTileJSONError();\n    }\n  }\n\n  /**\n   * @private\n   * @param {Event} event The error event.\n   */\n  onXHRError_(event) {\n    this.handleTileJSONError();\n  }\n\n  /**\n   * Return the template from TileJSON.\n   * @return {string|undefined} The template from TileJSON.\n   * @api\n   */\n  getTemplate() {\n    return this.template_;\n  }\n\n  /**\n   * Calls the callback (synchronously by default) with the available data\n   * for given coordinate and resolution (or `null` if not yet loaded or\n   * in case of an error).\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {function(*): void} callback Callback.\n   * @param {boolean=} opt_request If `true` the callback is always async.\n   *                               The tile data is requested if not yet loaded.\n   * @api\n   */\n  forDataAtCoordinateAndResolution(\n    coordinate,\n    resolution,\n    callback,\n    opt_request\n  ) {\n    if (this.tileGrid) {\n      const z = this.tileGrid.getZForResolution(resolution, this.zDirection);\n      const tileCoord = this.tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n      const tile = /** @type {!CustomTile} */ (this.getTile(\n        tileCoord[0],\n        tileCoord[1],\n        tileCoord[2],\n        1,\n        this.getProjection()\n      ));\n      tile.forDataAtCoordinate(coordinate, callback, opt_request);\n    } else {\n      if (opt_request === true) {\n        setTimeout(function () {\n          callback(null);\n        }, 0);\n      } else {\n        callback(null);\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handleTileJSONError() {\n    this.setState(SourceState.ERROR);\n  }\n\n  /**\n   * TODO: very similar to ol/source/TileJSON#handleTileJSONResponse\n   * @protected\n   * @param {import(\"./TileJSON.js\").Config} tileJSON Tile JSON.\n   */\n  handleTileJSONResponse(tileJSON) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const sourceProjection = this.getProjection();\n    let extent;\n    if (tileJSON['bounds'] !== undefined) {\n      const transform = getTransformFromProjections(\n        epsg4326Projection,\n        sourceProjection\n      );\n      extent = applyTransform(tileJSON['bounds'], transform);\n    }\n\n    const minZoom = tileJSON['minzoom'] || 0;\n    const maxZoom = tileJSON['maxzoom'] || 22;\n    const tileGrid = createXYZ({\n      extent: extentFromProjection(sourceProjection),\n      maxZoom: maxZoom,\n      minZoom: minZoom,\n    });\n    this.tileGrid = tileGrid;\n\n    this.template_ = tileJSON['template'];\n\n    const grids = tileJSON['grids'];\n    if (!grids) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n\n    this.tileUrlFunction_ = createFromTemplates(grids, tileGrid);\n\n    if (tileJSON['attribution'] !== undefined) {\n      const attributionExtent =\n        extent !== undefined ? extent : epsg4326Projection.getExtent();\n\n      this.setAttributions(function (frameState) {\n        if (intersects(attributionExtent, frameState.extent)) {\n          return [tileJSON['attribution']];\n        }\n        return null;\n      });\n    }\n\n    this.setState(SourceState.READY);\n  }\n\n  /**\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {!CustomTile} Tile.\n   */\n  getTile(z, x, y, pixelRatio, projection) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      return this.tileCache.get(tileCoordKey);\n    } else {\n      const tileCoord = [z, x, y];\n      const urlTileCoord = this.getTileCoordForTileUrlFunction(\n        tileCoord,\n        projection\n      );\n      const tileUrl = this.tileUrlFunction_(\n        urlTileCoord,\n        pixelRatio,\n        projection\n      );\n      const tile = new CustomTile(\n        tileCoord,\n        tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\n        tileUrl !== undefined ? tileUrl : '',\n        this.tileGrid.getTileCoordExtent(tileCoord),\n        this.preemptive_,\n        this.jsonp_\n      );\n      this.tileCache.set(tileCoordKey, tile);\n      return tile;\n    }\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UTFGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}