{"ast":null,"code":"/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from './Interaction.js';\nimport { TRUE } from '../functions.js';\nimport { get as getProjection } from '../proj.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors.\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n/**\n * @enum {string}\n */\nvar DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures'\n};\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nvar DragAndDropEvent = /** @class */function (_super) {\n  __extends(DragAndDropEvent, _super);\n  /**\n   * @param {DragAndDropEventType} type Type.\n   * @param {File} file File.\n   * @param {Array<import(\"../Feature.js\").default>=} opt_features Features.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   */\n  function DragAndDropEvent(type, file, opt_features, opt_projection) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n    _this.features = opt_features;\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n    _this.file = file;\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n    _this.projection = opt_projection;\n    return _this;\n  }\n  return DragAndDropEvent;\n}(Event);\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n * @api\n *\n * @fires DragAndDropEvent\n */\nvar DragAndDrop = /** @class */function (_super) {\n  __extends(DragAndDrop, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function DragAndDrop(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      handleEvent: TRUE\n    }) || this;\n    /**\n     * @private\n     * @type {Array<typeof import(\"../format/Feature.js\").default>}\n     */\n    _this.formatConstructors_ = options.formatConstructors ? options.formatConstructors : [];\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    _this.projection_ = options.projection ? getProjection(options.projection) : null;\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    _this.dropListenKeys_ = null;\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n    _this.source_ = options.source || null;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.target = options.target ? options.target : null;\n    return _this;\n  }\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n  DragAndDrop.prototype.handleResult_ = function (file, event) {\n    var result = event.target.result;\n    var map = this.getMap();\n    var projection = this.projection_;\n    if (!projection) {\n      var view = map.getView();\n      projection = view.getProjection();\n    }\n    var formatConstructors = this.formatConstructors_;\n    for (var i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      var format = new formatConstructors[i]();\n      var features = this.tryReadFeatures_(format, result, {\n        featureProjection: projection\n      });\n      if (features && features.length > 0) {\n        if (this.source_) {\n          this.source_.clear();\n          this.source_.addFeatures(features);\n        }\n        this.dispatchEvent(new DragAndDropEvent(DragAndDropEventType.ADD_FEATURES, file, features, projection));\n        break;\n      }\n    }\n  };\n  /**\n   * @private\n   */\n  DragAndDrop.prototype.registerListeners_ = function () {\n    var map = this.getMap();\n    if (map) {\n      var dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [listen(dropArea, EventType.DROP, this.handleDrop, this), listen(dropArea, EventType.DRAGENTER, this.handleStop, this), listen(dropArea, EventType.DRAGOVER, this.handleStop, this), listen(dropArea, EventType.DROP, this.handleStop, this)];\n    }\n  };\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  DragAndDrop.prototype.setActive = function (active) {\n    if (!this.getActive() && active) {\n      this.registerListeners_();\n    }\n    if (this.getActive() && !active) {\n      this.unregisterListeners_();\n    }\n    _super.prototype.setActive.call(this, active);\n  };\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  DragAndDrop.prototype.setMap = function (map) {\n    this.unregisterListeners_();\n    _super.prototype.setMap.call(this, map);\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  };\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  DragAndDrop.prototype.tryReadFeatures_ = function (format, text, options) {\n    try {\n      return (/** @type {Array<import(\"../Feature.js\").default>} */\n        format.readFeatures(text, options)\n      );\n    } catch (e) {\n      return null;\n    }\n  };\n  /**\n   * @private\n   */\n  DragAndDrop.prototype.unregisterListeners_ = function () {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  };\n  /**\n   * @param {DragEvent} event Event.\n   */\n  DragAndDrop.prototype.handleDrop = function (event) {\n    var files = event.dataTransfer.files;\n    for (var i = 0, ii = files.length; i < ii; ++i) {\n      var file = files.item(i);\n      var reader = new FileReader();\n      reader.addEventListener(EventType.LOAD, this.handleResult_.bind(this, file));\n      reader.readAsText(file);\n    }\n  };\n  /**\n   * @param {DragEvent} event Event.\n   */\n  DragAndDrop.prototype.handleStop = function (event) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  };\n  return DragAndDrop;\n}(Interaction);\nexport default DragAndDrop;","map":{"version":3,"names":["Event","EventType","Interaction","TRUE","get","getProjection","listen","unlistenByKey","DragAndDropEventType","ADD_FEATURES","DragAndDropEvent","_super","__extends","type","file","opt_features","opt_projection","_this","call","features","projection","DragAndDrop","opt_options","options","handleEvent","formatConstructors_","formatConstructors","projection_","dropListenKeys_","source_","source","target","prototype","handleResult_","event","result","map","getMap","view","getView","i","ii","length","format","tryReadFeatures_","featureProjection","clear","addFeatures","dispatchEvent","registerListeners_","dropArea","getViewport","DROP","handleDrop","DRAGENTER","handleStop","DRAGOVER","setActive","active","getActive","unregisterListeners_","setMap","text","readFeatures","e","forEach","files","dataTransfer","item","reader","FileReader","addEventListener","LOAD","bind","readAsText","stopPropagation","preventDefault","dropEffect"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/interaction/DragAndDrop.js"],"sourcesContent":["/**\n * @module ol/interaction/DragAndDrop\n */\n// FIXME should handle all geo-referenced data, not just vector data\n\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport Interaction from './Interaction.js';\nimport {TRUE} from '../functions.js';\nimport {get as getProjection} from '../proj.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<typeof import(\"../format/Feature.js\").default>} [formatConstructors] Format constructors.\n * @property {import(\"../source/Vector.js\").default} [source] Optional vector source where features will be added.  If a source is provided\n * all existing features will be removed and new features will be added when\n * they are dropped on the target.  If you want to add features to a vector\n * source without removing the existing features (append only), instead of\n * providing the source option listen for the \"addfeatures\" event.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Target projection. By default, the map's view's projection is used.\n * @property {HTMLElement} [target] The element that is used as the drop target, default is the viewport element.\n */\n\n/**\n * @enum {string}\n */\nconst DragAndDropEventType = {\n  /**\n   * Triggered when features are added\n   * @event DragAndDropEvent#addfeatures\n   * @api\n   */\n  ADD_FEATURES: 'addfeatures',\n};\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/interaction/DragAndDrop~DragAndDrop} instances are instances\n * of this type.\n */\nclass DragAndDropEvent extends Event {\n  /**\n   * @param {DragAndDropEventType} type Type.\n   * @param {File} file File.\n   * @param {Array<import(\"../Feature.js\").default>=} opt_features Features.\n   * @param {import(\"../proj/Projection.js\").default=} opt_projection Projection.\n   */\n  constructor(type, file, opt_features, opt_projection) {\n    super(type);\n\n    /**\n     * The features parsed from dropped data.\n     * @type {Array<import(\"../Feature.js\").FeatureLike>|undefined}\n     * @api\n     */\n    this.features = opt_features;\n\n    /**\n     * The dropped file.\n     * @type {File}\n     * @api\n     */\n    this.file = file;\n\n    /**\n     * The feature projection.\n     * @type {import(\"../proj/Projection.js\").default|undefined}\n     * @api\n     */\n    this.projection = opt_projection;\n  }\n}\n\n/**\n * @classdesc\n * Handles input of vector data by drag and drop.\n * @api\n *\n * @fires DragAndDropEvent\n */\nclass DragAndDrop extends Interaction {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      handleEvent: TRUE,\n    });\n\n    /**\n     * @private\n     * @type {Array<typeof import(\"../format/Feature.js\").default>}\n     */\n    this.formatConstructors_ = options.formatConstructors\n      ? options.formatConstructors\n      : [];\n\n    /**\n     * @private\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection_ = options.projection\n      ? getProjection(options.projection)\n      : null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"../events.js\").EventsKey>}\n     */\n    this.dropListenKeys_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../source/Vector.js\").default}\n     */\n    this.source_ = options.source || null;\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.target = options.target ? options.target : null;\n  }\n\n  /**\n   * @param {File} file File.\n   * @param {Event} event Load event.\n   * @private\n   */\n  handleResult_(file, event) {\n    const result = event.target.result;\n    const map = this.getMap();\n    let projection = this.projection_;\n    if (!projection) {\n      const view = map.getView();\n      projection = view.getProjection();\n    }\n\n    const formatConstructors = this.formatConstructors_;\n    for (let i = 0, ii = formatConstructors.length; i < ii; ++i) {\n      const format = new formatConstructors[i]();\n      const features = this.tryReadFeatures_(format, result, {\n        featureProjection: projection,\n      });\n      if (features && features.length > 0) {\n        if (this.source_) {\n          this.source_.clear();\n          this.source_.addFeatures(features);\n        }\n        this.dispatchEvent(\n          new DragAndDropEvent(\n            DragAndDropEventType.ADD_FEATURES,\n            file,\n            features,\n            projection\n          )\n        );\n        break;\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  registerListeners_() {\n    const map = this.getMap();\n    if (map) {\n      const dropArea = this.target ? this.target : map.getViewport();\n      this.dropListenKeys_ = [\n        listen(dropArea, EventType.DROP, this.handleDrop, this),\n        listen(dropArea, EventType.DRAGENTER, this.handleStop, this),\n        listen(dropArea, EventType.DRAGOVER, this.handleStop, this),\n        listen(dropArea, EventType.DROP, this.handleStop, this),\n      ];\n    }\n  }\n\n  /**\n   * Activate or deactivate the interaction.\n   * @param {boolean} active Active.\n   * @observable\n   * @api\n   */\n  setActive(active) {\n    if (!this.getActive() && active) {\n      this.registerListeners_();\n    }\n    if (this.getActive() && !active) {\n      this.unregisterListeners_();\n    }\n    super.setActive(active);\n  }\n\n  /**\n   * Remove the interaction from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   */\n  setMap(map) {\n    this.unregisterListeners_();\n    super.setMap(map);\n    if (this.getActive()) {\n      this.registerListeners_();\n    }\n  }\n\n  /**\n   * @param {import(\"../format/Feature.js\").default} format Format.\n   * @param {string} text Text.\n   * @param {import(\"../format/Feature.js\").ReadOptions} options Read options.\n   * @private\n   * @return {Array<import(\"../Feature.js\").default>} Features.\n   */\n  tryReadFeatures_(format, text, options) {\n    try {\n      return (\n        /** @type {Array<import(\"../Feature.js\").default>} */\n        (format.readFeatures(text, options))\n      );\n    } catch (e) {\n      return null;\n    }\n  }\n\n  /**\n   * @private\n   */\n  unregisterListeners_() {\n    if (this.dropListenKeys_) {\n      this.dropListenKeys_.forEach(unlistenByKey);\n      this.dropListenKeys_ = null;\n    }\n  }\n\n  /**\n   * @param {DragEvent} event Event.\n   */\n  handleDrop(event) {\n    const files = event.dataTransfer.files;\n    for (let i = 0, ii = files.length; i < ii; ++i) {\n      const file = files.item(i);\n      const reader = new FileReader();\n      reader.addEventListener(\n        EventType.LOAD,\n        this.handleResult_.bind(this, file)\n      );\n      reader.readAsText(file);\n    }\n  }\n\n  /**\n   * @param {DragEvent} event Event.\n   */\n  handleStop(event) {\n    event.stopPropagation();\n    event.preventDefault();\n    event.dataTransfer.dropEffect = 'copy';\n  }\n}\n\nexport default DragAndDrop;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}