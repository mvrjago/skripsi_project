{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Heatmap\n */\nimport VectorLayer from './Vector.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport { assign } from '../obj.js';\nimport { clamp } from '../math.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { getChangeEventType } from '../Object.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default} [source] Source.\n */\n/**\n * @enum {string}\n * @private\n */\nvar Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius'\n};\n/**\n * @const\n * @type {Array<string>}\n */\nvar DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nvar Heatmap = /** @class */function (_super) {\n  __extends(Heatmap, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function Heatmap(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var baseOptions = assign({}, options);\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    _this = _super.call(this, baseOptions) || this;\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    _this.gradient_ = null;\n    _this.addEventListener(getChangeEventType(Property.GRADIENT), _this.handleGradientChanged_);\n    _this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n    _this.setBlur(options.blur !== undefined ? options.blur : 15);\n    _this.setRadius(options.radius !== undefined ? options.radius : 8);\n    var weight = options.weight ? options.weight : 'weight';\n    if (typeof weight === 'string') {\n      _this.weightFunction_ = function (feature) {\n        return feature.get(weight);\n      };\n    } else {\n      _this.weightFunction_ = weight;\n    }\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    _this.setRenderOrder(null);\n    return _this;\n  }\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.getBlur = function () {\n    return (/** @type {number} */this.get(Property.BLUR)\n    );\n  };\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.getGradient = function () {\n    return (/** @type {Array<string>} */this.get(Property.GRADIENT)\n    );\n  };\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.getRadius = function () {\n    return (/** @type {number} */this.get(Property.RADIUS)\n    );\n  };\n  /**\n   * @private\n   */\n  Heatmap.prototype.handleGradientChanged_ = function () {\n    this.gradient_ = createGradient(this.getGradient());\n  };\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.setBlur = function (blur) {\n    this.set(Property.BLUR, blur);\n  };\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.setGradient = function (colors) {\n    this.set(Property.GRADIENT, colors);\n  };\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  Heatmap.prototype.setRadius = function (radius) {\n    this.set(Property.RADIUS, radius);\n  };\n  /**\n   * Create a renderer for this layer.\n   * @return {WebGLPointsLayerRenderer} A layer renderer.\n   */\n  Heatmap.prototype.createRenderer = function () {\n    return new WebGLPointsLayerRenderer(this, {\n      attributes: [{\n        name: 'weight',\n        callback: function (feature) {\n          var weight = this.weightFunction_(feature);\n          return weight !== undefined ? clamp(weight, 0, 1) : 1;\n        }.bind(this)\n      }],\n      vertexShader: \"\\n        precision mediump float;\\n        uniform mat4 u_projectionMatrix;\\n        uniform mat4 u_offsetScaleMatrix;\\n        uniform float u_size;\\n        attribute vec2 a_position;\\n        attribute float a_index;\\n        attribute float a_weight;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n\\n        void main(void) {\\n          mat4 offsetMatrix = u_offsetScaleMatrix;\\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\\n          v_texCoord = vec2(u, v);\\n          v_weight = a_weight;\\n        }\",\n      fragmentShader: \"\\n        precision mediump float;\\n        uniform float u_blurSlope;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n\\n        void main(void) {\\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\\n        }\",\n      hitVertexShader: \"\\n        precision mediump float;\\n        uniform mat4 u_projectionMatrix;\\n        uniform mat4 u_offsetScaleMatrix;\\n        uniform float u_size;\\n        attribute vec2 a_position;\\n        attribute float a_index;\\n        attribute float a_weight;\\n        attribute vec4 a_hitColor;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n        varying vec4 v_hitColor;\\n\\n        void main(void) {\\n          mat4 offsetMatrix = u_offsetScaleMatrix;\\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\\n          v_texCoord = vec2(u, v);\\n          v_hitColor = a_hitColor;\\n          v_weight = a_weight;\\n        }\",\n      hitFragmentShader: \"\\n        precision mediump float;\\n        uniform float u_blurSlope;\\n\\n        varying vec2 v_texCoord;\\n        varying float v_weight;\\n        varying vec4 v_hitColor;\\n\\n        void main(void) {\\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\\n          if (alpha < 0.05) {\\n            discard;\\n          }\\n\\n          gl_FragColor = v_hitColor;\\n        }\",\n      uniforms: {\n        u_size: function () {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        }.bind(this),\n        u_blurSlope: function () {\n          return this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR));\n        }.bind(this)\n      },\n      postProcesses: [{\n        fragmentShader: \"\\n            precision mediump float;\\n\\n            uniform sampler2D u_image;\\n            uniform sampler2D u_gradientTexture;\\n\\n            varying vec2 v_texCoord;\\n\\n            void main() {\\n              vec4 color = texture2D(u_image, v_texCoord);\\n              gl_FragColor.a = color.a;\\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\\n              gl_FragColor.rgb *= gl_FragColor.a;\\n            }\",\n        uniforms: {\n          u_gradientTexture: function () {\n            return this.gradient_;\n          }.bind(this)\n        }\n      }]\n    });\n  };\n  return Heatmap;\n}(VectorLayer);\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n  var width = 1;\n  var height = 256;\n  var context = createCanvasContext2D(width, height);\n  var gradient = context.createLinearGradient(0, 0, width, height);\n  var step = 1 / (colors.length - 1);\n  for (var i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n  return context.canvas;\n}\nexport default Heatmap;","map":{"version":3,"names":["VectorLayer","WebGLPointsLayerRenderer","assign","clamp","createCanvasContext2D","getChangeEventType","Property","BLUR","GRADIENT","RADIUS","DEFAULT_GRADIENT","Heatmap","_super","__extends","opt_options","_this","options","baseOptions","gradient","radius","blur","weight","call","gradient_","addEventListener","handleGradientChanged_","setGradient","setBlur","undefined","setRadius","weightFunction_","feature","get","setRenderOrder","prototype","getBlur","getGradient","getRadius","createGradient","set","colors","createRenderer","attributes","name","callback","bind","vertexShader","fragmentShader","hitVertexShader","hitFragmentShader","uniforms","u_size","u_blurSlope","Math","max","postProcesses","u_gradientTexture","width","height","context","createLinearGradient","step","length","i","ii","addColorStop","fillStyle","fillRect","canvas"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/layer/Heatmap.js"],"sourcesContent":["/**\n * @module ol/layer/Heatmap\n */\nimport VectorLayer from './Vector.js';\nimport WebGLPointsLayerRenderer from '../renderer/webgl/PointsLayer.js';\nimport {assign} from '../obj.js';\nimport {clamp} from '../math.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {getChangeEventType} from '../Object.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {Array<string>} [gradient=['#00f', '#0ff', '#0f0', '#ff0', '#f00']] The color gradient\n * of the heatmap, specified as an array of CSS color strings.\n * @property {number} [radius=8] Radius size in pixels.\n * @property {number} [blur=15] Blur size in pixels.\n * @property {string|function(import(\"../Feature.js\").default):number} [weight='weight'] The feature\n * attribute to use for the weight or a function that returns a weight from a feature. Weight values\n * should range from 0 to 1 (and values outside will be clamped to that range).\n * @property {import(\"../source/Vector.js\").default} [source] Source.\n */\n\n/**\n * @enum {string}\n * @private\n */\nconst Property = {\n  BLUR: 'blur',\n  GRADIENT: 'gradient',\n  RADIUS: 'radius',\n};\n\n/**\n * @const\n * @type {Array<string>}\n */\nconst DEFAULT_GRADIENT = ['#00f', '#0ff', '#0f0', '#ff0', '#f00'];\n\n/**\n * @classdesc\n * Layer for rendering vector data as a heatmap.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nclass Heatmap extends VectorLayer {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const baseOptions = assign({}, options);\n\n    delete baseOptions.gradient;\n    delete baseOptions.radius;\n    delete baseOptions.blur;\n    delete baseOptions.weight;\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement}\n     */\n    this.gradient_ = null;\n\n    this.addEventListener(\n      getChangeEventType(Property.GRADIENT),\n      this.handleGradientChanged_\n    );\n\n    this.setGradient(options.gradient ? options.gradient : DEFAULT_GRADIENT);\n\n    this.setBlur(options.blur !== undefined ? options.blur : 15);\n\n    this.setRadius(options.radius !== undefined ? options.radius : 8);\n\n    const weight = options.weight ? options.weight : 'weight';\n    if (typeof weight === 'string') {\n      this.weightFunction_ = function (feature) {\n        return feature.get(weight);\n      };\n    } else {\n      this.weightFunction_ = weight;\n    }\n\n    // For performance reasons, don't sort the features before rendering.\n    // The render order is not relevant for a heatmap representation.\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Return the blur size in pixels.\n   * @return {number} Blur size in pixels.\n   * @api\n   * @observable\n   */\n  getBlur() {\n    return /** @type {number} */ (this.get(Property.BLUR));\n  }\n\n  /**\n   * Return the gradient colors as array of strings.\n   * @return {Array<string>} Colors.\n   * @api\n   * @observable\n   */\n  getGradient() {\n    return /** @type {Array<string>} */ (this.get(Property.GRADIENT));\n  }\n\n  /**\n   * Return the size of the radius in pixels.\n   * @return {number} Radius size in pixel.\n   * @api\n   * @observable\n   */\n  getRadius() {\n    return /** @type {number} */ (this.get(Property.RADIUS));\n  }\n\n  /**\n   * @private\n   */\n  handleGradientChanged_() {\n    this.gradient_ = createGradient(this.getGradient());\n  }\n\n  /**\n   * Set the blur size in pixels.\n   * @param {number} blur Blur size in pixels.\n   * @api\n   * @observable\n   */\n  setBlur(blur) {\n    this.set(Property.BLUR, blur);\n  }\n\n  /**\n   * Set the gradient colors as array of strings.\n   * @param {Array<string>} colors Gradient.\n   * @api\n   * @observable\n   */\n  setGradient(colors) {\n    this.set(Property.GRADIENT, colors);\n  }\n\n  /**\n   * Set the size of the radius in pixels.\n   * @param {number} radius Radius size in pixel.\n   * @api\n   * @observable\n   */\n  setRadius(radius) {\n    this.set(Property.RADIUS, radius);\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {WebGLPointsLayerRenderer} A layer renderer.\n   */\n  createRenderer() {\n    return new WebGLPointsLayerRenderer(this, {\n      attributes: [\n        {\n          name: 'weight',\n          callback: function (feature) {\n            const weight = this.weightFunction_(feature);\n            return weight !== undefined ? clamp(weight, 0, 1) : 1;\n          }.bind(this),\n        },\n      ],\n      vertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_weight = a_weight;\n        }`,\n      fragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          gl_FragColor = vec4(alpha, alpha, alpha, alpha);\n        }`,\n      hitVertexShader: `\n        precision mediump float;\n        uniform mat4 u_projectionMatrix;\n        uniform mat4 u_offsetScaleMatrix;\n        uniform float u_size;\n        attribute vec2 a_position;\n        attribute float a_index;\n        attribute float a_weight;\n        attribute vec4 a_hitColor;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          mat4 offsetMatrix = u_offsetScaleMatrix;\n          float offsetX = a_index == 0.0 || a_index == 3.0 ? -u_size / 2.0 : u_size / 2.0;\n          float offsetY = a_index == 0.0 || a_index == 1.0 ? -u_size / 2.0 : u_size / 2.0;\n          vec4 offsets = offsetMatrix * vec4(offsetX, offsetY, 0.0, 0.0);\n          gl_Position = u_projectionMatrix * vec4(a_position, 0.0, 1.0) + offsets;\n          float u = a_index == 0.0 || a_index == 3.0 ? 0.0 : 1.0;\n          float v = a_index == 0.0 || a_index == 1.0 ? 0.0 : 1.0;\n          v_texCoord = vec2(u, v);\n          v_hitColor = a_hitColor;\n          v_weight = a_weight;\n        }`,\n      hitFragmentShader: `\n        precision mediump float;\n        uniform float u_blurSlope;\n\n        varying vec2 v_texCoord;\n        varying float v_weight;\n        varying vec4 v_hitColor;\n\n        void main(void) {\n          vec2 texCoord = v_texCoord * 2.0 - vec2(1.0, 1.0);\n          float sqRadius = texCoord.x * texCoord.x + texCoord.y * texCoord.y;\n          float value = (1.0 - sqrt(sqRadius)) * u_blurSlope;\n          float alpha = smoothstep(0.0, 1.0, value) * v_weight;\n          if (alpha < 0.05) {\n            discard;\n          }\n\n          gl_FragColor = v_hitColor;\n        }`,\n      uniforms: {\n        u_size: function () {\n          return (this.get(Property.RADIUS) + this.get(Property.BLUR)) * 2;\n        }.bind(this),\n        u_blurSlope: function () {\n          return (\n            this.get(Property.RADIUS) / Math.max(1, this.get(Property.BLUR))\n          );\n        }.bind(this),\n      },\n      postProcesses: [\n        {\n          fragmentShader: `\n            precision mediump float;\n\n            uniform sampler2D u_image;\n            uniform sampler2D u_gradientTexture;\n\n            varying vec2 v_texCoord;\n\n            void main() {\n              vec4 color = texture2D(u_image, v_texCoord);\n              gl_FragColor.a = color.a;\n              gl_FragColor.rgb = texture2D(u_gradientTexture, vec2(0.5, color.a)).rgb;\n              gl_FragColor.rgb *= gl_FragColor.a;\n            }`,\n          uniforms: {\n            u_gradientTexture: function () {\n              return this.gradient_;\n            }.bind(this),\n          },\n        },\n      ],\n    });\n  }\n}\n\n/**\n * @param {Array<string>} colors A list of colored.\n * @return {HTMLCanvasElement} canvas with gradient texture.\n */\nfunction createGradient(colors) {\n  const width = 1;\n  const height = 256;\n  const context = createCanvasContext2D(width, height);\n\n  const gradient = context.createLinearGradient(0, 0, width, height);\n  const step = 1 / (colors.length - 1);\n  for (let i = 0, ii = colors.length; i < ii; ++i) {\n    gradient.addColorStop(i * step, colors[i]);\n  }\n\n  context.fillStyle = gradient;\n  context.fillRect(0, 0, width, height);\n\n  return context.canvas;\n}\n\nexport default Heatmap;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,WAAW,MAAM,aAAa;AACrC,OAAOC,wBAAwB,MAAM,kCAAkC;AACvE,SAAQC,MAAM,QAAO,WAAW;AAChC,SAAQC,KAAK,QAAO,YAAY;AAChC,SAAQC,qBAAqB,QAAO,WAAW;AAC/C,SAAQC,kBAAkB,QAAO,cAAc;AAE/C;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA;;;;AAIA,IAAMC,QAAQ,GAAG;EACfC,IAAI,EAAE,MAAM;EACZC,QAAQ,EAAE,UAAU;EACpBC,MAAM,EAAE;CACT;AAED;;;;AAIA,IAAMC,gBAAgB,GAAG,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC;AAEjE;;;;;;;;;;AAUA,IAAAC,OAAA,0BAAAC,MAAA;EAAsBC,SAAA,CAAAF,OAAA,EAAAC,MAAA;EACpB;;;EAGA,SAAAD,QAAYG,WAAW;IAAvB,IAAAC,KAAA;IACE,IAAMC,OAAO,GAAGF,WAAW,GAAGA,WAAW,GAAG,EAAE;IAE9C,IAAMG,WAAW,GAAGf,MAAM,CAAC,EAAE,EAAEc,OAAO,CAAC;IAEvC,OAAOC,WAAW,CAACC,QAAQ;IAC3B,OAAOD,WAAW,CAACE,MAAM;IACzB,OAAOF,WAAW,CAACG,IAAI;IACvB,OAAOH,WAAW,CAACI,MAAM;IACzBN,KAAA,GAAAH,MAAA,CAAAU,IAAA,OAAML,WAAW,CAAC;IAElB;;;;IAIAF,KAAI,CAACQ,SAAS,GAAG,IAAI;IAErBR,KAAI,CAACS,gBAAgB,CACnBnB,kBAAkB,CAACC,QAAQ,CAACE,QAAQ,CAAC,EACrCO,KAAI,CAACU,sBAAsB,CAC5B;IAEDV,KAAI,CAACW,WAAW,CAACV,OAAO,CAACE,QAAQ,GAAGF,OAAO,CAACE,QAAQ,GAAGR,gBAAgB,CAAC;IAExEK,KAAI,CAACY,OAAO,CAACX,OAAO,CAACI,IAAI,KAAKQ,SAAS,GAAGZ,OAAO,CAACI,IAAI,GAAG,EAAE,CAAC;IAE5DL,KAAI,CAACc,SAAS,CAACb,OAAO,CAACG,MAAM,KAAKS,SAAS,GAAGZ,OAAO,CAACG,MAAM,GAAG,CAAC,CAAC;IAEjE,IAAME,MAAM,GAAGL,OAAO,CAACK,MAAM,GAAGL,OAAO,CAACK,MAAM,GAAG,QAAQ;IACzD,IAAI,OAAOA,MAAM,KAAK,QAAQ,EAAE;MAC9BN,KAAI,CAACe,eAAe,GAAG,UAAUC,OAAO;QACtC,OAAOA,OAAO,CAACC,GAAG,CAACX,MAAM,CAAC;MAC5B,CAAC;KACF,MAAM;MACLN,KAAI,CAACe,eAAe,GAAGT,MAAM;;IAG/B;IACA;IACAN,KAAI,CAACkB,cAAc,CAAC,IAAI,CAAC;;EAC3B;EAEA;;;;;;EAMAtB,OAAA,CAAAuB,SAAA,CAAAC,OAAO,GAAP;IACE,OAAO,sBAAuB,IAAI,CAACH,GAAG,CAAC1B,QAAQ,CAACC,IAAI;IAAC;EACvD,CAAC;EAED;;;;;;EAMAI,OAAA,CAAAuB,SAAA,CAAAE,WAAW,GAAX;IACE,OAAO,6BAA8B,IAAI,CAACJ,GAAG,CAAC1B,QAAQ,CAACE,QAAQ;IAAC;EAClE,CAAC;EAED;;;;;;EAMAG,OAAA,CAAAuB,SAAA,CAAAG,SAAS,GAAT;IACE,OAAO,sBAAuB,IAAI,CAACL,GAAG,CAAC1B,QAAQ,CAACG,MAAM;IAAC;EACzD,CAAC;EAED;;;EAGAE,OAAA,CAAAuB,SAAA,CAAAT,sBAAsB,GAAtB;IACE,IAAI,CAACF,SAAS,GAAGe,cAAc,CAAC,IAAI,CAACF,WAAW,EAAE,CAAC;EACrD,CAAC;EAED;;;;;;EAMAzB,OAAA,CAAAuB,SAAA,CAAAP,OAAO,GAAP,UAAQP,IAAI;IACV,IAAI,CAACmB,GAAG,CAACjC,QAAQ,CAACC,IAAI,EAAEa,IAAI,CAAC;EAC/B,CAAC;EAED;;;;;;EAMAT,OAAA,CAAAuB,SAAA,CAAAR,WAAW,GAAX,UAAYc,MAAM;IAChB,IAAI,CAACD,GAAG,CAACjC,QAAQ,CAACE,QAAQ,EAAEgC,MAAM,CAAC;EACrC,CAAC;EAED;;;;;;EAMA7B,OAAA,CAAAuB,SAAA,CAAAL,SAAS,GAAT,UAAUV,MAAM;IACd,IAAI,CAACoB,GAAG,CAACjC,QAAQ,CAACG,MAAM,EAAEU,MAAM,CAAC;EACnC,CAAC;EAED;;;;EAIAR,OAAA,CAAAuB,SAAA,CAAAO,cAAc,GAAd;IACE,OAAO,IAAIxC,wBAAwB,CAAC,IAAI,EAAE;MACxCyC,UAAU,EAAE,CACV;QACEC,IAAI,EAAE,QAAQ;QACdC,QAAQ,EAAE,UAAUb,OAAO;UACzB,IAAMV,MAAM,GAAG,IAAI,CAACS,eAAe,CAACC,OAAO,CAAC;UAC5C,OAAOV,MAAM,KAAKO,SAAS,GAAGzB,KAAK,CAACkB,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC;QACvD,CAAC,CAACwB,IAAI,CAAC,IAAI;OACZ,CACF;MACDC,YAAY,EAAE,m8BAsBV;MACJC,cAAc,EAAE,8fAaZ;MACJC,eAAe,EAAE,6iCAyBb;MACJC,iBAAiB,EAAE,8kBAkBf;MACJC,QAAQ,EAAE;QACRC,MAAM,EAAE;UACN,OAAO,CAAC,IAAI,CAACnB,GAAG,CAAC1B,QAAQ,CAACG,MAAM,CAAC,GAAG,IAAI,CAACuB,GAAG,CAAC1B,QAAQ,CAACC,IAAI,CAAC,IAAI,CAAC;QAClE,CAAC,CAACsC,IAAI,CAAC,IAAI,CAAC;QACZO,WAAW,EAAE;UACX,OACE,IAAI,CAACpB,GAAG,CAAC1B,QAAQ,CAACG,MAAM,CAAC,GAAG4C,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,IAAI,CAACtB,GAAG,CAAC1B,QAAQ,CAACC,IAAI,CAAC,CAAC;QAEpE,CAAC,CAACsC,IAAI,CAAC,IAAI;OACZ;MACDU,aAAa,EAAE,CACb;QACER,cAAc,EAAE,wcAaZ;QACJG,QAAQ,EAAE;UACRM,iBAAiB,EAAE;YACjB,OAAO,IAAI,CAACjC,SAAS;UACvB,CAAC,CAACsB,IAAI,CAAC,IAAI;;OAEd;KAEJ,CAAC;EACJ,CAAC;EACH,OAAAlC,OAAC;AAAD,CAAC,CArPqBX,WAAW;AAuPjC;;;;AAIA,SAASsC,cAAcA,CAACE,MAAM;EAC5B,IAAMiB,KAAK,GAAG,CAAC;EACf,IAAMC,MAAM,GAAG,GAAG;EAClB,IAAMC,OAAO,GAAGvD,qBAAqB,CAACqD,KAAK,EAAEC,MAAM,CAAC;EAEpD,IAAMxC,QAAQ,GAAGyC,OAAO,CAACC,oBAAoB,CAAC,CAAC,EAAE,CAAC,EAAEH,KAAK,EAAEC,MAAM,CAAC;EAClE,IAAMG,IAAI,GAAG,CAAC,IAAIrB,MAAM,CAACsB,MAAM,GAAG,CAAC,CAAC;EACpC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGxB,MAAM,CAACsB,MAAM,EAAEC,CAAC,GAAGC,EAAE,EAAE,EAAED,CAAC,EAAE;IAC/C7C,QAAQ,CAAC+C,YAAY,CAACF,CAAC,GAAGF,IAAI,EAAErB,MAAM,CAACuB,CAAC,CAAC,CAAC;;EAG5CJ,OAAO,CAACO,SAAS,GAAGhD,QAAQ;EAC5ByC,OAAO,CAACQ,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEV,KAAK,EAAEC,MAAM,CAAC;EAErC,OAAOC,OAAO,CAACS,MAAM;AACvB;AAEA,eAAezD,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}