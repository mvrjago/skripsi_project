{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport { IMAGE_DECODE } from './has.js';\nimport { getHeight } from './extent.js';\nimport { listenOnce, unlistenByKey } from './events.js';\n/**\n * A function that takes an {@link module:ol/Image~Image} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~Image#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\nvar ImageWrapper = /** @class */function (_super) {\n  __extends(ImageWrapper, _super);\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  function ImageWrapper(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\n    var _this = _super.call(this, extent, resolution, pixelRatio, ImageState.IDLE) || this;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.src_ = src;\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    _this.image_ = new Image();\n    if (crossOrigin !== null) {\n      _this.image_.crossOrigin = crossOrigin;\n    }\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    _this.unlisten_ = null;\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    _this.state = ImageState.IDLE;\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    _this.imageLoadFunction_ = imageLoadFunction;\n    return _this;\n  }\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  ImageWrapper.prototype.getImage = function () {\n    return this.image_;\n  };\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  ImageWrapper.prototype.handleImageError_ = function () {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  };\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  ImageWrapper.prototype.handleImageLoad_ = function () {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  };\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  ImageWrapper.prototype.load = function () {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n    }\n  };\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  ImageWrapper.prototype.setImage = function (image) {\n    this.image_ = image;\n  };\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  ImageWrapper.prototype.unlistenImage_ = function () {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  };\n  return ImageWrapper;\n}(ImageBase);\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  var img = /** @type {HTMLImageElement} */image;\n  if (img.src && IMAGE_DECODE) {\n    var promise = img.decode();\n    var listening_1 = true;\n    var unlisten = function () {\n      listening_1 = false;\n    };\n    promise.then(function () {\n      if (listening_1) {\n        loadHandler();\n      }\n    }).catch(function (error) {\n      if (listening_1) {\n        // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:\n        //        https://bugs.webkit.org/show_bug.cgi?id=198527\n        if (error.name === 'EncodingError' && error.message === 'Invalid image type.') {\n          loadHandler();\n        } else {\n          errorHandler();\n        }\n      }\n    });\n    return unlisten;\n  }\n  var listenerKeys = [listenOnce(img, EventType.LOAD, loadHandler), listenOnce(img, EventType.ERROR, errorHandler)];\n  return function unlisten() {\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\nexport default ImageWrapper;","map":{"version":3,"names":["EventType","ImageBase","ImageState","IMAGE_DECODE","getHeight","listenOnce","unlistenByKey","ImageWrapper","_super","__extends","extent","resolution","pixelRatio","src","crossOrigin","imageLoadFunction","_this","call","IDLE","src_","image_","Image","unlisten_","state","imageLoadFunction_","prototype","getImage","handleImageError_","ERROR","unlistenImage_","changed","handleImageLoad_","undefined","height","LOADED","load","LOADING","listenImage","bind","setImage","image","loadHandler","errorHandler","img","promise","decode","listening_1","unlisten","then","catch","error","name","message","listenerKeys","LOAD","forEach"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/Image.js"],"sourcesContent":["/**\n * @module ol/Image\n */\nimport EventType from './events/EventType.js';\nimport ImageBase from './ImageBase.js';\nimport ImageState from './ImageState.js';\nimport {IMAGE_DECODE} from './has.js';\nimport {getHeight} from './extent.js';\nimport {listenOnce, unlistenByKey} from './events.js';\n\n/**\n * A function that takes an {@link module:ol/Image~Image} for the image and a\n * `{string}` for the src as arguments. It is supposed to make it so the\n * underlying image {@link module:ol/Image~Image#getImage} is assigned the\n * content specified by the src. If not specified, the default is\n *\n *     function(image, src) {\n *       image.getImage().src = src;\n *     }\n *\n * Providing a custom `imageLoadFunction` can be useful to load images with\n * post requests or - in general - through XHR requests, where the src of the\n * image element would be set to a data URI when the content is loaded.\n *\n * @typedef {function(ImageWrapper, string): void} LoadFunction\n * @api\n */\n\nclass ImageWrapper extends ImageBase {\n  /**\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {number|undefined} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {string} src Image source URI.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {LoadFunction} imageLoadFunction Image load function.\n   */\n  constructor(\n    extent,\n    resolution,\n    pixelRatio,\n    src,\n    crossOrigin,\n    imageLoadFunction\n  ) {\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\n     */\n    this.image_ = new Image();\n    if (crossOrigin !== null) {\n      this.image_.crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @protected\n     * @type {import(\"./ImageState.js\").default}\n     */\n    this.state = ImageState.IDLE;\n\n    /**\n     * @private\n     * @type {LoadFunction}\n     */\n    this.imageLoadFunction_ = imageLoadFunction;\n  }\n\n  /**\n   * @return {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} Image.\n   * @api\n   */\n  getImage() {\n    return this.image_;\n  }\n\n  /**\n   * Tracks loading or read errors.\n   *\n   * @private\n   */\n  handleImageError_() {\n    this.state = ImageState.ERROR;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Tracks successful image load.\n   *\n   * @private\n   */\n  handleImageLoad_() {\n    if (this.resolution === undefined) {\n      this.resolution = getHeight(this.extent) / this.image_.height;\n    }\n    this.state = ImageState.LOADED;\n    this.unlistenImage_();\n    this.changed();\n  }\n\n  /**\n   * Load the image or retry if loading previously failed.\n   * Loading is taken care of by the tile queue, and calling this method is\n   * only needed for preloading or for reloading in case of an error.\n   * @api\n   */\n  load() {\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\n      this.state = ImageState.LOADING;\n      this.changed();\n      this.imageLoadFunction_(this, this.src_);\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\n   */\n  setImage(image) {\n    this.image_ = image;\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image element.\n * @param {function():any} loadHandler Load callback function.\n * @param {function():any} errorHandler Error callback function.\n * @return {function():void} Callback to stop listening.\n */\nexport function listenImage(image, loadHandler, errorHandler) {\n  const img = /** @type {HTMLImageElement} */ (image);\n\n  if (img.src && IMAGE_DECODE) {\n    const promise = img.decode();\n    let listening = true;\n    const unlisten = function () {\n      listening = false;\n    };\n    promise\n      .then(function () {\n        if (listening) {\n          loadHandler();\n        }\n      })\n      .catch(function (error) {\n        if (listening) {\n          // FIXME: Unconditionally call errorHandler() when this bug is fixed upstream:\n          //        https://bugs.webkit.org/show_bug.cgi?id=198527\n          if (\n            error.name === 'EncodingError' &&\n            error.message === 'Invalid image type.'\n          ) {\n            loadHandler();\n          } else {\n            errorHandler();\n          }\n        }\n      });\n    return unlisten;\n  }\n\n  const listenerKeys = [\n    listenOnce(img, EventType.LOAD, loadHandler),\n    listenOnce(img, EventType.ERROR, errorHandler),\n  ];\n  return function unlisten() {\n    listenerKeys.forEach(unlistenByKey);\n  };\n}\n\nexport default ImageWrapper;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}