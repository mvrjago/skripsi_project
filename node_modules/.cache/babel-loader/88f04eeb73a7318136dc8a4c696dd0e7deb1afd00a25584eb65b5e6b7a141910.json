{"ast":null,"code":"/**\n * @module ol/source/Vector\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport { TRUE, VOID } from '../functions.js';\nimport { all as allStrategy } from '../loadingstrategy.js';\nimport { assert } from '../asserts.js';\nimport { containsExtent, equals } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getUid } from '../util.js';\nimport { getValues, isEmpty } from '../obj.js';\nimport { listen, unlistenByKey } from '../events.js';\nimport { xhr } from '../featureloader.js';\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nvar VectorSourceEvent = /** @class */function (_super) {\n  __extends(VectorSourceEvent, _super);\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>=} opt_feature Feature.\n   */\n  function VectorSourceEvent(type, opt_feature) {\n    var _this = _super.call(this, type) || this;\n    /**\n     * The feature being added or removed.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */\n    _this.feature = opt_feature;\n    return _this;\n  }\n  return VectorSourceEvent;\n}(Event);\nexport { VectorSourceEvent };\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nvar VectorSource = /** @class */function (_super) {\n  __extends(VectorSource, _super);\n  /**\n   * @param {Options=} opt_options Vector source options.\n   */\n  function VectorSource(opt_options) {\n    var _this = this;\n    var options = opt_options || {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true\n    }) || this;\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    _this.loader_ = VOID;\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    _this.format_ = options.format;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    _this.url_ = options.url;\n    if (options.loader !== undefined) {\n      _this.loader_ = options.loader;\n    } else if (_this.url_ !== undefined) {\n      assert(_this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      _this.loader_ = xhr(_this.url_, /** @type {import(\"../format/Feature.js\").default} */_this.format_);\n    }\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    _this.strategy_ = options.strategy !== undefined ? options.strategy : allStrategy;\n    var useSpatialIndex = options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    _this.loadedExtentsRtree_ = new RBush();\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.nullGeometryFeatures_ = {};\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.idIndex_ = {};\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.uidIndex_ = {};\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    _this.featureChangeKeys_ = {};\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>}\n     */\n    _this.featuresCollection_ = null;\n    var collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      _this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      _this.bindFeaturesCollection_(collection);\n    }\n    return _this;\n  }\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */\n  VectorSource.prototype.addFeature = function (feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  };\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.addFeatureInternal = function (feature) {\n    var featureKey = getUid(feature);\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n      return;\n    }\n    this.setupChangeEvents_(featureKey, feature);\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      var extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, feature));\n  };\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @private\n   */\n  VectorSource.prototype.setupChangeEvents_ = function (featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [listen(feature, EventType.CHANGE, this.handleFeatureChange_, this), listen(feature, ObjectEventType.PROPERTYCHANGE, this.handleFeatureChange_, this)];\n  };\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  VectorSource.prototype.addToIndex_ = function (featureKey, feature) {\n    var valid = true;\n    var id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    }\n    if (valid) {\n      assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source\n      this.uidIndex_[featureKey] = feature;\n    }\n    return valid;\n  };\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n   * @api\n   */\n  VectorSource.prototype.addFeatures = function (features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  };\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n   * @protected\n   */\n  VectorSource.prototype.addFeaturesInternal = function (features) {\n    var extents = [];\n    var newFeatures = [];\n    var geometryFeatures = [];\n    for (var i = 0, length_1 = features.length; i < length_1; i++) {\n      var feature = features[i];\n      var featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n    for (var i = 0, length_2 = newFeatures.length; i < length_2; i++) {\n      var feature = newFeatures[i];\n      var featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n      var geometry = feature.getGeometry();\n      if (geometry) {\n        var extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n    for (var i = 0, length_3 = newFeatures.length; i < length_3; i++) {\n      this.dispatchEvent(new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i]));\n    }\n  };\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n   * @private\n   */\n  VectorSource.prototype.bindFeaturesCollection_ = function (collection) {\n    var modifyingCollection = false;\n    this.addEventListener(VectorEventType.ADDFEATURE,\n    /**\n     * @param {VectorSourceEvent<Geometry>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.push(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    this.addEventListener(VectorEventType.REMOVEFEATURE,\n    /**\n     * @param {VectorSourceEvent<Geometry>} evt The vector source event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        collection.remove(evt.feature);\n        modifyingCollection = false;\n      }\n    });\n    collection.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.addFeature( /** @type {import(\"../Feature.js\").default<Geometry>} */evt.element);\n        modifyingCollection = false;\n      }\n    }.bind(this));\n    collection.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n     */\n    function (evt) {\n      if (!modifyingCollection) {\n        modifyingCollection = true;\n        this.removeFeature( /** @type {import(\"../Feature.js\").default<Geometry>} */evt.element);\n        modifyingCollection = false;\n      }\n    }.bind(this));\n    this.featuresCollection_ = collection;\n  };\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n  VectorSource.prototype.clear = function (opt_fast) {\n    if (opt_fast) {\n      for (var featureId in this.featureChangeKeys_) {\n        var keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));\n        for (var id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.nullGeometryFeatures_ = {};\n    var clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  };\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeature = function (callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  VectorSource.prototype.forEachFeatureAtCoordinateDirect = function (coordinate, callback) {\n    var extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  };\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureInExtent = function (extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  };\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  VectorSource.prototype.forEachFeatureIntersectingExtent = function (extent, callback) {\n    return this.forEachFeatureInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     * @return {T|undefined} The return value from the last call to the callback.\n     */\n    function (feature) {\n      var geometry = feature.getGeometry();\n      if (geometry.intersectsExtent(extent)) {\n        var result = callback(feature);\n        if (result) {\n          return result;\n        }\n      }\n    });\n  };\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>} The collection of features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesCollection = function () {\n    return this.featuresCollection_;\n  };\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeatures = function () {\n    var features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return (/** @type {Array<import(\"../Feature.js\").default<Geometry>>} */features\n    );\n  };\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesAtCoordinate = function (coordinate) {\n    var features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  };\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  VectorSource.prototype.getFeaturesInExtent = function (extent) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.getInExtent(extent);\n    } else if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray();\n    } else {\n      return [];\n    }\n  };\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n   * @api\n   */\n  VectorSource.prototype.getClosestFeatureToCoordinate = function (coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    var x = coordinate[0];\n    var y = coordinate[1];\n    var closestFeature = null;\n    var closestPoint = [NaN, NaN];\n    var minSquaredDistance = Infinity;\n    var extent = [-Infinity, -Infinity, Infinity, Infinity];\n    var filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(extent,\n    /**\n     * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n     */\n    function (feature) {\n      if (filter(feature)) {\n        var geometry = feature.getGeometry();\n        var previousMinSquaredDistance = minSquaredDistance;\n        minSquaredDistance = geometry.closestPointXY(x, y, closestPoint, minSquaredDistance);\n        if (minSquaredDistance < previousMinSquaredDistance) {\n          closestFeature = feature;\n          // This is sneaky.  Reduce the extent that it is currently being\n          // searched while the R-Tree traversal using this same extent object\n          // is still in progress.  This is safe because the new extent is\n          // strictly contained by the old extent.\n          var minDistance = Math.sqrt(minSquaredDistance);\n          extent[0] = x - minDistance;\n          extent[1] = y - minDistance;\n          extent[2] = x + minDistance;\n          extent[3] = y + minDistance;\n        }\n      }\n    });\n    return closestFeature;\n  };\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  VectorSource.prototype.getExtent = function (opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  };\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   * @api\n   */\n  VectorSource.prototype.getFeatureById = function (id) {\n    var feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  };\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   */\n  VectorSource.prototype.getFeatureByUid = function (uid) {\n    var feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  };\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  VectorSource.prototype.getFormat = function () {\n    return this.format_;\n  };\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  VectorSource.prototype.getOverlaps = function () {\n    return this.overlaps_;\n  };\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  VectorSource.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  VectorSource.prototype.handleFeatureChange_ = function (event) {\n    var feature = /** @type {import(\"../Feature.js\").default<Geometry>} */event.target;\n    var featureKey = getUid(feature);\n    var geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      var extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    var id = feature.getId();\n    if (id !== undefined) {\n      var sid = id.toString();\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n    this.changed();\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature));\n  };\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  VectorSource.prototype.hasFeature = function (feature) {\n    var id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.uidIndex_;\n    }\n  };\n  /**\n   * @return {boolean} Is empty.\n   */\n  VectorSource.prototype.isEmpty = function () {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  VectorSource.prototype.loadFeatures = function (extent, resolution, projection) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n    var _loop_1 = function (i, ii) {\n      var extentToLoad = extentsToLoad[i];\n      var alreadyLoaded = loadedExtentsRtree.forEachInExtent(extentToLoad,\n      /**\n       * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n       * @return {boolean} Contains.\n       */\n      function (object) {\n        return containsExtent(object.extent, extentToLoad);\n      });\n      if (!alreadyLoaded) {\n        this_1.loader_.call(this_1, extentToLoad, resolution, projection);\n        loadedExtentsRtree.insert(extentToLoad, {\n          extent: extentToLoad.slice()\n        });\n        this_1.loading = this_1.loader_ !== VOID;\n      }\n    };\n    var this_1 = this;\n    for (var i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      _loop_1(i, ii);\n    }\n  };\n  VectorSource.prototype.refresh = function () {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n    _super.prototype.refresh.call(this);\n  };\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  VectorSource.prototype.removeLoadedExtent = function (extent) {\n    var loadedExtentsRtree = this.loadedExtentsRtree_;\n    var obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  };\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n   * @api\n   */\n  VectorSource.prototype.removeFeature = function (feature) {\n    var featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  };\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  VectorSource.prototype.removeFeatureInternal = function (feature) {\n    var featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    var id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    }\n    delete this.uidIndex_[featureKey];\n    this.dispatchEvent(new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature));\n  };\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  VectorSource.prototype.removeFromIdIndex_ = function (feature) {\n    var removed = false;\n    for (var id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  };\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  VectorSource.prototype.setLoader = function (loader) {\n    this.loader_ = loader;\n  };\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n  VectorSource.prototype.setUrl = function (url) {\n    assert(this.format_, 7); // `format` must be set when `url` is set\n    this.setLoader(xhr(url, this.format_));\n  };\n  return VectorSource;\n}(Source);\nexport default VectorSource;","map":{"version":3,"names":["Collection","CollectionEventType","Event","EventType","ObjectEventType","RBush","Source","SourceState","VectorEventType","TRUE","VOID","all","allStrategy","assert","containsExtent","equals","extend","getUid","getValues","isEmpty","listen","unlistenByKey","xhr","VectorSourceEvent","_super","__extends","type","opt_feature","_this","call","feature","VectorSource","opt_options","options","attributions","projection","undefined","state","READY","wrapX","loader_","format_","format","overlaps_","overlaps","url_","url","loader","strategy_","strategy","useSpatialIndex","featuresRtree_","loadedExtentsRtree_","nullGeometryFeatures_","idIndex_","uidIndex_","featureChangeKeys_","featuresCollection_","collection","features","Array","isArray","getArray","addFeaturesInternal","bindFeaturesCollection_","prototype","addFeature","addFeatureInternal","changed","featureKey","addToIndex_","remove","setupChangeEvents_","geometry","getGeometry","extent","getExtent","insert","dispatchEvent","ADDFEATURE","CHANGE","handleFeatureChange_","PROPERTYCHANGE","valid","id","getId","toString","addFeatures","extents","newFeatures","geometryFeatures","i","length_1","length","push","length_2","load","length_3","modifyingCollection","addEventListener","evt","REMOVEFEATURE","ADD","element","bind","REMOVE","removeFeature","clear","opt_fast","featureId","keys","forEach","removeFeatureInternal","clearEvent","CLEAR","forEachFeature","callback","forEachFeatureAtCoordinateDirect","coordinate","forEachFeatureInExtent","intersectsCoordinate","forEachInExtent","forEachFeatureIntersectingExtent","intersectsExtent","result","getFeaturesCollection","getFeatures","getAll","getFeaturesAtCoordinate","getFeaturesInExtent","getInExtent","getClosestFeatureToCoordinate","opt_filter","x","y","closestFeature","closestPoint","NaN","minSquaredDistance","Infinity","filter","previousMinSquaredDistance","closestPointXY","minDistance","Math","sqrt","opt_extent","getFeatureById","getFeatureByUid","uid","getFormat","getOverlaps","getUrl","event","target","update","sid","removeFromIdIndex_","CHANGEFEATURE","hasFeature","loadFeatures","resolution","loadedExtentsRtree","extentsToLoad","loading","ii","extentToLoad","alreadyLoaded","object","this_1","slice","refresh","removeLoadedExtent","obj","removed","setLoader","setUrl"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/Vector.js"],"sourcesContent":["/**\n * @module ol/source/Vector\n */\n\nimport Collection from '../Collection.js';\nimport CollectionEventType from '../CollectionEventType.js';\nimport Event from '../events/Event.js';\nimport EventType from '../events/EventType.js';\nimport ObjectEventType from '../ObjectEventType.js';\nimport RBush from '../structs/RBush.js';\nimport Source from './Source.js';\nimport SourceState from './State.js';\nimport VectorEventType from './VectorEventType.js';\nimport {TRUE, VOID} from '../functions.js';\nimport {all as allStrategy} from '../loadingstrategy.js';\nimport {assert} from '../asserts.js';\nimport {containsExtent, equals} from '../extent.js';\nimport {extend} from '../array.js';\nimport {getUid} from '../util.js';\nimport {getValues, isEmpty} from '../obj.js';\nimport {listen, unlistenByKey} from '../events.js';\nimport {xhr} from '../featureloader.js';\n\n/**\n * A function that takes an {@link module:ol/extent~Extent} and a resolution as arguments, and\n * returns an array of {@link module:ol/extent~Extent} with the extents to load. Usually this\n * is one of the standard {@link module:ol/loadingstrategy} strategies.\n *\n * @typedef {function(import(\"../extent.js\").Extent, number): Array<import(\"../extent.js\").Extent>} LoadingStrategy\n * @api\n */\n\n/**\n * @classdesc\n * Events emitted by {@link module:ol/source/Vector} instances are instances of this\n * type.\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nexport class VectorSourceEvent extends Event {\n  /**\n   * @param {string} type Type.\n   * @param {import(\"../Feature.js\").default<Geometry>=} opt_feature Feature.\n   */\n  constructor(type, opt_feature) {\n    super(type);\n\n    /**\n     * The feature being added or removed.\n     * @type {import(\"../Feature.js\").default<Geometry>|undefined}\n     * @api\n     */\n    this.feature = opt_feature;\n  }\n}\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {Array<import(\"../Feature.js\").default>|Collection<import(\"../Feature.js\").default>} [features]\n * Features. If provided as {@link module:ol/Collection}, the features in the source\n * and the collection will stay in sync.\n * @property {import(\"../format/Feature.js\").default} [format] The feature format used by the XHR\n * feature loader when `url` is set. Required if `url` is set, otherwise ignored.\n * @property {import(\"../featureloader.js\").FeatureLoader} [loader]\n * The loader function used to load features, from a remote source for example.\n * If this is not set and `url` is set, the source will create and use an XHR\n * feature loader.\n *\n * Example:\n *\n * ```js\n * import {Vector} from 'ol/source';\n * import {GeoJSON} from 'ol/format';\n * import {bbox} from 'ol/loadingstrategy';\n *\n * var vectorSource = new Vector({\n *   format: new GeoJSON(),\n *   loader: function(extent, resolution, projection) {\n *      var proj = projection.getCode();\n *      var url = 'https://ahocevar.com/geoserver/wfs?service=WFS&' +\n *          'version=1.1.0&request=GetFeature&typename=osm:water_areas&' +\n *          'outputFormat=application/json&srsname=' + proj + '&' +\n *          'bbox=' + extent.join(',') + ',' + proj;\n *      var xhr = new XMLHttpRequest();\n *      xhr.open('GET', url);\n *      var onError = function() {\n *        vectorSource.removeLoadedExtent(extent);\n *      }\n *      xhr.onerror = onError;\n *      xhr.onload = function() {\n *        if (xhr.status == 200) {\n *          vectorSource.addFeatures(\n *              vectorSource.getFormat().readFeatures(xhr.responseText));\n *        } else {\n *          onError();\n *        }\n *      }\n *      xhr.send();\n *    },\n *    strategy: bbox\n *  });\n * ```\n * @property {boolean} [overlaps=true] This source may have overlapping geometries.\n * Setting this to `false` (e.g. for sources with polygons that represent administrative\n * boundaries or TopoJSON sources) allows the renderer to optimise fill and\n * stroke operations.\n * @property {LoadingStrategy} [strategy] The loading strategy to use.\n * By default an {@link module:ol/loadingstrategy~all}\n * strategy is used, a one-off strategy which loads all features at once.\n * @property {string|import(\"../featureloader.js\").FeatureUrlFunction} [url]\n * Setting this option instructs the source to load features using an XHR loader\n * (see {@link module:ol/featureloader~xhr}). Use a `string` and an\n * {@link module:ol/loadingstrategy~all} for a one-off download of all features from\n * the given URL. Use a {@link module:ol/featureloader~FeatureUrlFunction} to generate the url with\n * other loading strategies.\n * Requires `format` to be set as well.\n * When default XHR feature loader is provided, the features will\n * be transformed from the data projection to the view projection\n * during parsing. If your remote data source does not advertise its projection\n * properly, this transformation will be incorrect. For some formats, the\n * default projection (usually EPSG:4326) can be overridden by setting the\n * dataProjection constructor option on the format.\n * Note that if a source contains non-feature data, such as a GeoJSON geometry\n * or a KML NetworkLink, these will be ignored. Use a custom loader to load these.\n * @property {boolean} [useSpatialIndex=true]\n * By default, an RTree is used as spatial index. When features are removed and\n * added frequently, and the total number of features is low, setting this to\n * `false` may improve performance.\n *\n * Note that\n * {@link module:ol/source/Vector~VectorSource#getFeaturesInExtent},\n * {@link module:ol/source/Vector~VectorSource#getClosestFeatureToCoordinate} and\n * {@link module:ol/source/Vector~VectorSource#getExtent} cannot be used when `useSpatialIndex` is\n * set to `false`, and {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent} will loop\n * through all features.\n *\n * When set to `false`, the features will be maintained in an\n * {@link module:ol/Collection}, which can be retrieved through\n * {@link module:ol/source/Vector~VectorSource#getFeaturesCollection}.\n * @property {boolean} [wrapX=true] Wrap the world horizontally. For vector editing across the\n * -180° and 180° meridians to work properly, this should be set to `false`. The\n * resulting geometry coordinates will then exceed the world bounds.\n */\n\n/**\n * @classdesc\n * Provides a source of features for vector layers. Vector features provided\n * by this source are suitable for editing. See {@link module:ol/source/VectorTile~VectorTile} for\n * vector data that is optimized for rendering.\n *\n * @fires VectorSourceEvent\n * @api\n * @template {import(\"../geom/Geometry.js\").default} Geometry\n */\nclass VectorSource extends Source {\n  /**\n   * @param {Options=} opt_options Vector source options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    super({\n      attributions: options.attributions,\n      projection: undefined,\n      state: SourceState.READY,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n    });\n\n    /**\n     * @private\n     * @type {import(\"../featureloader.js\").FeatureLoader}\n     */\n    this.loader_ = VOID;\n\n    /**\n     * @private\n     * @type {import(\"../format/Feature.js\").default|undefined}\n     */\n    this.format_ = options.format;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overlaps_ = options.overlaps === undefined ? true : options.overlaps;\n\n    /**\n     * @private\n     * @type {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined}\n     */\n    this.url_ = options.url;\n\n    if (options.loader !== undefined) {\n      this.loader_ = options.loader;\n    } else if (this.url_ !== undefined) {\n      assert(this.format_, 7); // `format` must be set when `url` is set\n      // create a XHR feature loader for \"url\" and \"format\"\n      this.loader_ = xhr(\n        this.url_,\n        /** @type {import(\"../format/Feature.js\").default} */ (this.format_)\n      );\n    }\n\n    /**\n     * @private\n     * @type {LoadingStrategy}\n     */\n    this.strategy_ =\n      options.strategy !== undefined ? options.strategy : allStrategy;\n\n    const useSpatialIndex =\n      options.useSpatialIndex !== undefined ? options.useSpatialIndex : true;\n\n    /**\n     * @private\n     * @type {RBush<import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.featuresRtree_ = useSpatialIndex ? new RBush() : null;\n\n    /**\n     * @private\n     * @type {RBush<{extent: import(\"../extent.js\").Extent}>}\n     */\n    this.loadedExtentsRtree_ = new RBush();\n\n    /**\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.nullGeometryFeatures_ = {};\n\n    /**\n     * A lookup of features by id (the return from feature.getId()).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.idIndex_ = {};\n\n    /**\n     * A lookup of features by uid (using getUid(feature)).\n     * @private\n     * @type {!Object<string, import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.uidIndex_ = {};\n\n    /**\n     * @private\n     * @type {Object<string, Array<import(\"../events.js\").EventsKey>>}\n     */\n    this.featureChangeKeys_ = {};\n\n    /**\n     * @private\n     * @type {Collection<import(\"../Feature.js\").default<Geometry>>}\n     */\n    this.featuresCollection_ = null;\n\n    let collection, features;\n    if (Array.isArray(options.features)) {\n      features = options.features;\n    } else if (options.features) {\n      collection = options.features;\n      features = collection.getArray();\n    }\n    if (!useSpatialIndex && collection === undefined) {\n      collection = new Collection(features);\n    }\n    if (features !== undefined) {\n      this.addFeaturesInternal(features);\n    }\n    if (collection !== undefined) {\n      this.bindFeaturesCollection_(collection);\n    }\n  }\n\n  /**\n   * Add a single feature to the source.  If you want to add a batch of features\n   * at once, call {@link module:ol/source/Vector~VectorSource#addFeatures #addFeatures()}\n   * instead. A feature will not be added to the source if feature with\n   * the same id is already there. The reason for this behavior is to avoid\n   * feature duplication when using bbox or tile loading strategies.\n   * Note: this also applies if an {@link module:ol/Collection} is used for features,\n   * meaning that if a feature with a duplicate id is added in the collection, it will\n   * be removed from it right away.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to add.\n   * @api\n   */\n  addFeature(feature) {\n    this.addFeatureInternal(feature);\n    this.changed();\n  }\n\n  /**\n   * Add a feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  addFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n\n    if (!this.addToIndex_(featureKey, feature)) {\n      if (this.featuresCollection_) {\n        this.featuresCollection_.remove(feature);\n      }\n      return;\n    }\n\n    this.setupChangeEvents_(featureKey, feature);\n\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      const extent = geometry.getExtent();\n      if (this.featuresRtree_) {\n        this.featuresRtree_.insert(extent, feature);\n      }\n    } else {\n      this.nullGeometryFeatures_[featureKey] = feature;\n    }\n\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.ADDFEATURE, feature)\n    );\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @private\n   */\n  setupChangeEvents_(featureKey, feature) {\n    this.featureChangeKeys_[featureKey] = [\n      listen(feature, EventType.CHANGE, this.handleFeatureChange_, this),\n      listen(\n        feature,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleFeatureChange_,\n        this\n      ),\n    ];\n  }\n\n  /**\n   * @param {string} featureKey Unique identifier for the feature.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} The feature is \"valid\", in the sense that it is also a\n   *     candidate for insertion into the Rtree.\n   * @private\n   */\n  addToIndex_(featureKey, feature) {\n    let valid = true;\n    const id = feature.getId();\n    if (id !== undefined) {\n      if (!(id.toString() in this.idIndex_)) {\n        this.idIndex_[id.toString()] = feature;\n      } else {\n        valid = false;\n      }\n    }\n    if (valid) {\n      assert(!(featureKey in this.uidIndex_), 30); // The passed `feature` was already added to the source\n      this.uidIndex_[featureKey] = feature;\n    }\n    return valid;\n  }\n\n  /**\n   * Add a batch of features to the source.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features to add.\n   * @api\n   */\n  addFeatures(features) {\n    this.addFeaturesInternal(features);\n    this.changed();\n  }\n\n  /**\n   * Add features without firing a `change` event.\n   * @param {Array<import(\"../Feature.js\").default<Geometry>>} features Features.\n   * @protected\n   */\n  addFeaturesInternal(features) {\n    const extents = [];\n    const newFeatures = [];\n    const geometryFeatures = [];\n\n    for (let i = 0, length = features.length; i < length; i++) {\n      const feature = features[i];\n      const featureKey = getUid(feature);\n      if (this.addToIndex_(featureKey, feature)) {\n        newFeatures.push(feature);\n      }\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      const feature = newFeatures[i];\n      const featureKey = getUid(feature);\n      this.setupChangeEvents_(featureKey, feature);\n\n      const geometry = feature.getGeometry();\n      if (geometry) {\n        const extent = geometry.getExtent();\n        extents.push(extent);\n        geometryFeatures.push(feature);\n      } else {\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    }\n    if (this.featuresRtree_) {\n      this.featuresRtree_.load(extents, geometryFeatures);\n    }\n\n    for (let i = 0, length = newFeatures.length; i < length; i++) {\n      this.dispatchEvent(\n        new VectorSourceEvent(VectorEventType.ADDFEATURE, newFeatures[i])\n      );\n    }\n  }\n\n  /**\n   * @param {!Collection<import(\"../Feature.js\").default<Geometry>>} collection Collection.\n   * @private\n   */\n  bindFeaturesCollection_(collection) {\n    let modifyingCollection = false;\n    this.addEventListener(\n      VectorEventType.ADDFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.push(evt.feature);\n          modifyingCollection = false;\n        }\n      }\n    );\n    this.addEventListener(\n      VectorEventType.REMOVEFEATURE,\n      /**\n       * @param {VectorSourceEvent<Geometry>} evt The vector source event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          collection.remove(evt.feature);\n          modifyingCollection = false;\n        }\n      }\n    );\n    collection.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.addFeature(\n            /** @type {import(\"../Feature.js\").default<Geometry>} */ (evt.element)\n          );\n          modifyingCollection = false;\n        }\n      }.bind(this)\n    );\n    collection.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"../Collection.js\").CollectionEvent} evt The collection event\n       */\n      function (evt) {\n        if (!modifyingCollection) {\n          modifyingCollection = true;\n          this.removeFeature(\n            /** @type {import(\"../Feature.js\").default<Geometry>} */ (evt.element)\n          );\n          modifyingCollection = false;\n        }\n      }.bind(this)\n    );\n    this.featuresCollection_ = collection;\n  }\n\n  /**\n   * Remove all features from the source.\n   * @param {boolean=} opt_fast Skip dispatching of {@link module:ol/source/Vector.VectorSourceEvent#removefeature} events.\n   * @api\n   */\n  clear(opt_fast) {\n    if (opt_fast) {\n      for (const featureId in this.featureChangeKeys_) {\n        const keys = this.featureChangeKeys_[featureId];\n        keys.forEach(unlistenByKey);\n      }\n      if (!this.featuresCollection_) {\n        this.featureChangeKeys_ = {};\n        this.idIndex_ = {};\n        this.uidIndex_ = {};\n      }\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.forEach(this.removeFeatureInternal.bind(this));\n        for (const id in this.nullGeometryFeatures_) {\n          this.removeFeatureInternal(this.nullGeometryFeatures_[id]);\n        }\n      }\n    }\n    if (this.featuresCollection_) {\n      this.featuresCollection_.clear();\n    }\n\n    if (this.featuresRtree_) {\n      this.featuresRtree_.clear();\n    }\n    this.nullGeometryFeatures_ = {};\n\n    const clearEvent = new VectorSourceEvent(VectorEventType.CLEAR);\n    this.dispatchEvent(clearEvent);\n    this.changed();\n  }\n\n  /**\n   * Iterate through all features on the source, calling the provided callback\n   * with each one.  If the callback returns any \"truthy\" value, iteration will\n   * stop and the function will return the same value.\n   * Note: this function only iterate through the feature that have a defined geometry.\n   *\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     on the source.  Return a truthy value to stop iteration.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeature(callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEach(callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometries contain the provided\n   * coordinate, calling the callback with each feature.  If the callback returns\n   * a \"truthy\" value, iteration will stop and the function will return the same\n   * value.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose goemetry contains the provided coordinate.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   */\n  forEachFeatureAtCoordinateDirect(coordinate, callback) {\n    const extent = [coordinate[0], coordinate[1], coordinate[0], coordinate[1]];\n    return this.forEachFeatureInExtent(extent, function (feature) {\n      const geometry = feature.getGeometry();\n      if (geometry.intersectsCoordinate(coordinate)) {\n        return callback(feature);\n      } else {\n        return undefined;\n      }\n    });\n  }\n\n  /**\n   * Iterate through all features whose bounding box intersects the provided\n   * extent (note that the feature's geometry may not intersect the extent),\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you are interested in features whose geometry intersects an extent, call\n   * the {@link module:ol/source/Vector~VectorSource#forEachFeatureIntersectingExtent #forEachFeatureIntersectingExtent()} method instead.\n   *\n   * When `useSpatialIndex` is set to false, this method will loop through all\n   * features, equivalent to {@link module:ol/source/Vector~VectorSource#forEachFeature #forEachFeature()}.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose bounding box intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureInExtent(extent, callback) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.forEachInExtent(extent, callback);\n    } else if (this.featuresCollection_) {\n      this.featuresCollection_.forEach(callback);\n    }\n  }\n\n  /**\n   * Iterate through all features whose geometry intersects the provided extent,\n   * calling the callback with each feature.  If the callback returns a \"truthy\"\n   * value, iteration will stop and the function will return the same value.\n   *\n   * If you only want to test for bounding box intersection, call the\n   * {@link module:ol/source/Vector~VectorSource#forEachFeatureInExtent #forEachFeatureInExtent()} method instead.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {function(import(\"../Feature.js\").default<Geometry>): T} callback Called with each feature\n   *     whose geometry intersects the provided extent.\n   * @return {T|undefined} The return value from the last call to the callback.\n   * @template T\n   * @api\n   */\n  forEachFeatureIntersectingExtent(extent, callback) {\n    return this.forEachFeatureInExtent(\n      extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       * @return {T|undefined} The return value from the last call to the callback.\n       */\n      function (feature) {\n        const geometry = feature.getGeometry();\n        if (geometry.intersectsExtent(extent)) {\n          const result = callback(feature);\n          if (result) {\n            return result;\n          }\n        }\n      }\n    );\n  }\n\n  /**\n   * Get the features collection associated with this source. Will be `null`\n   * unless the source was configured with `useSpatialIndex` set to `false`, or\n   * with an {@link module:ol/Collection} as `features`.\n   * @return {Collection<import(\"../Feature.js\").default<Geometry>>} The collection of features.\n   * @api\n   */\n  getFeaturesCollection() {\n    return this.featuresCollection_;\n  }\n\n  /**\n   * Get all features on the source in random order.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeatures() {\n    let features;\n    if (this.featuresCollection_) {\n      features = this.featuresCollection_.getArray();\n    } else if (this.featuresRtree_) {\n      features = this.featuresRtree_.getAll();\n      if (!isEmpty(this.nullGeometryFeatures_)) {\n        extend(features, getValues(this.nullGeometryFeatures_));\n      }\n    }\n    return /** @type {Array<import(\"../Feature.js\").default<Geometry>>} */ (features);\n  }\n\n  /**\n   * Get all features whose geometry intersects the provided coordinate.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesAtCoordinate(coordinate) {\n    const features = [];\n    this.forEachFeatureAtCoordinateDirect(coordinate, function (feature) {\n      features.push(feature);\n    });\n    return features;\n  }\n\n  /**\n   * Get all features whose bounding box intersects the provided extent.  Note that this returns an array of\n   * all features intersecting the given extent in random order (so it may include\n   * features whose geometries do not intersect the extent).\n   *\n   * When `useSpatialIndex` is set to false, this method will return all\n   * features.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {Array<import(\"../Feature.js\").default<Geometry>>} Features.\n   * @api\n   */\n  getFeaturesInExtent(extent) {\n    if (this.featuresRtree_) {\n      return this.featuresRtree_.getInExtent(extent);\n    } else if (this.featuresCollection_) {\n      return this.featuresCollection_.getArray();\n    } else {\n      return [];\n    }\n  }\n\n  /**\n   * Get the closest feature to the provided coordinate.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {function(import(\"../Feature.js\").default<Geometry>):boolean=} opt_filter Feature filter function.\n   *     The filter function will receive one argument, the {@link module:ol/Feature feature}\n   *     and it should return a boolean value. By default, no filtering is made.\n   * @return {import(\"../Feature.js\").default<Geometry>} Closest feature.\n   * @api\n   */\n  getClosestFeatureToCoordinate(coordinate, opt_filter) {\n    // Find the closest feature using branch and bound.  We start searching an\n    // infinite extent, and find the distance from the first feature found.  This\n    // becomes the closest feature.  We then compute a smaller extent which any\n    // closer feature must intersect.  We continue searching with this smaller\n    // extent, trying to find a closer feature.  Every time we find a closer\n    // feature, we update the extent being searched so that any even closer\n    // feature must intersect it.  We continue until we run out of features.\n    const x = coordinate[0];\n    const y = coordinate[1];\n    let closestFeature = null;\n    const closestPoint = [NaN, NaN];\n    let minSquaredDistance = Infinity;\n    const extent = [-Infinity, -Infinity, Infinity, Infinity];\n    const filter = opt_filter ? opt_filter : TRUE;\n    this.featuresRtree_.forEachInExtent(\n      extent,\n      /**\n       * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n       */\n      function (feature) {\n        if (filter(feature)) {\n          const geometry = feature.getGeometry();\n          const previousMinSquaredDistance = minSquaredDistance;\n          minSquaredDistance = geometry.closestPointXY(\n            x,\n            y,\n            closestPoint,\n            minSquaredDistance\n          );\n          if (minSquaredDistance < previousMinSquaredDistance) {\n            closestFeature = feature;\n            // This is sneaky.  Reduce the extent that it is currently being\n            // searched while the R-Tree traversal using this same extent object\n            // is still in progress.  This is safe because the new extent is\n            // strictly contained by the old extent.\n            const minDistance = Math.sqrt(minSquaredDistance);\n            extent[0] = x - minDistance;\n            extent[1] = y - minDistance;\n            extent[2] = x + minDistance;\n            extent[3] = y + minDistance;\n          }\n        }\n      }\n    );\n    return closestFeature;\n  }\n\n  /**\n   * Get the extent of the features currently in the source.\n   *\n   * This method is not available when the source is configured with\n   * `useSpatialIndex` set to `false`.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Destination extent. If provided, no new extent\n   *     will be created. Instead, that extent's coordinates will be overwritten.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent(opt_extent) {\n    return this.featuresRtree_.getExtent(opt_extent);\n  }\n\n  /**\n   * Get a feature by its identifier (the value returned by feature.getId()).\n   * Note that the index treats string and numeric identifiers as the same.  So\n   * `source.getFeatureById(2)` will return a feature with id `'2'` or `2`.\n   *\n   * @param {string|number} id Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   * @api\n   */\n  getFeatureById(id) {\n    const feature = this.idIndex_[id.toString()];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get a feature by its internal unique identifier (using `getUid`).\n   *\n   * @param {string} uid Feature identifier.\n   * @return {import(\"../Feature.js\").default<Geometry>} The feature (or `null` if not found).\n   */\n  getFeatureByUid(uid) {\n    const feature = this.uidIndex_[uid];\n    return feature !== undefined ? feature : null;\n  }\n\n  /**\n   * Get the format associated with this source.\n   *\n   * @return {import(\"../format/Feature.js\").default|undefined} The feature format.\n   * @api\n   */\n  getFormat() {\n    return this.format_;\n  }\n\n  /**\n   * @return {boolean} The source can have overlapping geometries.\n   */\n  getOverlaps() {\n    return this.overlaps_;\n  }\n\n  /**\n   * Get the url associated with this source.\n   *\n   * @return {string|import(\"../featureloader.js\").FeatureUrlFunction|undefined} The url.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * @param {Event} event Event.\n   * @private\n   */\n  handleFeatureChange_(event) {\n    const feature = /** @type {import(\"../Feature.js\").default<Geometry>} */ (event.target);\n    const featureKey = getUid(feature);\n    const geometry = feature.getGeometry();\n    if (!geometry) {\n      if (!(featureKey in this.nullGeometryFeatures_)) {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.remove(feature);\n        }\n        this.nullGeometryFeatures_[featureKey] = feature;\n      }\n    } else {\n      const extent = geometry.getExtent();\n      if (featureKey in this.nullGeometryFeatures_) {\n        delete this.nullGeometryFeatures_[featureKey];\n        if (this.featuresRtree_) {\n          this.featuresRtree_.insert(extent, feature);\n        }\n      } else {\n        if (this.featuresRtree_) {\n          this.featuresRtree_.update(extent, feature);\n        }\n      }\n    }\n    const id = feature.getId();\n    if (id !== undefined) {\n      const sid = id.toString();\n      if (this.idIndex_[sid] !== feature) {\n        this.removeFromIdIndex_(feature);\n        this.idIndex_[sid] = feature;\n      }\n    } else {\n      this.removeFromIdIndex_(feature);\n      this.uidIndex_[featureKey] = feature;\n    }\n    this.changed();\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.CHANGEFEATURE, feature)\n    );\n  }\n\n  /**\n   * Returns true if the feature is contained within the source.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @return {boolean} Has feature.\n   * @api\n   */\n  hasFeature(feature) {\n    const id = feature.getId();\n    if (id !== undefined) {\n      return id in this.idIndex_;\n    } else {\n      return getUid(feature) in this.uidIndex_;\n    }\n  }\n\n  /**\n   * @return {boolean} Is empty.\n   */\n  isEmpty() {\n    return this.featuresRtree_.isEmpty() && isEmpty(this.nullGeometryFeatures_);\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   */\n  loadFeatures(extent, resolution, projection) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    const extentsToLoad = this.strategy_(extent, resolution);\n    this.loading = false;\n    for (let i = 0, ii = extentsToLoad.length; i < ii; ++i) {\n      const extentToLoad = extentsToLoad[i];\n      const alreadyLoaded = loadedExtentsRtree.forEachInExtent(\n        extentToLoad,\n        /**\n         * @param {{extent: import(\"../extent.js\").Extent}} object Object.\n         * @return {boolean} Contains.\n         */\n        function (object) {\n          return containsExtent(object.extent, extentToLoad);\n        }\n      );\n      if (!alreadyLoaded) {\n        this.loader_.call(this, extentToLoad, resolution, projection);\n        loadedExtentsRtree.insert(extentToLoad, {extent: extentToLoad.slice()});\n        this.loading = this.loader_ !== VOID;\n      }\n    }\n  }\n\n  refresh() {\n    this.clear(true);\n    this.loadedExtentsRtree_.clear();\n    super.refresh();\n  }\n\n  /**\n   * Remove an extent from the list of loaded extents.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @api\n   */\n  removeLoadedExtent(extent) {\n    const loadedExtentsRtree = this.loadedExtentsRtree_;\n    let obj;\n    loadedExtentsRtree.forEachInExtent(extent, function (object) {\n      if (equals(object.extent, extent)) {\n        obj = object;\n        return true;\n      }\n    });\n    if (obj) {\n      loadedExtentsRtree.remove(obj);\n    }\n  }\n\n  /**\n   * Remove a single feature from the source.  If you want to remove all features\n   * at once, use the {@link module:ol/source/Vector~VectorSource#clear #clear()} method\n   * instead.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature to remove.\n   * @api\n   */\n  removeFeature(feature) {\n    const featureKey = getUid(feature);\n    if (featureKey in this.nullGeometryFeatures_) {\n      delete this.nullGeometryFeatures_[featureKey];\n    } else {\n      if (this.featuresRtree_) {\n        this.featuresRtree_.remove(feature);\n      }\n    }\n    this.removeFeatureInternal(feature);\n    this.changed();\n  }\n\n  /**\n   * Remove feature without firing a `change` event.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature Feature.\n   * @protected\n   */\n  removeFeatureInternal(feature) {\n    const featureKey = getUid(feature);\n    this.featureChangeKeys_[featureKey].forEach(unlistenByKey);\n    delete this.featureChangeKeys_[featureKey];\n    const id = feature.getId();\n    if (id !== undefined) {\n      delete this.idIndex_[id.toString()];\n    }\n    delete this.uidIndex_[featureKey];\n    this.dispatchEvent(\n      new VectorSourceEvent(VectorEventType.REMOVEFEATURE, feature)\n    );\n  }\n\n  /**\n   * Remove a feature from the id index.  Called internally when the feature id\n   * may have changed.\n   * @param {import(\"../Feature.js\").default<Geometry>} feature The feature.\n   * @return {boolean} Removed the feature from the index.\n   * @private\n   */\n  removeFromIdIndex_(feature) {\n    let removed = false;\n    for (const id in this.idIndex_) {\n      if (this.idIndex_[id] === feature) {\n        delete this.idIndex_[id];\n        removed = true;\n        break;\n      }\n    }\n    return removed;\n  }\n\n  /**\n   * Set the new loader of the source. The next render cycle will use the\n   * new loader.\n   * @param {import(\"../featureloader.js\").FeatureLoader} loader The loader to set.\n   * @api\n   */\n  setLoader(loader) {\n    this.loader_ = loader;\n  }\n\n  /**\n   * Points the source to a new url. The next render cycle will use the new url.\n   * @param {string|import(\"../featureloader.js\").FeatureUrlFunction} url Url.\n   * @api\n   */\n  setUrl(url) {\n    assert(this.format_, 7); // `format` must be set when `url` is set\n    this.setLoader(xhr(url, this.format_));\n  }\n}\n\nexport default VectorSource;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}