{"ast":null,"code":"var _jsxFileName = \"/Users/mariovicky/Skripsi_OpenLayers/src/containers/Map/OpenlayerMaps/Map.js\";\nimport React, { Component } from 'react';\nimport 'ol/ol.css';\nimport './Map.css';\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport { Style, Icon, Stroke } from 'ol/style.js';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer.js';\nimport OSM from 'ol/source/OSM.js';\nimport VectorSource from 'ol/source/Vector.js';\nimport Feature from 'ol/Feature.js';\nimport { fromLonLat } from 'ol/proj.js';\nimport Point from 'ol/geom/Point.js';\nimport LineString from 'ol/geom/LineString.js';\nimport airplaneimg from './614.png';\nclass MapComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchAircraftDataAndUpdate = () => {\n      // Mengubah fetchAircraftData menjadi fetchAircraftDataAndUpdate\n      const bboxInput = this.bboxRef.current.value;\n      const [lonMin, latMin, lonMax, latMax] = bboxInput.split(',');\n      if (lonMin && latMin && lonMax && latMax) {\n        const formattedBbox = `${parseFloat(lonMin)},${parseFloat(latMin)},${parseFloat(lonMax)},${parseFloat(latMax)}`;\n        this.fetchAircraftData(formattedBbox);\n      }\n    };\n    this.handleShowAircrafts = () => {\n      const bboxInput = this.bboxRef.current.value;\n      const [lonMin, latMin, lonMax, latMax] = bboxInput.split(',');\n      if (lonMin && latMin && lonMax && latMax) {\n        const formattedBbox = `${parseFloat(lonMin)},${parseFloat(latMin)},${parseFloat(lonMax)},${parseFloat(latMax)}`;\n        this.fetchAircraftData(formattedBbox);\n      }\n    };\n    this.mapRef = /*#__PURE__*/React.createRef();\n    this.map = null;\n    this.airplanesSource = null;\n    this.tileLayer = null;\n    this.airplanesLayer = null;\n    this.airplaneIcon = null;\n    this.bboxRef = /*#__PURE__*/React.createRef();\n    this.flightPathSource = null;\n    this.flightPathLayer = null;\n    this.flightPaths = [];\n    this.updateInterval = null; // Menambahkan variabel updateInterval\n  }\n\n  componentDidMount() {\n    this.initializeMap();\n    this.fetchAircraftDataAndUpdate();\n    this.updateInterval = setInterval(this.fetchAircraftDataAndUpdate, 20000);\n  }\n  componentWillUnmount() {\n    clearInterval(this.updateInterval);\n  }\n  initializeMap() {\n    this.tileLayer = new TileLayer({\n      source: new OSM()\n    });\n    this.map = new Map({\n      layers: [this.tileLayer],\n      target: this.mapRef.current,\n      view: new View({\n        center: [-11000000, 4600000],\n        zoom: 2\n      })\n    });\n    this.airplaneIcon = new Icon({\n      src: airplaneimg,\n      scale: 0.05\n    });\n    this.airplanesSource = new VectorSource();\n    this.airplanesLayer = new VectorLayer({\n      source: this.airplanesSource,\n      style: new Style({\n        image: this.airplaneIcon\n      })\n    });\n    this.flightPathSource = new VectorSource();\n    this.flightPathLayer = new VectorLayer({\n      source: this.flightPathSource,\n      style: new Style({\n        stroke: new Stroke({\n          color: 'red',\n          width: 2\n        })\n      })\n    });\n    this.map.addLayer(this.airplanesLayer);\n    this.map.addLayer(this.flightPathLayer);\n  }\n  fetchAircraftData(bbox) {\n    const [lonMin, latMin, lonMax, latMax] = bbox.split(',');\n    const url = `https://opensky-network.org/api/states/all?lamin=${latMin}&lomin=${lonMin}&lamax=${latMax}&lomax=${lonMax}`;\n    fetch(url).then(response => response.json()).then(data => {\n      const aircrafts = data.states;\n      this.addAircraftsToMap(aircrafts);\n      aircrafts.forEach(aircraft => {\n        const id = aircraft[0];\n        const lon = aircraft[5];\n        const lat = aircraft[6];\n        const existingFlightPath = this.flightPaths.find(flight => flight.id === id);\n        if (existingFlightPath) {\n          existingFlightPath.coordinates.push([lon, lat]);\n        } else {\n          this.flightPaths.push({\n            id: id,\n            coordinates: [[lon, lat]]\n          });\n        }\n      });\n      this.addFlightPaths(this.flightPaths);\n      this.fitMapToAircrafts();\n      const aircraftsJSON = JSON.stringify(aircrafts);\n      console.log(aircraftsJSON);\n      console.log('Flight Paths:', this.flightPaths);\n    }).catch(error => {\n      console.error('Error fetching aircraft data:', error);\n      console.error('URL:', url);\n    });\n  }\n  addAircraftsToMap(aircrafts) {\n    this.airplanesSource.clear();\n    aircrafts.forEach(aircraft => {\n      const lon = aircraft[5];\n      const lat = aircraft[6];\n      if (lon && lat) {\n        const coordinates = fromLonLat([lon, lat]);\n        const feature = new Feature({\n          geometry: new Point(coordinates)\n        });\n        this.airplanesSource.addFeature(feature);\n      }\n    });\n  }\n  addFlightPaths(flightPaths) {\n    this.flightPathSource.clear();\n    flightPaths.forEach(flight => {\n      const coordinates = flight.coordinates.map(coord => fromLonLat(coord));\n      if (coordinates.length > 1) {\n        const path = new LineString(coordinates);\n        const feature = new Feature({\n          geometry: path\n        });\n        this.flightPathSource.addFeature(feature);\n      }\n    });\n  }\n  fitMapToAircrafts() {\n    const extent = this.airplanesSource.getExtent();\n    this.map.getView().fit(extent, {\n      padding: [50, 50, 50, 50]\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      ref: this.bboxRef,\n      type: \"text\",\n      placeholder: \"Input bbox (lonmin,latmin,lonmax,latmax)\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 11\n      }\n    }), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: this.handleShowAircrafts,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 11\n      }\n    }, \"Show Aircrafts\")), /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.mapRef,\n      className: \"map-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }\n    }));\n  }\n}\nexport default MapComponent;","map":{"version":3,"names":["React","Component","Map","View","Style","Icon","Stroke","Tile","TileLayer","Vector","VectorLayer","OSM","VectorSource","Feature","fromLonLat","Point","LineString","airplaneimg","MapComponent","constructor","props","fetchAircraftDataAndUpdate","bboxInput","bboxRef","current","value","lonMin","latMin","lonMax","latMax","split","formattedBbox","parseFloat","fetchAircraftData","handleShowAircrafts","mapRef","createRef","map","airplanesSource","tileLayer","airplanesLayer","airplaneIcon","flightPathSource","flightPathLayer","flightPaths","updateInterval","componentDidMount","initializeMap","setInterval","componentWillUnmount","clearInterval","source","layers","target","view","center","zoom","src","scale","style","image","stroke","color","width","addLayer","bbox","url","fetch","then","response","json","data","aircrafts","states","addAircraftsToMap","forEach","aircraft","id","lon","lat","existingFlightPath","find","flight","coordinates","push","addFlightPaths","fitMapToAircrafts","aircraftsJSON","JSON","stringify","console","log","catch","error","clear","feature","geometry","addFeature","coord","length","path","extent","getExtent","getView","fit","padding","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","ref","type","placeholder","onClick","className"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/src/containers/Map/OpenlayerMaps/Map.js"],"sourcesContent":["import React, { Component } from 'react';\nimport 'ol/ol.css';\nimport './Map.css';\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport { Style, Icon, Stroke } from 'ol/style.js';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer.js';\nimport OSM from 'ol/source/OSM.js';\nimport VectorSource from 'ol/source/Vector.js';\nimport Feature from 'ol/Feature.js';\nimport { fromLonLat } from 'ol/proj.js';\nimport Point from 'ol/geom/Point.js';\nimport LineString from 'ol/geom/LineString.js';\nimport airplaneimg from './614.png';\n\nclass MapComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n    this.map = null;\n    this.airplanesSource = null;\n    this.tileLayer = null;\n    this.airplanesLayer = null;\n    this.airplaneIcon = null;\n    this.bboxRef = React.createRef();\n    this.flightPathSource = null;\n    this.flightPathLayer = null;\n    this.flightPaths = [];\n    this.updateInterval = null; // Menambahkan variabel updateInterval\n  }\n\n  componentDidMount() {\n    this.initializeMap();\n    this.fetchAircraftDataAndUpdate();\n    this.updateInterval = setInterval(this.fetchAircraftDataAndUpdate, 20000);\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.updateInterval);\n  }\n\n  initializeMap() {\n    this.tileLayer = new TileLayer({\n      source: new OSM(),\n    });\n\n    this.map = new Map({\n      layers: [this.tileLayer],\n      target: this.mapRef.current,\n      view: new View({\n        center: [-11000000, 4600000],\n        zoom: 2,\n      }),\n    });\n\n    this.airplaneIcon = new Icon({\n      src: airplaneimg,\n      scale: 0.05,\n    });\n\n    this.airplanesSource = new VectorSource();\n    this.airplanesLayer = new VectorLayer({\n      source: this.airplanesSource,\n      style: new Style({\n        image: this.airplaneIcon,\n      }),\n    });\n\n    this.flightPathSource = new VectorSource();\n    this.flightPathLayer = new VectorLayer({\n      source: this.flightPathSource,\n      style: new Style({\n        stroke: new Stroke({\n          color: 'red',\n          width: 2,\n        }),\n      }),\n    });\n\n    this.map.addLayer(this.airplanesLayer);\n    this.map.addLayer(this.flightPathLayer);\n  }\n\n  fetchAircraftDataAndUpdate = () => { // Mengubah fetchAircraftData menjadi fetchAircraftDataAndUpdate\n    const bboxInput = this.bboxRef.current.value;\n    const [lonMin, latMin, lonMax, latMax] = bboxInput.split(',');\n\n    if (lonMin && latMin && lonMax && latMax) {\n      const formattedBbox = `${parseFloat(lonMin)},${parseFloat(latMin)},${parseFloat(lonMax)},${parseFloat(latMax)}`;\n      this.fetchAircraftData(formattedBbox);\n    }\n  };\n\n  fetchAircraftData(bbox) {\n    const [lonMin, latMin, lonMax, latMax] = bbox.split(',');\n    const url = `https://opensky-network.org/api/states/all?lamin=${latMin}&lomin=${lonMin}&lamax=${latMax}&lomax=${lonMax}`;\n  \n    fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        const aircrafts = data.states;\n        this.addAircraftsToMap(aircrafts);\n  \n        aircrafts.forEach((aircraft) => {\n          const id = aircraft[0];\n          const lon = aircraft[5];\n          const lat = aircraft[6];\n  \n          const existingFlightPath = this.flightPaths.find((flight) => flight.id === id);\n  \n          if (existingFlightPath) {\n            existingFlightPath.coordinates.push([lon, lat]);\n          } else {\n            this.flightPaths.push({\n              id: id,\n              coordinates: [[lon, lat]],\n            });\n          }\n        });\n  \n        this.addFlightPaths(this.flightPaths);\n        this.fitMapToAircrafts();\n  \n        const aircraftsJSON = JSON.stringify(aircrafts);\n        console.log(aircraftsJSON);\n        console.log('Flight Paths:', this.flightPaths);\n      })\n      .catch((error) => {\n        console.error('Error fetching aircraft data:', error);\n        console.error('URL:', url);\n      });\n  }\n  \n\n  addAircraftsToMap(aircrafts) {\n    this.airplanesSource.clear();\n\n    aircrafts.forEach((aircraft) => {\n      const lon = aircraft[5];\n      const lat = aircraft[6];\n\n      if (lon && lat) {\n        const coordinates = fromLonLat([lon, lat]);\n        const feature = new Feature({\n          geometry: new Point(coordinates),\n        });\n\n        this.airplanesSource.addFeature(feature);\n      }\n    });\n  }\n\n  addFlightPaths(flightPaths) {\n    this.flightPathSource.clear();\n\n    flightPaths.forEach((flight) => {\n      const coordinates = flight.coordinates.map((coord) => fromLonLat(coord));\n\n      if (coordinates.length > 1) {\n        const path = new LineString(coordinates);\n\n        const feature = new Feature({\n          geometry: path,\n        });\n\n        this.flightPathSource.addFeature(feature);\n      }\n    });\n  }\n\n  fitMapToAircrafts() {\n    const extent = this.airplanesSource.getExtent();\n    this.map.getView().fit(extent, { padding: [50, 50, 50, 50] });\n  }\n\n  handleShowAircrafts = () => {\n    const bboxInput = this.bboxRef.current.value;\n    const [lonMin, latMin, lonMax, latMax] = bboxInput.split(',');\n\n    if (lonMin && latMin && lonMax && latMax) {\n      const formattedBbox = `${parseFloat(lonMin)},${parseFloat(latMin)},${parseFloat(lonMax)},${parseFloat(latMax)}`;\n      this.fetchAircraftData(formattedBbox);\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <div>\n          <input ref={this.bboxRef} type=\"text\" placeholder=\"Input bbox (lonmin,latmin,lonmax,latmax)\" />\n          <button onClick={this.handleShowAircrafts}>Show Aircrafts</button>\n        </div>\n        <div ref={this.mapRef} className=\"map-container\" />\n      </div>\n    );\n  }\n}\n\nexport default MapComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}