{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/LineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { assignClosestPoint, maxSquaredDelta } from './flat/closest.js';\nimport { closestSquaredDistanceXY } from '../extent.js';\nimport { deflateCoordinates } from './flat/deflate.js';\nimport { douglasPeucker } from './flat/simplify.js';\nimport { extend } from '../array.js';\nimport { forEach as forEachSegment } from './flat/segments.js';\nimport { inflateCoordinates } from './flat/inflate.js';\nimport { interpolatePoint, lineStringCoordinateAtM } from './flat/interpolate.js';\nimport { intersectsLineString } from './flat/intersectsextent.js';\nimport { lineStringLength } from './flat/length.js';\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nvar LineString = /** @class */function (_super) {\n  __extends(LineString, _super);\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   */\n  function LineString(coordinates, opt_layout) {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    _this.flatMidpoint_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.flatMidpointRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDeltaRevision_ = -1;\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n    } else {\n      _this.setCoordinates( /** @type {Array<import(\"../coordinate.js\").Coordinate>} */coordinates, opt_layout);\n    }\n    return _this;\n  }\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  LineString.prototype.appendCoordinate = function (coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n  LineString.prototype.clone = function () {\n    return new LineString(this.flatCoordinates.slice(), this.layout);\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  LineString.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  LineString.prototype.forEachSegment = function (callback) {\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\n  };\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  LineString.prototype.getCoordinateAtM = function (m, opt_extrapolate) {\n    if (this.layout != GeometryLayout.XYM && this.layout != GeometryLayout.XYZM) {\n      return null;\n    }\n    var extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, m, extrapolate);\n  };\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  LineString.prototype.getCoordinates = function () {\n    return inflateCoordinates(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_dest Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  LineString.prototype.getCoordinateAt = function (fraction, opt_dest) {\n    return interpolatePoint(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, fraction, opt_dest, this.stride);\n  };\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  LineString.prototype.getLength = function () {\n    return lineStringLength(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\n  };\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  LineString.prototype.getFlatMidpoint = function () {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n  LineString.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, squaredTolerance, simplifiedFlatCoordinates, 0);\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  LineString.prototype.getType = function () {\n    return GeometryType.LINE_STRING;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  LineString.prototype.intersectsExtent = function (extent) {\n    return intersectsLineString(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @api\n   */\n  LineString.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(this.flatCoordinates, 0, coordinates, this.stride);\n    this.changed();\n  };\n  return LineString;\n}(SimpleGeometry);\nexport default LineString;","map":{"version":3,"names":["GeometryLayout","GeometryType","SimpleGeometry","assignClosestPoint","maxSquaredDelta","closestSquaredDistanceXY","deflateCoordinates","douglasPeucker","extend","forEach","forEachSegment","inflateCoordinates","interpolatePoint","lineStringCoordinateAtM","intersectsLineString","lineStringLength","LineString","_super","__extends","coordinates","opt_layout","_this","call","flatMidpoint_","flatMidpointRevision_","maxDelta_","maxDeltaRevision_","undefined","Array","isArray","setFlatCoordinates","setCoordinates","prototype","appendCoordinate","coordinate","flatCoordinates","slice","changed","clone","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","length","stride","callback","getCoordinateAtM","m","opt_extrapolate","XYM","XYZM","extrapolate","getCoordinates","getCoordinateAt","fraction","opt_dest","getLength","getFlatMidpoint","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","XY","getType","LINE_STRING","intersectsExtent","extent","setLayout"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/geom/LineString.js"],"sourcesContent":["/**\n * @module ol/geom/LineString\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {assignClosestPoint, maxSquaredDelta} from './flat/closest.js';\nimport {closestSquaredDistanceXY} from '../extent.js';\nimport {deflateCoordinates} from './flat/deflate.js';\nimport {douglasPeucker} from './flat/simplify.js';\nimport {extend} from '../array.js';\nimport {forEach as forEachSegment} from './flat/segments.js';\nimport {inflateCoordinates} from './flat/inflate.js';\nimport {interpolatePoint, lineStringCoordinateAtM} from './flat/interpolate.js';\nimport {intersectsLineString} from './flat/intersectsextent.js';\nimport {lineStringLength} from './flat/length.js';\n\n/**\n * @classdesc\n * Linestring geometry.\n *\n * @api\n */\nclass LineString extends SimpleGeometry {\n  /**\n   * @param {Array<import(\"../coordinate.js\").Coordinate>|Array<number>} coordinates Coordinates.\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   */\n  constructor(coordinates, opt_layout) {\n    super();\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatMidpoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatMidpointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n    } else {\n      this.setCoordinates(\n        /** @type {Array<import(\"../coordinate.js\").Coordinate>} */ (coordinates),\n        opt_layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed coordinate to the coordinates of the linestring.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @api\n   */\n  appendCoordinate(coordinate) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = coordinate.slice();\n    } else {\n      extend(this.flatCoordinates, coordinate);\n    }\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!LineString} Clone.\n   * @api\n   */\n  clone() {\n    return new LineString(this.flatCoordinates.slice(), this.layout);\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        maxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.flatCoordinates.length,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestPoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      this.maxDelta_,\n      false,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * Iterate over each segment, calling the provided callback.\n   * If the callback returns a truthy value the function returns that\n   * value immediately. Otherwise the function returns `false`.\n   *\n   * @param {function(this: S, import(\"../coordinate.js\").Coordinate, import(\"../coordinate.js\").Coordinate): T} callback Function\n   *     called for each segment. The function will receive two arguments, the start and end coordinates of the segment.\n   * @return {T|boolean} Value.\n   * @template T,S\n   * @api\n   */\n  forEachSegment(callback) {\n    return forEachSegment(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      callback\n    );\n  }\n\n  /**\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\n   * such coordinate exists.\n   *\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\n   * M will return the first coordinate and Ms greater than the last M will\n   * return the last coordinate.\n   *\n   * @param {number} m M.\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getCoordinateAtM(m, opt_extrapolate) {\n    if (\n      this.layout != GeometryLayout.XYM &&\n      this.layout != GeometryLayout.XYZM\n    ) {\n      return null;\n    }\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\n    return lineStringCoordinateAtM(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      m,\n      extrapolate\n    );\n  }\n\n  /**\n   * Return the coordinates of the linestring.\n   * @return {Array<import(\"../coordinate.js\").Coordinate>} Coordinates.\n   * @api\n   */\n  getCoordinates() {\n    return inflateCoordinates(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the coordinate at the provided fraction along the linestring.\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\n   * linestring and 1 is the end.\n   * @param {number} fraction Fraction.\n   * @param {import(\"../coordinate.js\").Coordinate=} opt_dest Optional coordinate whose values will\n   *     be modified. If not provided, a new coordinate will be returned.\n   * @return {import(\"../coordinate.js\").Coordinate} Coordinate of the interpolated point.\n   * @api\n   */\n  getCoordinateAt(fraction, opt_dest) {\n    return interpolatePoint(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      fraction,\n      opt_dest,\n      this.stride\n    );\n  }\n\n  /**\n   * Return the length of the linestring on projected plane.\n   * @return {number} Length (on projected plane).\n   * @api\n   */\n  getLength() {\n    return lineStringLength(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride\n    );\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (this.flatMidpointRevision_ != this.getRevision()) {\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\n      this.flatMidpointRevision_ = this.getRevision();\n    }\n    return this.flatMidpoint_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} Simplified LineString.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    simplifiedFlatCoordinates.length = douglasPeucker(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      squaredTolerance,\n      simplifiedFlatCoordinates,\n      0\n    );\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.LINE_STRING;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLineString(\n      this.flatCoordinates,\n      0,\n      this.flatCoordinates.length,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the linestring.\n   * @param {!Array<import(\"../coordinate.js\").Coordinate>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 1);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    this.flatCoordinates.length = deflateCoordinates(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride\n    );\n    this.changed();\n  }\n}\n\nexport default LineString;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}