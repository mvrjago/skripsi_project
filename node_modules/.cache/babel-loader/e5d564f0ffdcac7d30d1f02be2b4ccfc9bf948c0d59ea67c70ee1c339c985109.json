{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { getChangeEventType } from '../Object.js';\nimport { listen, unlistenByKey } from '../events.js';\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../source/Source.js\").default} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n */\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {import(\"../source/State.js\").default} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {import(\"../extent.js\").Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n * @property {number} minZoom\n * @property {number} maxZoom\n */\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is be added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link module:ol/Map~Map#forEachLayerAtPixel} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} SourceType\n * @api\n */\nvar Layer = /** @class */function (_super) {\n  __extends(Layer, _super);\n  /**\n   * @param {Options} options Layer options.\n   */\n  function Layer(options) {\n    var _this = this;\n    var baseOptions = assign({}, options);\n    delete baseOptions.source;\n    _this = _super.call(this, baseOptions) || this;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.mapPrecomposeKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.mapRenderKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    _this.sourceChangeKey_ = null;\n    /**\n     * @private\n     * @type {import(\"../renderer/Layer.js\").default}\n     */\n    _this.renderer_ = null;\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      _this.render = options.render;\n    }\n    if (options.map) {\n      _this.setMap(options.map);\n    }\n    _this.addEventListener(getChangeEventType(LayerProperty.SOURCE), _this.handleSourcePropertyChange_);\n    var source = options.source ? /** @type {SourceType} */options.source : null;\n    _this.setSource(source);\n    return _this;\n  }\n  /**\n   * @param {Array<import(\"./Layer.js\").default>=} opt_array Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  Layer.prototype.getLayersArray = function (opt_array) {\n    var array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  };\n  /**\n   * @param {Array<import(\"./Layer.js\").State>=} opt_states Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  Layer.prototype.getLayerStatesArray = function (opt_states) {\n    var states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  };\n  /**\n   * Get the layer source.\n   * @return {SourceType} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  Layer.prototype.getSource = function () {\n    return (/** @type {SourceType} */this.get(LayerProperty.SOURCE) || null\n    );\n  };\n  /**\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  Layer.prototype.getSourceState = function () {\n    var source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  };\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourceChange_ = function () {\n    this.changed();\n  };\n  /**\n   * @private\n   */\n  Layer.prototype.handleSourcePropertyChange_ = function () {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    var source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(source, EventType.CHANGE, this.handleSourceChange_, this);\n    }\n    this.changed();\n  };\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n  Layer.prototype.getFeatures = function (pixel) {\n    return this.renderer_.getFeatures(pixel);\n  };\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  Layer.prototype.render = function (frameState, target) {\n    var layerRenderer = this.getRenderer();\n    if (layerRenderer.prepareFrame(frameState)) {\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  };\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  Layer.prototype.setMap = function (map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(map, RenderEventType.PRECOMPOSE, function (evt) {\n        var renderEvent = /** @type {import(\"../render/Event.js\").default} */evt;\n        var layerStatesArray = renderEvent.frameState.layerStatesArray;\n        var layerState = this.getLayerState(false);\n        // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n        assert(!layerStatesArray.some(function (arrayLayerState) {\n          return arrayLayerState.layer === layerState.layer;\n        }), 67);\n        layerStatesArray.push(layerState);\n      }, this);\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  };\n  /**\n   * Set the layer source.\n   * @param {SourceType} source The layer source.\n   * @observable\n   * @api\n   */\n  Layer.prototype.setSource = function (source) {\n    this.set(LayerProperty.SOURCE, source);\n  };\n  /**\n   * Get the renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} The layer renderer.\n   */\n  Layer.prototype.getRenderer = function () {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  };\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  Layer.prototype.hasRenderer = function () {\n    return !!this.renderer_;\n  };\n  /**\n   * Create a renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n   * @protected\n   */\n  Layer.prototype.createRenderer = function () {\n    return null;\n  };\n  /**\n   * Clean up.\n   */\n  Layer.prototype.disposeInternal = function () {\n    this.setSource(null);\n    _super.prototype.disposeInternal.call(this);\n  };\n  return Layer;\n}(BaseLayer);\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  var resolution = viewState.resolution;\n  if (resolution < layerState.minResolution || resolution >= layerState.maxResolution) {\n    return false;\n  }\n  var zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\nexport default Layer;","map":{"version":3,"names":["BaseLayer","EventType","LayerProperty","RenderEventType","SourceState","assert","assign","getChangeEventType","listen","unlistenByKey","Layer","_super","__extends","options","_this","baseOptions","source","call","mapPrecomposeKey_","mapRenderKey_","sourceChangeKey_","renderer_","render","map","setMap","addEventListener","SOURCE","handleSourcePropertyChange_","setSource","prototype","getLayersArray","opt_array","array","push","getLayerStatesArray","opt_states","states","getLayerState","getSource","get","getSourceState","UNDEFINED","getState","handleSourceChange_","changed","CHANGE","getFeatures","pixel","frameState","target","layerRenderer","getRenderer","prepareFrame","renderFrame","PRECOMPOSE","evt","renderEvent","layerStatesArray","layerState","some","arrayLayerState","layer","set","createRenderer","hasRenderer","disposeInternal","inView","viewState","visible","resolution","minResolution","maxResolution","zoom","minZoom","maxZoom"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/layer/Layer.js"],"sourcesContent":["/**\n * @module ol/layer/Layer\n */\nimport BaseLayer from './Base.js';\nimport EventType from '../events/EventType.js';\nimport LayerProperty from './Property.js';\nimport RenderEventType from '../render/EventType.js';\nimport SourceState from '../source/State.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {getChangeEventType} from '../Object.js';\nimport {listen, unlistenByKey} from '../events.js';\n\n/**\n * @typedef {function(import(\"../PluggableMap.js\").FrameState):HTMLElement} RenderFunction\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {import(\"../source/Source.js\").default} [source] Source for this layer.  If not provided to the constructor,\n * the source can be set by calling {@link module:ol/layer/Layer#setSource layer.setSource(source)} after\n * construction.\n * @property {import(\"../PluggableMap.js\").default} [map] Map.\n * @property {RenderFunction} [render] Render function. Takes the frame state as input and is expected to return an\n * HTML element. Will overwrite the default rendering for the layer.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./Layer.js\").default} layer\n * @property {number} opacity Opacity, the value is rounded to two digits to appear after the decimal point.\n * @property {import(\"../source/State.js\").default} sourceState\n * @property {boolean} visible\n * @property {boolean} managed\n * @property {import(\"../extent.js\").Extent} [extent]\n * @property {number} zIndex\n * @property {number} maxResolution\n * @property {number} minResolution\n * @property {number} minZoom\n * @property {number} maxZoom\n */\n\n/**\n * @classdesc\n * Base class from which all layer types are derived. This should only be instantiated\n * in the case where a custom layer is be added to the map with a custom `render` function.\n * Such a function can be specified in the `options` object, and is expected to return an HTML element.\n *\n * A visual representation of raster or vector map data.\n * Layers group together those properties that pertain to how the data is to be\n * displayed, irrespective of the source of that data.\n *\n * Layers are usually added to a map with {@link module:ol/Map#addLayer}. Components\n * like {@link module:ol/interaction/Select~Select} use unmanaged layers\n * internally. These unmanaged layers are associated with the map using\n * {@link module:ol/layer/Layer~Layer#setMap} instead.\n *\n * A generic `change` event is fired when the state of the source changes.\n *\n * Please note that for performance reasons several layers might get rendered to\n * the same HTML element, which will cause {@link module:ol/Map~Map#forEachLayerAtPixel} to\n * give false positives. To avoid this, apply different `className` properties to the\n * layers at creation time.\n *\n * @fires import(\"../render/Event.js\").RenderEvent#prerender\n * @fires import(\"../render/Event.js\").RenderEvent#postrender\n *\n * @template {import(\"../source/Source.js\").default} SourceType\n * @api\n */\nclass Layer extends BaseLayer {\n  /**\n   * @param {Options} options Layer options.\n   */\n  constructor(options) {\n    const baseOptions = assign({}, options);\n    delete baseOptions.source;\n\n    super(baseOptions);\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapPrecomposeKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.mapRenderKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../events.js\").EventsKey}\n     */\n    this.sourceChangeKey_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../renderer/Layer.js\").default}\n     */\n    this.renderer_ = null;\n\n    // Overwrite default render method with a custom one\n    if (options.render) {\n      this.render = options.render;\n    }\n\n    if (options.map) {\n      this.setMap(options.map);\n    }\n\n    this.addEventListener(\n      getChangeEventType(LayerProperty.SOURCE),\n      this.handleSourcePropertyChange_\n    );\n\n    const source = options.source\n      ? /** @type {SourceType} */ (options.source)\n      : null;\n    this.setSource(source);\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").default>=} opt_array Array of layers (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").default>} Array of layers.\n   */\n  getLayersArray(opt_array) {\n    const array = opt_array ? opt_array : [];\n    array.push(this);\n    return array;\n  }\n\n  /**\n   * @param {Array<import(\"./Layer.js\").State>=} opt_states Optional list of layer states (to be modified in place).\n   * @return {Array<import(\"./Layer.js\").State>} List of layer states.\n   */\n  getLayerStatesArray(opt_states) {\n    const states = opt_states ? opt_states : [];\n    states.push(this.getLayerState());\n    return states;\n  }\n\n  /**\n   * Get the layer source.\n   * @return {SourceType} The layer source (or `null` if not yet set).\n   * @observable\n   * @api\n   */\n  getSource() {\n    return /** @type {SourceType} */ (this.get(LayerProperty.SOURCE)) || null;\n  }\n\n  /**\n   * @return {import(\"../source/State.js\").default} Source state.\n   */\n  getSourceState() {\n    const source = this.getSource();\n    return !source ? SourceState.UNDEFINED : source.getState();\n  }\n\n  /**\n   * @private\n   */\n  handleSourceChange_() {\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  handleSourcePropertyChange_() {\n    if (this.sourceChangeKey_) {\n      unlistenByKey(this.sourceChangeKey_);\n      this.sourceChangeKey_ = null;\n    }\n    const source = this.getSource();\n    if (source) {\n      this.sourceChangeKey_ = listen(\n        source,\n        EventType.CHANGE,\n        this.handleSourceChange_,\n        this\n      );\n    }\n    this.changed();\n  }\n\n  /**\n   * @param {import(\"../pixel\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../Feature\").default>>} Promise that resolves with\n   * an array of features.\n   */\n  getFeatures(pixel) {\n    return this.renderer_.getFeatures(pixel);\n  }\n\n  /**\n   * In charge to manage the rendering of the layer. One layer type is\n   * bounded with one layer renderer.\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target which the renderer may (but need not) use\n   * for rendering its content.\n   * @return {HTMLElement} The rendered element.\n   */\n  render(frameState, target) {\n    const layerRenderer = this.getRenderer();\n\n    if (layerRenderer.prepareFrame(frameState)) {\n      return layerRenderer.renderFrame(frameState, target);\n    }\n  }\n\n  /**\n   * Sets the layer to be rendered on top of other layers on a map. The map will\n   * not manage this layer in its layers collection, and the callback in\n   * {@link module:ol/Map#forEachLayerAtPixel} will receive `null` as layer. This\n   * is useful for temporary layers. To remove an unmanaged layer from the map,\n   * use `#setMap(null)`.\n   *\n   * To add the layer to a map and have it managed by the map, use\n   * {@link module:ol/Map#addLayer} instead.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  setMap(map) {\n    if (this.mapPrecomposeKey_) {\n      unlistenByKey(this.mapPrecomposeKey_);\n      this.mapPrecomposeKey_ = null;\n    }\n    if (!map) {\n      this.changed();\n    }\n    if (this.mapRenderKey_) {\n      unlistenByKey(this.mapRenderKey_);\n      this.mapRenderKey_ = null;\n    }\n    if (map) {\n      this.mapPrecomposeKey_ = listen(\n        map,\n        RenderEventType.PRECOMPOSE,\n        function (evt) {\n          const renderEvent = /** @type {import(\"../render/Event.js\").default} */ (evt);\n          const layerStatesArray = renderEvent.frameState.layerStatesArray;\n          const layerState = this.getLayerState(false);\n          // A layer can only be added to the map once. Use either `layer.setMap()` or `map.addLayer()`, not both.\n          assert(\n            !layerStatesArray.some(function (arrayLayerState) {\n              return arrayLayerState.layer === layerState.layer;\n            }),\n            67\n          );\n          layerStatesArray.push(layerState);\n        },\n        this\n      );\n      this.mapRenderKey_ = listen(this, EventType.CHANGE, map.render, map);\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the layer source.\n   * @param {SourceType} source The layer source.\n   * @observable\n   * @api\n   */\n  setSource(source) {\n    this.set(LayerProperty.SOURCE, source);\n  }\n\n  /**\n   * Get the renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} The layer renderer.\n   */\n  getRenderer() {\n    if (!this.renderer_) {\n      this.renderer_ = this.createRenderer();\n    }\n    return this.renderer_;\n  }\n\n  /**\n   * @return {boolean} The layer has a renderer.\n   */\n  hasRenderer() {\n    return !!this.renderer_;\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return null;\n  }\n\n  /**\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setSource(null);\n    super.disposeInternal();\n  }\n}\n\n/**\n * Return `true` if the layer is visible and if the provided view state\n * has resolution and zoom levels that are in range of the layer's min/max.\n * @param {State} layerState Layer state.\n * @param {import(\"../View.js\").State} viewState View state.\n * @return {boolean} The layer is visible at the given view state.\n */\nexport function inView(layerState, viewState) {\n  if (!layerState.visible) {\n    return false;\n  }\n  const resolution = viewState.resolution;\n  if (\n    resolution < layerState.minResolution ||\n    resolution >= layerState.maxResolution\n  ) {\n    return false;\n  }\n  const zoom = viewState.zoom;\n  return zoom > layerState.minZoom && zoom <= layerState.maxZoom;\n}\n\nexport default Layer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}