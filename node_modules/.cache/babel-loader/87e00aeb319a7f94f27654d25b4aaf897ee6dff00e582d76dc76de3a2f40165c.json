{"ast":null,"code":"/**\n * @module ol/source/TileWMS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport TileImage from './TileImage.js';\nimport WMSServerType from './WMSServerType.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { buffer, createEmpty } from '../extent.js';\nimport { buffer as bufferSize, scale as scaleSize, toSize } from '../size.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { get as getProjection, transform, transformExtent } from '../proj.js';\nimport { modulo } from '../math.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See http://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {import(\"./WMSServerType.js\").default|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nvar TileWMS = /** @class */function (_super) {\n  __extends(TileWMS, _super);\n  /**\n   * @param {Options=} [opt_options] Tile WMS options.\n   */\n  function TileWMS(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : /** @type {Options} */{};\n    var params = options.params || {};\n    var transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    }) || this;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.params_ = params;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.v13_ = true;\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    _this.serverType_ = /** @type {import(\"./WMSServerType.js\").default|undefined} */options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.tmpExtent_ = createEmpty();\n    _this.updateV13_();\n    _this.setKey(_this.getKeyForParams_());\n    return _this;\n  }\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  TileWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n    var tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n    var z = tileGrid.getZForResolution(resolution, this.zDirection);\n    var tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    var gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    var y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  TileWMS.prototype.getLegendUrl = function (resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n    if (params === undefined || params['LAYER'] === undefined) {\n      var layers = this.params_.LAYERS;\n      var isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n    if (resolution !== undefined) {\n      var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      var dpi = 25.4 / 0.28;\n      var inchesPerMeter = 39.37;\n      baseParams['SCALE'] = resolution * mpu * inchesPerMeter * dpi;\n    }\n    assign(baseParams, params);\n    return appendParams( /** @type {string} */this.urls[0], baseParams);\n  };\n  /**\n   * @return {number} Gutter.\n   */\n  TileWMS.prototype.getGutter = function () {\n    return this.gutter_;\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  TileWMS.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  TileWMS.prototype.getRequestUrl_ = function (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    var urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n          break;\n      }\n    }\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      var tmp = void 0;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n    var url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  };\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  TileWMS.prototype.getTilePixelRatio = function (pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  };\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  TileWMS.prototype.getKeyForParams_ = function () {\n    var i = 0;\n    var res = [];\n    for (var key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  TileWMS.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  };\n  /**\n   * @private\n   */\n  TileWMS.prototype.updateV13_ = function () {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  TileWMS.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n    var tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n    var tileResolution = tileGrid.getResolution(tileCoord[0]);\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    var gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  };\n  return TileWMS;\n}(TileImage);\nexport default TileWMS;","map":{"version":3,"names":["DEFAULT_WMS_VERSION","TileImage","WMSServerType","appendParams","assert","assign","buffer","createEmpty","bufferSize","scale","scaleSize","toSize","calculateSourceResolution","compareVersions","get","getProjection","transform","transformExtent","modulo","hash","tileCoordHash","TileWMS","_super","__extends","opt_options","_this","options","params","transparent","call","attributions","cacheSize","crossOrigin","imageSmoothing","opaque","projection","reprojectionErrorThreshold","tileClass","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","gutter_","gutter","params_","v13_","serverType_","serverType","hidpi_","hidpi","tmpExtent_","updateV13_","setKey","getKeyForParams_","prototype","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","getTileGrid","getTileGridForProjection","z","getZForResolution","zDirection","tileCoord","getTileCoordForCoordAndZ","getResolutions","length","tileResolution","getResolution","tileExtent","getTileCoordExtent","tileSize","getTileSize","tmpSize","baseParams","x","Math","floor","y","getRequestUrl_","getLegendUrl","layers","LAYERS","isSingleLayer","Array","isArray","mpu","getMetersPerUnit","dpi","inchesPerMeter","getGutter","getParams","pixelRatio","getCode","GEOSERVER","MAPSERVER","CARMENTA_SERVER","QGIS","axisOrientation","getAxisOrientation","bbox","substr","tmp","join","index","getTilePixelRatio","i","res","key","updateParams","version","tileUrlFunction"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/TileWMS.js"],"sourcesContent":["/**\n * @module ol/source/TileWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\n\nimport TileImage from './TileImage.js';\nimport WMSServerType from './WMSServerType.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {buffer, createEmpty} from '../extent.js';\nimport {buffer as bufferSize, scale as scaleSize, toSize} from '../size.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\nimport {modulo} from '../math.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {number} [gutter=0]\n * The size in pixels of the gutter around image tiles to ignore. By setting\n * this property to a non-zero value, images will be requested that are wider\n * and taller than the tile size by a value of `2 x gutter`.\n * Using a non-zero value allows artifacts of rendering at tile edges to be\n * ignored. If you control the WMS service it is recommended to address\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\n * this. See http://mapserver.org/output/tile_mode.html.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {typeof import(\"../ImageTile.js\").default} [tileClass] Class used to instantiate image tiles.\n * Default is {@link module:ol/ImageTile~ImageTile}.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used..\n * @property {import(\"./WMSServerType.js\").default|string} [serverType]\n * The type of the remote WMS server. Currently only used when `hidpi` is\n * `true`.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] WMS service URL.\n * @property {Array<string>} [urls] WMS service urls.\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * When set to `false`, only one world\n * will be rendered. When `true`, tiles will be requested for one world only,\n * but they will be wrapped horizontally to render multiple worlds.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from WMS servers.\n * @api\n */\nclass TileWMS extends TileImage {\n  /**\n   * @param {Options=} [opt_options] Tile WMS options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : /** @type {Options} */ ({});\n\n    const params = options.params || {};\n\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      opaque: !transparent,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileClass: options.tileClass,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n    });\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = params;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    this.serverType_ = /** @type {import(\"./WMSServerType.js\").default|undefined} */ (options.serverType);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projectionObj);\n    }\n\n    const z = tileGrid.getZForResolution(resolution, this.zDirection);\n    const tileCoord = tileGrid.getTileCoordForCoordAndZ(coordinate, z);\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      tileResolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        tileResolution\n      );\n      tileExtent = transformExtent(\n        tileExtent,\n        projectionObj,\n        sourceProjectionObj\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\n\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.urls[0] === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const dpi = 25.4 / 0.28;\n      const inchesPerMeter = 39.37;\n      baseParams['SCALE'] = resolution * mpu * inchesPerMeter * dpi;\n    }\n\n    assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.urls[0]), baseParams);\n  }\n\n  /**\n   * @return {number} Gutter.\n   */\n  getGutter() {\n    return this.gutter_;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    params['WIDTH'] = tileSize[0];\n    params['HEIGHT'] = tileSize[1];\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 52); // Unknown `serverType` configured\n          break;\n      }\n    }\n\n    const axisOrientation = projection.getAxisOrientation();\n    const bbox = tileExtent;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      let tmp;\n      tmp = tileExtent[0];\n      bbox[0] = tileExtent[1];\n      bbox[1] = tmp;\n      tmp = tileExtent[2];\n      bbox[2] = tileExtent[3];\n      bbox[3] = tmp;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    return appendParams(url, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return !this.hidpi_ || this.serverType_ === undefined ? 1 : pixelRatio;\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    const gutter = this.gutter_;\n    if (gutter !== 0) {\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\n    }\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileWMS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}