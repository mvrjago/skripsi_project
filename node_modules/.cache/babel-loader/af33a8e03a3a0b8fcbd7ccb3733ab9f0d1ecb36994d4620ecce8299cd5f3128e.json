{"ast":null,"code":"/**\n * @module ol/format/GeoJSON\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport { assert } from '../asserts.js';\nimport { assign, isEmpty } from '../obj.js';\nimport { get as getProjection } from '../proj.js';\nimport { transformGeometryWithOptions } from './Feature.js';\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nvar GeoJSON = /** @class */function (_super) {\n  __extends(GeoJSON, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function GeoJSON(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this) || this;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    _this.dataProjection = getProjection(options.dataProjection ? options.dataProjection : 'EPSG:4326');\n    if (options.featureProjection) {\n      _this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    _this.geometryName_ = options.geometryName;\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    _this.extractGeometryName_ = options.extractGeometryName;\n    return _this;\n  }\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  GeoJSON.prototype.readFeatureFromObject = function (object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    var geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */object;\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */object,\n        'properties': null\n      };\n    }\n    var geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    var feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (this.extractGeometryName_ && 'geometry_name' in geoJSONFeature !== undefined) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  };\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  GeoJSON.prototype.readFeaturesFromObject = function (object, opt_options) {\n    var geoJSONObject = /** @type {GeoJSONObject} */object;\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    var features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      var geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */object;\n      features = [];\n      var geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (var i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n    return features;\n  };\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  GeoJSON.prototype.readGeometryFromObject = function (object, opt_options) {\n    return readGeometry(object, opt_options);\n  };\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  GeoJSON.prototype.readProjectionFromObject = function (object) {\n    var crs = object['crs'];\n    var projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return (/** @type {import(\"../proj/Projection.js\").default} */projection\n    );\n  };\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  GeoJSON.prototype.writeFeatureObject = function (feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    /** @type {GeoJSONFeature} */\n    var object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null\n    };\n    var id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n    if (!feature.hasProperties()) {\n      return object;\n    }\n    var properties = feature.getProperties();\n    var geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n      delete properties[feature.getGeometryName()];\n    }\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n    return object;\n  };\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  GeoJSON.prototype.writeFeaturesObject = function (features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    var objects = [];\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects\n    };\n  };\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  GeoJSON.prototype.writeGeometryObject = function (geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  };\n  return GeoJSON;\n}(JSONFeature);\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  var geometry;\n  switch (object['type']) {\n    case GeometryType.POINT:\n      {\n        geometry = readPointGeometry( /** @type {GeoJSONPoint} */object);\n        break;\n      }\n    case GeometryType.LINE_STRING:\n      {\n        geometry = readLineStringGeometry( /** @type {GeoJSONLineString} */object);\n        break;\n      }\n    case GeometryType.POLYGON:\n      {\n        geometry = readPolygonGeometry( /** @type {GeoJSONPolygon} */object);\n        break;\n      }\n    case GeometryType.MULTI_POINT:\n      {\n        geometry = readMultiPointGeometry( /** @type {GeoJSONMultiPoint} */object);\n        break;\n      }\n    case GeometryType.MULTI_LINE_STRING:\n      {\n        geometry = readMultiLineStringGeometry( /** @type {GeoJSONMultiLineString} */object);\n        break;\n      }\n    case GeometryType.MULTI_POLYGON:\n      {\n        geometry = readMultiPolygonGeometry( /** @type {GeoJSONMultiPolygon} */object);\n        break;\n      }\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        geometry = readGeometryCollectionGeometry( /** @type {GeoJSONGeometryCollection} */object);\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported GeoJSON type: ' + object.type);\n      }\n  }\n  return transformGeometryWithOptions(geometry, false, opt_options);\n}\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  var geometries = object['geometries'].map(\n  /**\n   * @param {GeoJSONGeometry} geometry Geometry.\n   * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   */\n  function (geometry) {\n    return readGeometry(geometry, opt_options);\n  });\n  return new GeometryCollection(geometries);\n}\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  geometry = transformGeometryWithOptions(geometry, true, opt_options);\n  var type = geometry.getType();\n  /** @type {GeoJSONGeometry} */\n  var geoJSON;\n  switch (type) {\n    case GeometryType.POINT:\n      {\n        geoJSON = writePointGeometry( /** @type {Point} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.LINE_STRING:\n      {\n        geoJSON = writeLineStringGeometry( /** @type {LineString} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.POLYGON:\n      {\n        geoJSON = writePolygonGeometry( /** @type {Polygon} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.MULTI_POINT:\n      {\n        geoJSON = writeMultiPointGeometry( /** @type {MultiPoint} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.MULTI_LINE_STRING:\n      {\n        geoJSON = writeMultiLineStringGeometry( /** @type {MultiLineString} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.MULTI_POLYGON:\n      {\n        geoJSON = writeMultiPolygonGeometry( /** @type {MultiPolygon} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.GEOMETRY_COLLECTION:\n      {\n        geoJSON = writeGeometryCollectionGeometry( /** @type {GeometryCollection} */geometry, opt_options);\n        break;\n      }\n    case GeometryType.CIRCLE:\n      {\n        geoJSON = {\n          type: 'GeometryCollection',\n          geometries: []\n        };\n        break;\n      }\n    default:\n      {\n        throw new Error('Unsupported geometry type: ' + type);\n      }\n  }\n  return geoJSON;\n}\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  var geometries = geometry.getGeometriesArray().map(function (geometry) {\n    var options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries\n  };\n}\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  var right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates()\n  };\n}\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  var right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right)\n  };\n}\nexport default GeoJSON;","map":{"version":3,"names":["Feature","GeometryCollection","GeometryType","JSONFeature","LineString","MultiLineString","MultiPoint","MultiPolygon","Point","Polygon","assert","assign","isEmpty","get","getProjection","transformGeometryWithOptions","GeoJSON","_super","__extends","opt_options","_this","options","call","dataProjection","featureProjection","defaultFeatureProjection","geometryName_","geometryName","extractGeometryName_","extractGeometryName","prototype","readFeatureFromObject","object","geoJSONFeature","geometry","readGeometry","feature","setGeometryName","undefined","setGeometry","setId","setProperties","readFeaturesFromObject","geoJSONObject","features","geoJSONFeatureCollection","geoJSONFeatures","i","ii","length","push","readGeometryFromObject","readProjectionFromObject","crs","projection","writeFeatureObject","adaptOptions","properties","id","getId","hasProperties","getProperties","getGeometry","writeGeometry","getGeometryName","writeFeaturesObject","objects","type","writeGeometryObject","POINT","readPointGeometry","LINE_STRING","readLineStringGeometry","POLYGON","readPolygonGeometry","MULTI_POINT","readMultiPointGeometry","MULTI_LINE_STRING","readMultiLineStringGeometry","MULTI_POLYGON","readMultiPolygonGeometry","GEOMETRY_COLLECTION","readGeometryCollectionGeometry","Error","geometries","map","getType","geoJSON","writePointGeometry","writeLineStringGeometry","writePolygonGeometry","writeMultiPointGeometry","writeMultiLineStringGeometry","writeMultiPolygonGeometry","writeGeometryCollectionGeometry","CIRCLE","getGeometriesArray","coordinates","getCoordinates","right","rightHanded"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/format/GeoJSON.js"],"sourcesContent":["/**\n * @module ol/format/GeoJSON\n */\n\nimport Feature from '../Feature.js';\nimport GeometryCollection from '../geom/GeometryCollection.js';\nimport GeometryType from '../geom/GeometryType.js';\nimport JSONFeature from './JSONFeature.js';\nimport LineString from '../geom/LineString.js';\nimport MultiLineString from '../geom/MultiLineString.js';\nimport MultiPoint from '../geom/MultiPoint.js';\nimport MultiPolygon from '../geom/MultiPolygon.js';\nimport Point from '../geom/Point.js';\nimport Polygon from '../geom/Polygon.js';\nimport {assert} from '../asserts.js';\nimport {assign, isEmpty} from '../obj.js';\nimport {get as getProjection} from '../proj.js';\nimport {transformGeometryWithOptions} from './Feature.js';\n\n/**\n * @typedef {import(\"geojson\").GeoJSON} GeoJSONObject\n * @typedef {import(\"geojson\").Feature} GeoJSONFeature\n * @typedef {import(\"geojson\").FeatureCollection} GeoJSONFeatureCollection\n * @typedef {import(\"geojson\").Geometry} GeoJSONGeometry\n * @typedef {import(\"geojson\").Point} GeoJSONPoint\n * @typedef {import(\"geojson\").LineString} GeoJSONLineString\n * @typedef {import(\"geojson\").Polygon} GeoJSONPolygon\n * @typedef {import(\"geojson\").MultiPoint} GeoJSONMultiPoint\n * @typedef {import(\"geojson\").MultiLineString} GeoJSONMultiLineString\n * @typedef {import(\"geojson\").MultiPolygon} GeoJSONMultiPolygon\n * @typedef {import(\"geojson\").GeometryCollection} GeoJSONGeometryCollection\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../proj.js\").ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\n * @property {import(\"../proj.js\").ProjectionLike} [featureProjection] Projection for features read or\n * written by the format.  Options passed to read or write methods will take precedence.\n * @property {string} [geometryName] Geometry name to use when creating features.\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\n * will look for that field to set the geometry name. If both this field is set to `true`\n * and a `geometryName` is provided, the `geometryName` will take precedence.\n */\n\n/**\n * @classdesc\n * Feature format for reading and writing data in the GeoJSON format.\n *\n * @api\n */\nclass GeoJSON extends JSONFeature {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super();\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.dataProjection = getProjection(\n      options.dataProjection ? options.dataProjection : 'EPSG:4326'\n    );\n\n    if (options.featureProjection) {\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\n    }\n\n    /**\n     * Name of the geometry attribute for features.\n     * @type {string|undefined}\n     * @private\n     */\n    this.geometryName_ = options.geometryName;\n\n    /**\n     * Look for the geometry name in the feature GeoJSON\n     * @type {boolean|undefined}\n     * @private\n     */\n    this.extractGeometryName_ = options.extractGeometryName;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @protected\n   * @return {import(\"../Feature.js\").default} Feature.\n   */\n  readFeatureFromObject(object, opt_options) {\n    /**\n     * @type {GeoJSONFeature}\n     */\n    let geoJSONFeature = null;\n    if (object['type'] === 'Feature') {\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\n    } else {\n      geoJSONFeature = {\n        'type': 'Feature',\n        'geometry': /** @type {GeoJSONGeometry} */ (object),\n        'properties': null,\n      };\n    }\n\n    const geometry = readGeometry(geoJSONFeature['geometry'], opt_options);\n    const feature = new Feature();\n    if (this.geometryName_) {\n      feature.setGeometryName(this.geometryName_);\n    } else if (\n      this.extractGeometryName_ &&\n      'geometry_name' in geoJSONFeature !== undefined\n    ) {\n      feature.setGeometryName(geoJSONFeature['geometry_name']);\n    }\n    feature.setGeometry(geometry);\n\n    if ('id' in geoJSONFeature) {\n      feature.setId(geoJSONFeature['id']);\n    }\n\n    if (geoJSONFeature['properties']) {\n      feature.setProperties(geoJSONFeature['properties'], true);\n    }\n    return feature;\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @protected\n   * @return {Array<Feature>} Features.\n   */\n  readFeaturesFromObject(object, opt_options) {\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\n    /** @type {Array<import(\"../Feature.js\").default>} */\n    let features = null;\n    if (geoJSONObject['type'] === 'FeatureCollection') {\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);\n      features = [];\n      const geoJSONFeatures = geoJSONFeatureCollection['features'];\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\n        features.push(\n          this.readFeatureFromObject(geoJSONFeatures[i], opt_options)\n        );\n      }\n    } else {\n      features = [this.readFeatureFromObject(object, opt_options)];\n    }\n    return features;\n  }\n\n  /**\n   * @param {GeoJSONGeometry} object Object.\n   * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n   * @protected\n   * @return {import(\"../geom/Geometry.js\").default} Geometry.\n   */\n  readGeometryFromObject(object, opt_options) {\n    return readGeometry(object, opt_options);\n  }\n\n  /**\n   * @param {Object} object Object.\n   * @protected\n   * @return {import(\"../proj/Projection.js\").default} Projection.\n   */\n  readProjectionFromObject(object) {\n    const crs = object['crs'];\n    let projection;\n    if (crs) {\n      if (crs['type'] == 'name') {\n        projection = getProjection(crs['properties']['name']);\n      } else if (crs['type'] === 'EPSG') {\n        projection = getProjection('EPSG:' + crs['properties']['code']);\n      } else {\n        assert(false, 36); // Unknown SRS type\n      }\n    } else {\n      projection = this.dataProjection;\n    }\n    return /** @type {import(\"../proj/Projection.js\").default} */ (projection);\n  }\n\n  /**\n   * Encode a feature as a GeoJSON Feature object.\n   *\n   * @param {import(\"../Feature.js\").default} feature Feature.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeature} Object.\n   * @api\n   */\n  writeFeatureObject(feature, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n\n    /** @type {GeoJSONFeature} */\n    const object = {\n      'type': 'Feature',\n      geometry: null,\n      properties: null,\n    };\n\n    const id = feature.getId();\n    if (id !== undefined) {\n      object.id = id;\n    }\n\n    if (!feature.hasProperties()) {\n      return object;\n    }\n\n    const properties = feature.getProperties();\n    const geometry = feature.getGeometry();\n    if (geometry) {\n      object.geometry = writeGeometry(geometry, opt_options);\n\n      delete properties[feature.getGeometryName()];\n    }\n\n    if (!isEmpty(properties)) {\n      object.properties = properties;\n    }\n\n    return object;\n  }\n\n  /**\n   * Encode an array of features as a GeoJSON object.\n   *\n   * @param {Array<import(\"../Feature.js\").default>} features Features.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\n   * @api\n   */\n  writeFeaturesObject(features, opt_options) {\n    opt_options = this.adaptOptions(opt_options);\n    const objects = [];\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      objects.push(this.writeFeatureObject(features[i], opt_options));\n    }\n    return {\n      type: 'FeatureCollection',\n      features: objects,\n    };\n  }\n\n  /**\n   * Encode a geometry as a GeoJSON object.\n   *\n   * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n   * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\n   * @api\n   */\n  writeGeometryObject(geometry, opt_options) {\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\n  }\n}\n\n/**\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {import(\"../geom/Geometry.js\").default} Geometry.\n */\nfunction readGeometry(object, opt_options) {\n  if (!object) {\n    return null;\n  }\n\n  /**\n   * @type {import(\"../geom/Geometry.js\").default}\n   */\n  let geometry;\n  switch (object['type']) {\n    case GeometryType.POINT: {\n      geometry = readPointGeometry(/** @type {GeoJSONPoint} */ (object));\n      break;\n    }\n    case GeometryType.LINE_STRING: {\n      geometry = readLineStringGeometry(\n        /** @type {GeoJSONLineString} */ (object)\n      );\n      break;\n    }\n    case GeometryType.POLYGON: {\n      geometry = readPolygonGeometry(/** @type {GeoJSONPolygon} */ (object));\n      break;\n    }\n    case GeometryType.MULTI_POINT: {\n      geometry = readMultiPointGeometry(\n        /** @type {GeoJSONMultiPoint} */ (object)\n      );\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING: {\n      geometry = readMultiLineStringGeometry(\n        /** @type {GeoJSONMultiLineString} */ (object)\n      );\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      geometry = readMultiPolygonGeometry(\n        /** @type {GeoJSONMultiPolygon} */ (object)\n      );\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      geometry = readGeometryCollectionGeometry(\n        /** @type {GeoJSONGeometryCollection} */ (object)\n      );\n      break;\n    }\n    default: {\n      throw new Error('Unsupported GeoJSON type: ' + object.type);\n    }\n  }\n  return transformGeometryWithOptions(geometry, false, opt_options);\n}\n\n/**\n * @param {GeoJSONGeometryCollection} object Object.\n * @param {import(\"./Feature.js\").ReadOptions=} opt_options Read options.\n * @return {GeometryCollection} Geometry collection.\n */\nfunction readGeometryCollectionGeometry(object, opt_options) {\n  const geometries = object['geometries'].map(\n    /**\n     * @param {GeoJSONGeometry} geometry Geometry.\n     * @return {import(\"../geom/Geometry.js\").default} geometry Geometry.\n     */\n    function (geometry) {\n      return readGeometry(geometry, opt_options);\n    }\n  );\n  return new GeometryCollection(geometries);\n}\n\n/**\n * @param {GeoJSONPoint} object Object.\n * @return {Point} Point.\n */\nfunction readPointGeometry(object) {\n  return new Point(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONLineString} object Object.\n * @return {LineString} LineString.\n */\nfunction readLineStringGeometry(object) {\n  return new LineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiLineString} object Object.\n * @return {MultiLineString} MultiLineString.\n */\nfunction readMultiLineStringGeometry(object) {\n  return new MultiLineString(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPoint} object Object.\n * @return {MultiPoint} MultiPoint.\n */\nfunction readMultiPointGeometry(object) {\n  return new MultiPoint(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONMultiPolygon} object Object.\n * @return {MultiPolygon} MultiPolygon.\n */\nfunction readMultiPolygonGeometry(object) {\n  return new MultiPolygon(object['coordinates']);\n}\n\n/**\n * @param {GeoJSONPolygon} object Object.\n * @return {Polygon} Polygon.\n */\nfunction readPolygonGeometry(object) {\n  return new Polygon(object['coordinates']);\n}\n\n/**\n * @param {import(\"../geom/Geometry.js\").default} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeGeometry(geometry, opt_options) {\n  geometry = transformGeometryWithOptions(geometry, true, opt_options);\n  const type = geometry.getType();\n\n  /** @type {GeoJSONGeometry} */\n  let geoJSON;\n  switch (type) {\n    case GeometryType.POINT: {\n      geoJSON = writePointGeometry(\n        /** @type {Point} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.LINE_STRING: {\n      geoJSON = writeLineStringGeometry(\n        /** @type {LineString} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.POLYGON: {\n      geoJSON = writePolygonGeometry(\n        /** @type {Polygon} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.MULTI_POINT: {\n      geoJSON = writeMultiPointGeometry(\n        /** @type {MultiPoint} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.MULTI_LINE_STRING: {\n      geoJSON = writeMultiLineStringGeometry(\n        /** @type {MultiLineString} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.MULTI_POLYGON: {\n      geoJSON = writeMultiPolygonGeometry(\n        /** @type {MultiPolygon} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.GEOMETRY_COLLECTION: {\n      geoJSON = writeGeometryCollectionGeometry(\n        /** @type {GeometryCollection} */ (geometry),\n        opt_options\n      );\n      break;\n    }\n    case GeometryType.CIRCLE: {\n      geoJSON = {\n        type: 'GeometryCollection',\n        geometries: [],\n      };\n      break;\n    }\n    default: {\n      throw new Error('Unsupported geometry type: ' + type);\n    }\n  }\n  return geoJSON;\n}\n\n/**\n * @param {GeometryCollection} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\n */\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\n  const geometries = geometry.getGeometriesArray().map(function (geometry) {\n    const options = assign({}, opt_options);\n    delete options.featureProjection;\n    return writeGeometry(geometry, options);\n  });\n  return {\n    type: 'GeometryCollection',\n    geometries: geometries,\n  };\n}\n\n/**\n * @param {LineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'LineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiLineString} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiLineString',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPoint} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPointGeometry(geometry, opt_options) {\n  return {\n    type: 'MultiPoint',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {MultiPolygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'MultiPolygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\n/**\n * @param {Point} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePointGeometry(geometry, opt_options) {\n  return {\n    type: 'Point',\n    coordinates: geometry.getCoordinates(),\n  };\n}\n\n/**\n * @param {Polygon} geometry Geometry.\n * @param {import(\"./Feature.js\").WriteOptions=} opt_options Write options.\n * @return {GeoJSONGeometry} GeoJSON geometry.\n */\nfunction writePolygonGeometry(geometry, opt_options) {\n  let right;\n  if (opt_options) {\n    right = opt_options.rightHanded;\n  }\n  return {\n    type: 'Polygon',\n    coordinates: geometry.getCoordinates(right),\n  };\n}\n\nexport default GeoJSON;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}