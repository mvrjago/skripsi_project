{"ast":null,"code":"var _jsxFileName = \"/Users/mariovicky/Skripsi_OpenLayers/src/containers/Map/OpenlayerMaps/Map.js\";\nimport React, { Component } from 'react';\nimport 'ol/ol.css';\nimport './Map.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport OSM from 'ol/source/OSM';\nimport VectorSource from 'ol/source/Vector';\nimport { fromLonLat } from 'ol/proj';\nimport { Style, Fill, Stroke, Circle } from 'ol/style';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport Select from 'ol/interaction/Select';\nimport { click } from 'ol/events/condition';\nclass MapComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleFeatureSelect = event => {\n      const selectedFeatures = event.target.getFeatures();\n      if (selectedFeatures.getLength() > 0) {\n        // Zoom to the extent of the selected feature\n        this.map.getView().fit(selectedFeatures.getArray()[0].getGeometry().getExtent(), {\n          padding: [50, 50, 50, 50]\n        });\n      }\n    };\n    this.mapRef = /*#__PURE__*/React.createRef();\n    this.map = null;\n    this.vectorSource = null;\n    this.vectorLayer = null;\n    this.selectInteraction = null;\n  }\n  componentDidMount() {\n    this.initializeMap();\n  }\n  initializeMap() {\n    const bbox = [-180, -90, 180, 90]; // Initial bounding box coordinates\n\n    // Set up the tile layer\n    const tileLayer = new TileLayer({\n      source: new OSM()\n    });\n\n    // Set up the vector source\n    this.vectorSource = new VectorSource({\n      format: new GeoJSON(),\n      loader: (extent, resolution, projection) => {\n        const url = `https://your-api-endpoint.com/data?bbox=${extent.join(',')}`;\n        fetch(url).then(response => {\n          if (!response.ok) {\n            throw new Error('Network response was not ok');\n          }\n          return response.json();\n        }).then(json => {\n          const features = this.vectorSource.getFormat().readFeatures(json);\n          this.vectorSource.clear();\n          this.vectorSource.addFeatures(features);\n        }).catch(error => {\n          console.error('Error fetching JSON:', error);\n          console.error('URL:', url);\n        });\n      },\n      strategy: bboxStrategy\n    });\n\n    // Set up the vector layer\n    this.vectorLayer = new VectorLayer({\n      source: this.vectorSource,\n      style: new Style({\n        fill: new Fill({\n          color: 'rgba(255, 255, 255, 0.2)'\n        }),\n        stroke: new Stroke({\n          color: '#0099ff',\n          width: 2\n        }),\n        image: new Circle({\n          radius: 7,\n          fill: new Fill({\n            color: '#0099ff'\n          })\n        })\n      })\n    });\n\n    // Set up the map\n    this.map = new Map({\n      layers: [tileLayer, this.vectorLayer],\n      target: this.mapRef.current,\n      view: new View({\n        center: fromLonLat([0, 0]),\n        // Center the map at [0, 0]\n        zoom: 2\n      })\n    });\n\n    // Add select interaction to handle click events on features\n    this.selectInteraction = new Select({\n      condition: click,\n      layers: [this.vectorLayer],\n      style: new Style({\n        stroke: new Stroke({\n          color: 'rgba(255, 255, 0, 1)',\n          width: 2\n        })\n      })\n    });\n    this.map.addInteraction(this.selectInteraction);\n    this.selectInteraction.on('select', this.handleFeatureSelect);\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      ref: this.mapRef,\n      className: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 12\n      }\n    });\n  }\n}\nexport default MapComponent;","map":{"version":3,"names":["React","Component","Map","View","Tile","TileLayer","Vector","VectorLayer","OSM","VectorSource","fromLonLat","Style","Fill","Stroke","Circle","bbox","bboxStrategy","Select","click","MapComponent","constructor","props","handleFeatureSelect","event","selectedFeatures","target","getFeatures","getLength","map","getView","fit","getArray","getGeometry","getExtent","padding","mapRef","createRef","vectorSource","vectorLayer","selectInteraction","componentDidMount","initializeMap","tileLayer","source","format","GeoJSON","loader","extent","resolution","projection","url","join","fetch","then","response","ok","Error","json","features","getFormat","readFeatures","clear","addFeatures","catch","error","console","strategy","style","fill","color","stroke","width","image","radius","layers","current","view","center","zoom","condition","addInteraction","on","render","createElement","ref","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/src/containers/Map/OpenlayerMaps/Map.js"],"sourcesContent":["import React, { Component } from 'react';\nimport 'ol/ol.css';\nimport './Map.css';\nimport Map from 'ol/Map';\nimport View from 'ol/View';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer';\nimport OSM from 'ol/source/OSM';\nimport VectorSource from 'ol/source/Vector';\nimport { fromLonLat } from 'ol/proj';\nimport { Style, Fill, Stroke, Circle } from 'ol/style';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport Select from 'ol/interaction/Select';\nimport { click } from 'ol/events/condition';\n\nclass MapComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n    this.map = null;\n    this.vectorSource = null;\n    this.vectorLayer = null;\n    this.selectInteraction = null;\n  }\n\n  componentDidMount() {\n    this.initializeMap();\n  }\n\n  initializeMap() {\n    const bbox = [-180, -90, 180, 90]; // Initial bounding box coordinates\n\n    // Set up the tile layer\n    const tileLayer = new TileLayer({\n      source: new OSM(),\n    });\n\n    // Set up the vector source\n    this.vectorSource = new VectorSource({\n      format: new GeoJSON(),\n      loader: (extent, resolution, projection) => {\n        const url = `https://your-api-endpoint.com/data?bbox=${extent.join(',')}`;\n        fetch(url)\n          .then((response) => {\n            if (!response.ok) {\n              throw new Error('Network response was not ok');\n            }\n            return response.json();\n          })\n          .then((json) => {\n            const features = this.vectorSource.getFormat().readFeatures(json);\n            this.vectorSource.clear();\n            this.vectorSource.addFeatures(features);\n          })\n          .catch((error) => {\n            console.error('Error fetching JSON:', error);\n            console.error('URL:', url);\n          });\n      },\n      strategy: bboxStrategy,\n    });\n\n    // Set up the vector layer\n    this.vectorLayer = new VectorLayer({\n      source: this.vectorSource,\n      style: new Style({\n        fill: new Fill({\n          color: 'rgba(255, 255, 255, 0.2)',\n        }),\n        stroke: new Stroke({\n          color: '#0099ff',\n          width: 2,\n        }),\n        image: new Circle({\n          radius: 7,\n          fill: new Fill({\n            color: '#0099ff',\n          }),\n        }),\n      }),\n    });\n\n    // Set up the map\n    this.map = new Map({\n      layers: [tileLayer, this.vectorLayer],\n      target: this.mapRef.current,\n      view: new View({\n        center: fromLonLat([0, 0]), // Center the map at [0, 0]\n        zoom: 2,\n      }),\n    });\n\n    // Add select interaction to handle click events on features\n    this.selectInteraction = new Select({\n      condition: click,\n      layers: [this.vectorLayer],\n      style: new Style({\n        stroke: new Stroke({\n          color: 'rgba(255, 255, 0, 1)',\n          width: 2,\n        }),\n      }),\n    });\n\n    this.map.addInteraction(this.selectInteraction);\n    this.selectInteraction.on('select', this.handleFeatureSelect);\n  }\n\n  handleFeatureSelect = (event) => {\n    const selectedFeatures = event.target.getFeatures();\n    if (selectedFeatures.getLength() > 0) {\n      // Zoom to the extent of the selected feature\n      this.map.getView().fit(selectedFeatures.getArray()[0].getGeometry().getExtent(), {\n        padding: [50, 50, 50, 50],\n      });\n    }\n  };\n\n  render() {\n    return <div ref={this.mapRef} className=\"map\" />;\n  }\n}\n\nexport default MapComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}