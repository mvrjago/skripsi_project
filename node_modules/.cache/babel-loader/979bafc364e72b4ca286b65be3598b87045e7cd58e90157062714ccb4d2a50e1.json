{"ast":null,"code":"/**\n * @module ol/tilecoord\n */\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord=} opt_tileCoord Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n  if (opt_tileCoord !== undefined) {\n    opt_tileCoord[0] = z;\n    opt_tileCoord[1] = x;\n    opt_tileCoord[2] = y;\n    return opt_tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  var z = tileCoord[0];\n  var x = tileCoord[1];\n  var y = tileCoord[2];\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  var extent = tileGrid.getExtent();\n  var tileRange;\n  if (!extent) {\n    tileRange = tileGrid.getFullTileRange(z);\n  } else {\n    tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n  }\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}","map":{"version":3,"names":["createOrUpdate","z","x","y","opt_tileCoord","undefined","getKeyZXY","getKey","tileCoord","fromKey","key","split","map","Number","hash","withinExtentAndZ","tileGrid","getMinZoom","getMaxZoom","extent","getExtent","tileRange","getFullTileRange","getTileRangeForExtentAndZ","containsXY"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/tilecoord.js"],"sourcesContent":["/**\n * @module ol/tilecoord\n */\n\n/**\n * An array of three numbers representing the location of a tile in a tile\n * grid. The order is `z` (zoom level), `x` (column), and `y` (row).\n * @typedef {Array<number>} TileCoord\n * @api\n */\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @param {TileCoord=} opt_tileCoord Tile coordinate.\n * @return {TileCoord} Tile coordinate.\n */\nexport function createOrUpdate(z, x, y, opt_tileCoord) {\n  if (opt_tileCoord !== undefined) {\n    opt_tileCoord[0] = z;\n    opt_tileCoord[1] = x;\n    opt_tileCoord[2] = y;\n    return opt_tileCoord;\n  } else {\n    return [z, x, y];\n  }\n}\n\n/**\n * @param {number} z Z.\n * @param {number} x X.\n * @param {number} y Y.\n * @return {string} Key.\n */\nexport function getKeyZXY(z, x, y) {\n  return z + '/' + x + '/' + y;\n}\n\n/**\n * Get the key for a tile coord.\n * @param {TileCoord} tileCoord The tile coord.\n * @return {string} Key.\n */\nexport function getKey(tileCoord) {\n  return getKeyZXY(tileCoord[0], tileCoord[1], tileCoord[2]);\n}\n\n/**\n * Get a tile coord given a key.\n * @param {string} key The tile coord key.\n * @return {TileCoord} The tile coord.\n */\nexport function fromKey(key) {\n  return key.split('/').map(Number);\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coord.\n * @return {number} Hash.\n */\nexport function hash(tileCoord) {\n  return (tileCoord[1] << tileCoord[0]) + tileCoord[2];\n}\n\n/**\n * @param {TileCoord} tileCoord Tile coordinate.\n * @param {!import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {boolean} Tile coordinate is within extent and zoom level range.\n */\nexport function withinExtentAndZ(tileCoord, tileGrid) {\n  const z = tileCoord[0];\n  const x = tileCoord[1];\n  const y = tileCoord[2];\n\n  if (tileGrid.getMinZoom() > z || z > tileGrid.getMaxZoom()) {\n    return false;\n  }\n  const extent = tileGrid.getExtent();\n  let tileRange;\n  if (!extent) {\n    tileRange = tileGrid.getFullTileRange(z);\n  } else {\n    tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n  }\n  if (!tileRange) {\n    return true;\n  } else {\n    return tileRange.containsXY(x, y);\n  }\n}\n"],"mappings":"AAAA;;;AAIA;;;;;;AAOA;;;;;;;AAOA,OAAM,SAAUA,cAAcA,CAACC,CAAC,EAAEC,CAAC,EAAEC,CAAC,EAAEC,aAAa;EACnD,IAAIA,aAAa,KAAKC,SAAS,EAAE;IAC/BD,aAAa,CAAC,CAAC,CAAC,GAAGH,CAAC;IACpBG,aAAa,CAAC,CAAC,CAAC,GAAGF,CAAC;IACpBE,aAAa,CAAC,CAAC,CAAC,GAAGD,CAAC;IACpB,OAAOC,aAAa;GACrB,MAAM;IACL,OAAO,CAACH,CAAC,EAAEC,CAAC,EAAEC,CAAC,CAAC;;AAEpB;AAEA;;;;;;AAMA,OAAM,SAAUG,SAASA,CAACL,CAAC,EAAEC,CAAC,EAAEC,CAAC;EAC/B,OAAOF,CAAC,GAAG,GAAG,GAAGC,CAAC,GAAG,GAAG,GAAGC,CAAC;AAC9B;AAEA;;;;;AAKA,OAAM,SAAUI,MAAMA,CAACC,SAAS;EAC9B,OAAOF,SAAS,CAACE,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,EAAEA,SAAS,CAAC,CAAC,CAAC,CAAC;AAC5D;AAEA;;;;;AAKA,OAAM,SAAUC,OAAOA,CAACC,GAAG;EACzB,OAAOA,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;AACnC;AAEA;;;;AAIA,OAAM,SAAUC,IAAIA,CAACN,SAAS;EAC5B,OAAO,CAACA,SAAS,CAAC,CAAC,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC,IAAIA,SAAS,CAAC,CAAC,CAAC;AACtD;AAEA;;;;;AAKA,OAAM,SAAUO,gBAAgBA,CAACP,SAAS,EAAEQ,QAAQ;EAClD,IAAMf,CAAC,GAAGO,SAAS,CAAC,CAAC,CAAC;EACtB,IAAMN,CAAC,GAAGM,SAAS,CAAC,CAAC,CAAC;EACtB,IAAML,CAAC,GAAGK,SAAS,CAAC,CAAC,CAAC;EAEtB,IAAIQ,QAAQ,CAACC,UAAU,EAAE,GAAGhB,CAAC,IAAIA,CAAC,GAAGe,QAAQ,CAACE,UAAU,EAAE,EAAE;IAC1D,OAAO,KAAK;;EAEd,IAAMC,MAAM,GAAGH,QAAQ,CAACI,SAAS,EAAE;EACnC,IAAIC,SAAS;EACb,IAAI,CAACF,MAAM,EAAE;IACXE,SAAS,GAAGL,QAAQ,CAACM,gBAAgB,CAACrB,CAAC,CAAC;GACzC,MAAM;IACLoB,SAAS,GAAGL,QAAQ,CAACO,yBAAyB,CAACJ,MAAM,EAAElB,CAAC,CAAC;;EAE3D,IAAI,CAACoB,SAAS,EAAE;IACd,OAAO,IAAI;GACZ,MAAM;IACL,OAAOA,SAAS,CAACG,UAAU,CAACtB,CAAC,EAAEC,CAAC,CAAC;;AAErC"},"metadata":{},"sourceType":"module","externalDependencies":[]}