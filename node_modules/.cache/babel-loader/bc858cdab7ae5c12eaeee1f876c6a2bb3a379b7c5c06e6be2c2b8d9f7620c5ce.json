{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport { asArray } from '../color.js';\nimport { assert } from '../asserts.js';\nimport { get as getIconImage } from './IconImage.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {Array<number>} [displacement=[0,0]] Displacement the icon\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n */\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nvar Icon = /** @class */function (_super) {\n  __extends(Icon, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function Icon(opt_options) {\n    var _this = this;\n    var options = opt_options || {};\n    /**\n     * @type {number}\n     */\n    var opacity = options.opacity !== undefined ? options.opacity : 1;\n    /**\n     * @type {number}\n     */\n    var rotation = options.rotation !== undefined ? options.rotation : 0;\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    var scale = options.scale !== undefined ? options.scale : 1;\n    /**\n     * @type {boolean}\n     */\n    var rotateWithView = options.rotateWithView !== undefined ? options.rotateWithView : false;\n    _this = _super.call(this, {\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView\n    }) || this;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.normalizedAnchor_ = null;\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    _this.anchorOrigin_ = options.anchorOrigin !== undefined ? options.anchorOrigin : IconOrigin.TOP_LEFT;\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    _this.anchorXUnits_ = options.anchorXUnits !== undefined ? options.anchorXUnits : IconAnchorUnits.FRACTION;\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    _this.anchorYUnits_ = options.anchorYUnits !== undefined ? options.anchorYUnits : IconAnchorUnits.FRACTION;\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    var image = options.img !== undefined ? options.img : null;\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    var imgSize = options.imgSize !== undefined ? options.imgSize : null;\n    /**\n     * @type {string|undefined}\n     */\n    var src = options.src;\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || image && imgSize, 5); // `imgSize` must be set when `image` is provided\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */image.src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    var imageState = options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    _this.color_ = options.color !== undefined ? asArray(options.color) : null;\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    _this.iconImage_ = getIconImage(image, /** @type {string} */src, imgSize, _this.crossOrigin_, imageState, _this.color_);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    _this.offsetOrigin_ = options.offsetOrigin !== undefined ? options.offsetOrigin : IconOrigin.TOP_LEFT;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.origin_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = options.size !== undefined ? options.size : null;\n    return _this;\n  }\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  Icon.prototype.clone = function () {\n    var scale = this.getScale();\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      crossOrigin: this.crossOrigin_,\n      color: this.color_ && this.color_.slice ? this.color_.slice() : this.color_ || undefined,\n      src: this.getSrc(),\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView()\n    });\n  };\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  Icon.prototype.getAnchor = function () {\n    if (this.normalizedAnchor_) {\n      return this.normalizedAnchor_;\n    }\n    var anchor = this.anchor_;\n    var size = this.getSize();\n    if (this.anchorXUnits_ == IconAnchorUnits.FRACTION || this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n      if (!size) {\n        return null;\n      }\n      anchor = this.anchor_.slice();\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[0] *= size[0];\n      }\n      if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[1] *= size[1];\n      }\n    }\n    if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n      if (!size) {\n        return null;\n      }\n      if (anchor === this.anchor_) {\n        anchor = this.anchor_.slice();\n      }\n      if (this.anchorOrigin_ == IconOrigin.TOP_RIGHT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[0] = -anchor[0] + size[0];\n      }\n      if (this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT || this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        anchor[1] = -anchor[1] + size[1];\n      }\n    }\n    this.normalizedAnchor_ = anchor;\n    return this.normalizedAnchor_;\n  };\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  Icon.prototype.setAnchor = function (anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  };\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  Icon.prototype.getColor = function () {\n    return this.color_;\n  };\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  Icon.prototype.getImage = function (pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  };\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ration of the image.\n   * @api\n   */\n  Icon.prototype.getPixelRatio = function (pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  Icon.prototype.getImageSize = function () {\n    return this.iconImage_.getSize();\n  };\n  /**\n   * @return {import(\"../size.js\").Size} Size of the hit-detection image.\n   */\n  Icon.prototype.getHitDetectionImageSize = function () {\n    return this.getImageSize();\n  };\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  Icon.prototype.getImageState = function () {\n    return this.iconImage_.getImageState();\n  };\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  Icon.prototype.getHitDetectionImage = function () {\n    return this.iconImage_.getHitDetectionImage();\n  };\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  Icon.prototype.getOrigin = function () {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    var offset = this.offset_;\n    var displacement = this.getDisplacement();\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      var size = this.getSize();\n      var iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (this.offsetOrigin_ == IconOrigin.TOP_RIGHT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT || this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    offset[0] += displacement[0];\n    offset[1] += displacement[1];\n    this.origin_ = offset;\n    return this.origin_;\n  };\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  Icon.prototype.getSrc = function () {\n    return this.iconImage_.getSrc();\n  };\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  Icon.prototype.getSize = function () {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  Icon.prototype.listenImageChange = function (listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  };\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  Icon.prototype.load = function () {\n    this.iconImage_.load();\n  };\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  Icon.prototype.unlistenImageChange = function (listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  };\n  return Icon;\n}(ImageStyle);\nexport default Icon;","map":{"version":3,"names":["EventType","IconAnchorUnits","IconOrigin","ImageState","ImageStyle","asArray","assert","get","getIconImage","getUid","Icon","_super","__extends","opt_options","_this","options","opacity","undefined","rotation","scale","rotateWithView","call","displacement","anchor_","anchor","normalizedAnchor_","anchorOrigin_","anchorOrigin","TOP_LEFT","anchorXUnits_","anchorXUnits","FRACTION","anchorYUnits_","anchorYUnits","crossOrigin_","crossOrigin","image","img","imgSize","src","length","imageState","IDLE","LOADED","color_","color","iconImage_","offset_","offset","offsetOrigin_","offsetOrigin","origin_","size_","size","prototype","clone","getScale","slice","getSrc","getOpacity","Array","isArray","getRotation","getRotateWithView","getAnchor","getSize","TOP_RIGHT","BOTTOM_RIGHT","BOTTOM_LEFT","setAnchor","getColor","getImage","pixelRatio","getPixelRatio","getImageSize","getHitDetectionImageSize","getImageState","getHitDetectionImage","getOrigin","getDisplacement","iconImageSize","listenImageChange","listener","addEventListener","CHANGE","load","unlistenImageChange","removeEventListener"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/style/Icon.js"],"sourcesContent":["/**\n * @module ol/style/Icon\n */\nimport EventType from '../events/EventType.js';\nimport IconAnchorUnits from './IconAnchorUnits.js';\nimport IconOrigin from './IconOrigin.js';\nimport ImageState from '../ImageState.js';\nimport ImageStyle from './Image.js';\nimport {asArray} from '../color.js';\nimport {assert} from '../asserts.js';\nimport {get as getIconImage} from './IconImage.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {Array<number>} [anchor=[0.5, 0.5]] Anchor. Default value is the icon center.\n * @property {import(\"./IconOrigin.js\").default} [anchorOrigin='top-left'] Origin of the anchor: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorXUnits='fraction'] Units in which the anchor x value is\n * specified. A value of `'fraction'` indicates the x value is a fraction of the icon. A value of `'pixels'` indicates\n * the x value in pixels.\n * @property {import(\"./IconAnchorUnits.js\").default} [anchorYUnits='fraction'] Units in which the anchor y value is\n * specified. A value of `'fraction'` indicates the y value is a fraction of the icon. A value of `'pixels'` indicates\n * the y value in pixels.\n * @property {import(\"../color.js\").Color|string} [color] Color to tint the icon. If not specified,\n * the icon will be left as is.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images. Note that you must provide a\n * `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {HTMLImageElement|HTMLCanvasElement} [img] Image object for the icon. If the `src` option is not provided then the\n * provided image must already be loaded. And in that case, it is required\n * to provide the size of the image, with the `imgSize` option.\n * @property {Array<number>} [offset=[0, 0]] Offset, which, together with the size and the offset origin, define the\n * sub-rectangle to use from the original icon image.\n * @property {Array<number>} [displacement=[0,0]] Displacement the icon\n * @property {import(\"./IconOrigin.js\").default} [offsetOrigin='top-left'] Origin of the offset: `bottom-left`, `bottom-right`,\n * `top-left` or `top-right`.\n * @property {number} [opacity=1] Opacity of the icon.\n * @property {number|import(\"../size.js\").Size} [scale=1] Scale.\n * @property {boolean} [rotateWithView=false] Whether to rotate the icon with the view.\n * @property {number} [rotation=0] Rotation in radians (positive rotation clockwise).\n * @property {import(\"../size.js\").Size} [size] Icon size in pixel. Can be used together with `offset` to define the\n * sub-rectangle to use from the origin (sprite) icon image.\n * @property {import(\"../size.js\").Size} [imgSize] Image size in pixels. Only required if `img` is set and `src` is not, and\n * for SVG images in Internet Explorer 11. The provided `imgSize` needs to match the actual size of the image.\n * @property {string} [src] Image source URI.\n */\n\n/**\n * @classdesc\n * Set icon style for vector features.\n * @api\n */\nclass Icon extends ImageStyle {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    /**\n     * @type {number}\n     */\n    const opacity = options.opacity !== undefined ? options.opacity : 1;\n\n    /**\n     * @type {number}\n     */\n    const rotation = options.rotation !== undefined ? options.rotation : 0;\n\n    /**\n     * @type {number|import(\"../size.js\").Size}\n     */\n    const scale = options.scale !== undefined ? options.scale : 1;\n\n    /**\n     * @type {boolean}\n     */\n    const rotateWithView =\n      options.rotateWithView !== undefined ? options.rotateWithView : false;\n\n    super({\n      opacity: opacity,\n      rotation: rotation,\n      scale: scale,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n      rotateWithView: rotateWithView,\n    });\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.anchor_ = options.anchor !== undefined ? options.anchor : [0.5, 0.5];\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.normalizedAnchor_ = null;\n\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.anchorOrigin_ =\n      options.anchorOrigin !== undefined\n        ? options.anchorOrigin\n        : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorXUnits_ =\n      options.anchorXUnits !== undefined\n        ? options.anchorXUnits\n        : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {import(\"./IconAnchorUnits.js\").default}\n     */\n    this.anchorYUnits_ =\n      options.anchorYUnits !== undefined\n        ? options.anchorYUnits\n        : IconAnchorUnits.FRACTION;\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    const image = options.img !== undefined ? options.img : null;\n\n    /**\n     * @type {import(\"../size.js\").Size}\n     */\n    const imgSize = options.imgSize !== undefined ? options.imgSize : null;\n\n    /**\n     * @type {string|undefined}\n     */\n    let src = options.src;\n\n    assert(!(src !== undefined && image), 4); // `image` and `src` cannot be provided at the same time\n    assert(!image || (image && imgSize), 5); // `imgSize` must be set when `image` is provided\n\n    if ((src === undefined || src.length === 0) && image) {\n      src = /** @type {HTMLImageElement} */ (image).src || getUid(image);\n    }\n    assert(src !== undefined && src.length > 0, 6); // A defined and non-empty `src` or `image` must be provided\n\n    /**\n     * @type {import(\"../ImageState.js\").default}\n     */\n    const imageState =\n      options.src !== undefined ? ImageState.IDLE : ImageState.LOADED;\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = options.color !== undefined ? asArray(options.color) : null;\n\n    /**\n     * @private\n     * @type {import(\"./IconImage.js\").default}\n     */\n    this.iconImage_ = getIconImage(\n      image,\n      /** @type {string} */ (src),\n      imgSize,\n      this.crossOrigin_,\n      imageState,\n      this.color_\n    );\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.offset_ = options.offset !== undefined ? options.offset : [0, 0];\n    /**\n     * @private\n     * @type {import(\"./IconOrigin.js\").default}\n     */\n    this.offsetOrigin_ =\n      options.offsetOrigin !== undefined\n        ? options.offsetOrigin\n        : IconOrigin.TOP_LEFT;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.origin_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = options.size !== undefined ? options.size : null;\n  }\n\n  /**\n   * Clones the style. The underlying Image/HTMLCanvasElement is not cloned.\n   * @return {Icon} The cloned style.\n   * @api\n   */\n  clone() {\n    const scale = this.getScale();\n    return new Icon({\n      anchor: this.anchor_.slice(),\n      anchorOrigin: this.anchorOrigin_,\n      anchorXUnits: this.anchorXUnits_,\n      anchorYUnits: this.anchorYUnits_,\n      crossOrigin: this.crossOrigin_,\n      color:\n        this.color_ && this.color_.slice\n          ? this.color_.slice()\n          : this.color_ || undefined,\n      src: this.getSrc(),\n      offset: this.offset_.slice(),\n      offsetOrigin: this.offsetOrigin_,\n      size: this.size_ !== null ? this.size_.slice() : undefined,\n      opacity: this.getOpacity(),\n      scale: Array.isArray(scale) ? scale.slice() : scale,\n      rotation: this.getRotation(),\n      rotateWithView: this.getRotateWithView(),\n    });\n  }\n\n  /**\n   * Get the anchor point in pixels. The anchor determines the center point for the\n   * symbolizer.\n   * @return {Array<number>} Anchor.\n   * @api\n   */\n  getAnchor() {\n    if (this.normalizedAnchor_) {\n      return this.normalizedAnchor_;\n    }\n    let anchor = this.anchor_;\n    const size = this.getSize();\n    if (\n      this.anchorXUnits_ == IconAnchorUnits.FRACTION ||\n      this.anchorYUnits_ == IconAnchorUnits.FRACTION\n    ) {\n      if (!size) {\n        return null;\n      }\n      anchor = this.anchor_.slice();\n      if (this.anchorXUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[0] *= size[0];\n      }\n      if (this.anchorYUnits_ == IconAnchorUnits.FRACTION) {\n        anchor[1] *= size[1];\n      }\n    }\n\n    if (this.anchorOrigin_ != IconOrigin.TOP_LEFT) {\n      if (!size) {\n        return null;\n      }\n      if (anchor === this.anchor_) {\n        anchor = this.anchor_.slice();\n      }\n      if (\n        this.anchorOrigin_ == IconOrigin.TOP_RIGHT ||\n        this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT\n      ) {\n        anchor[0] = -anchor[0] + size[0];\n      }\n      if (\n        this.anchorOrigin_ == IconOrigin.BOTTOM_LEFT ||\n        this.anchorOrigin_ == IconOrigin.BOTTOM_RIGHT\n      ) {\n        anchor[1] = -anchor[1] + size[1];\n      }\n    }\n    this.normalizedAnchor_ = anchor;\n    return this.normalizedAnchor_;\n  }\n\n  /**\n   * Set the anchor point. The anchor determines the center point for the\n   * symbolizer.\n   *\n   * @param {Array<number>} anchor Anchor.\n   * @api\n   */\n  setAnchor(anchor) {\n    this.anchor_ = anchor;\n    this.normalizedAnchor_ = null;\n  }\n\n  /**\n   * Get the icon color.\n   * @return {import(\"../color.js\").Color} Color.\n   * @api\n   */\n  getColor() {\n    return this.color_;\n  }\n\n  /**\n   * Get the image icon.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   * @api\n   */\n  getImage(pixelRatio) {\n    return this.iconImage_.getImage(pixelRatio);\n  }\n\n  /**\n   * Get the pixel ratio.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} The pixel ration of the image.\n   * @api\n   */\n  getPixelRatio(pixelRatio) {\n    return this.iconImage_.getPixelRatio(pixelRatio);\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getImageSize() {\n    return this.iconImage_.getSize();\n  }\n\n  /**\n   * @return {import(\"../size.js\").Size} Size of the hit-detection image.\n   */\n  getHitDetectionImageSize() {\n    return this.getImageSize();\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.iconImage_.getImageState();\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    return this.iconImage_.getHitDetectionImage();\n  }\n\n  /**\n   * Get the origin of the symbolizer.\n   * @return {Array<number>} Origin.\n   * @api\n   */\n  getOrigin() {\n    if (this.origin_) {\n      return this.origin_;\n    }\n    let offset = this.offset_;\n    const displacement = this.getDisplacement();\n\n    if (this.offsetOrigin_ != IconOrigin.TOP_LEFT) {\n      const size = this.getSize();\n      const iconImageSize = this.iconImage_.getSize();\n      if (!size || !iconImageSize) {\n        return null;\n      }\n      offset = offset.slice();\n      if (\n        this.offsetOrigin_ == IconOrigin.TOP_RIGHT ||\n        this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT\n      ) {\n        offset[0] = iconImageSize[0] - size[0] - offset[0];\n      }\n      if (\n        this.offsetOrigin_ == IconOrigin.BOTTOM_LEFT ||\n        this.offsetOrigin_ == IconOrigin.BOTTOM_RIGHT\n      ) {\n        offset[1] = iconImageSize[1] - size[1] - offset[1];\n      }\n    }\n    offset[0] += displacement[0];\n    offset[1] += displacement[1];\n    this.origin_ = offset;\n    return this.origin_;\n  }\n\n  /**\n   * Get the image URL.\n   * @return {string|undefined} Image src.\n   * @api\n   */\n  getSrc() {\n    return this.iconImage_.getSrc();\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   * @api\n   */\n  getSize() {\n    return !this.size_ ? this.iconImage_.getSize() : this.size_;\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  listenImageChange(listener) {\n    this.iconImage_.addEventListener(EventType.CHANGE, listener);\n  }\n\n  /**\n   * Load not yet loaded URI.\n   * When rendering a feature with an icon style, the vector renderer will\n   * automatically call this method. However, you might want to call this\n   * method yourself for preloading or other purposes.\n   * @api\n   */\n  load() {\n    this.iconImage_.load();\n  }\n\n  /**\n   * @param {function(import(\"../events/Event.js\").default): void} listener Listener function.\n   */\n  unlistenImageChange(listener) {\n    this.iconImage_.removeEventListener(EventType.CHANGE, listener);\n  }\n}\n\nexport default Icon;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}