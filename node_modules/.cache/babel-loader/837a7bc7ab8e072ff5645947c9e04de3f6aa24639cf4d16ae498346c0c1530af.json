{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Tile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @api\n */\nvar TileLayer = /** @class */function (_super) {\n  __extends(TileLayer, _super);\n  /**\n   * @param {import(\"./BaseTile.js\").Options=} opt_options Tile layer options.\n   */\n  function TileLayer(opt_options) {\n    return _super.call(this, opt_options) || this;\n  }\n  /**\n   * Create a renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n   * @protected\n   */\n  TileLayer.prototype.createRenderer = function () {\n    return new CanvasTileLayerRenderer(this);\n  };\n  return TileLayer;\n}(BaseTileLayer);\nexport default TileLayer;","map":{"version":3,"names":["BaseTileLayer","CanvasTileLayerRenderer","TileLayer","_super","__extends","opt_options","call","prototype","createRenderer"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/layer/Tile.js"],"sourcesContent":["/**\n * @module ol/layer/Tile\n */\nimport BaseTileLayer from './BaseTile.js';\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\n\n/**\n * @classdesc\n * For layer sources that provide pre-rendered, tiled images in grids that are\n * organized by zoom levels for specific resolutions.\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\n * property on the layer object; for example, setting `title: 'My Title'` in the\n * options means that `title` is observable, and has get/set accessors.\n *\n * @api\n */\nclass TileLayer extends BaseTileLayer {\n  /**\n   * @param {import(\"./BaseTile.js\").Options=} opt_options Tile layer options.\n   */\n  constructor(opt_options) {\n    super(opt_options);\n  }\n\n  /**\n   * Create a renderer for this layer.\n   * @return {import(\"../renderer/Layer.js\").default} A layer renderer.\n   * @protected\n   */\n  createRenderer() {\n    return new CanvasTileLayerRenderer(this);\n  }\n}\n\nexport default TileLayer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,OAAOA,aAAa,MAAM,eAAe;AACzC,OAAOC,uBAAuB,MAAM,iCAAiC;AAErE;;;;;;;;;;AAUA,IAAAC,SAAA,0BAAAC,MAAA;EAAwBC,SAAA,CAAAF,SAAA,EAAAC,MAAA;EACtB;;;EAGA,SAAAD,UAAYG,WAAW;WACrBF,MAAA,CAAAG,IAAA,OAAMD,WAAW,CAAC;EACpB;EAEA;;;;;EAKAH,SAAA,CAAAK,SAAA,CAAAC,cAAc,GAAd;IACE,OAAO,IAAIP,uBAAuB,CAAC,IAAI,CAAC;EAC1C,CAAC;EACH,OAAAC,SAAC;AAAD,CAAC,CAhBuBF,aAAa;AAkBrC,eAAeE,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}