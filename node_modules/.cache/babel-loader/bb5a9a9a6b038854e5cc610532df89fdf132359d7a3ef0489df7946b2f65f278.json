{"ast":null,"code":"/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport { DEVICE_PIXEL_RATIO } from './has.js';\nimport { apply as applyTransform, create as createTransform, multiply as multiplyTransform, scale as scaleTransform } from './transform.js';\nimport { getSquaredTolerance } from './renderer/vector.js';\nimport { getTransformFromProjections, getUserProjection } from './proj.js';\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions=} opt_options Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, opt_options) {\n  var canvas = context.canvas;\n  var options = opt_options ? opt_options : {};\n  var pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  var size = options.size;\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n  var extent = [0, 0, canvas.width, canvas.height];\n  var transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @returns {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n  var frameState = event.frameState;\n  var transform = multiplyTransform(event.inversePixelTransform.slice(), frameState.coordinateToPixelTransform);\n  var squaredTolerance = getSquaredTolerance(frameState.viewState.resolution, frameState.pixelRatio);\n  var userTransform;\n  var userProjection = getUserProjection();\n  if (userProjection) {\n    userTransform = getTransformFromProjections(userProjection, frameState.viewState.projection);\n  }\n  return new CanvasImmediateRenderer(event.context, frameState.pixelRatio, frameState.extent, transform, frameState.viewState.rotation, squaredTolerance, userTransform);\n}\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @returns {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n  var result = pixel.slice(0);\n  applyTransform(event.inversePixelTransform.slice(), result);\n  return result;\n}\n/**\n * @param {import(\"./PluggableMap.js\").FrameState} frameState Frame state.\n * @param {?} declutterTree Declutter tree.\n * @returns {?} Declutter tree.\n */\nexport function renderDeclutterItems(frameState, declutterTree) {\n  if (declutterTree) {\n    declutterTree.clear();\n  }\n  var items = frameState.declutterItems;\n  for (var z = items.length - 1; z >= 0; --z) {\n    var item = items[z];\n    var zIndexItems = item.items;\n    for (var i = 0, ii = zIndexItems.length; i < ii; i += 3) {\n      declutterTree = zIndexItems[i].renderDeclutter(zIndexItems[i + 1], zIndexItems[i + 2], item.opacity, declutterTree);\n    }\n  }\n  items.length = 0;\n  return declutterTree;\n}","map":{"version":3,"names":["CanvasImmediateRenderer","DEVICE_PIXEL_RATIO","apply","applyTransform","create","createTransform","multiply","multiplyTransform","scale","scaleTransform","getSquaredTolerance","getTransformFromProjections","getUserProjection","toContext","context","opt_options","canvas","options","pixelRatio","size","width","height","style","extent","transform","getVectorContext","event","frameState","inversePixelTransform","slice","coordinateToPixelTransform","squaredTolerance","viewState","resolution","userTransform","userProjection","projection","rotation","getRenderPixel","pixel","result","renderDeclutterItems","declutterTree","clear","items","declutterItems","z","length","item","zIndexItems","i","ii","renderDeclutter","opacity"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/render.js"],"sourcesContent":["/**\n * @module ol/render\n */\nimport CanvasImmediateRenderer from './render/canvas/Immediate.js';\nimport {DEVICE_PIXEL_RATIO} from './has.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n  multiply as multiplyTransform,\n  scale as scaleTransform,\n} from './transform.js';\nimport {getSquaredTolerance} from './renderer/vector.js';\nimport {getTransformFromProjections, getUserProjection} from './proj.js';\n\n/**\n * @typedef {Object} State\n * @property {CanvasRenderingContext2D} context Canvas context that the layer is being rendered to.\n * @property {import(\"./Feature.js\").FeatureLike} feature\n * @property {import(\"./geom/SimpleGeometry.js\").default} geometry\n * @property {number} pixelRatio Pixel ratio used by the layer renderer.\n * @property {number} resolution Resolution that the render batch was created and optimized for.\n * This is not the view's resolution that is being rendered.\n * @property {number} rotation Rotation of the rendered layer in radians.\n */\n\n/**\n * A function to be used when sorting features before rendering.\n * It takes two instances of {@link module:ol/Feature} or\n * {@link module:ol/render/Feature} and returns a `{number}`.\n *\n * @typedef {function(import(\"./Feature.js\").FeatureLike, import(\"./Feature.js\").FeatureLike):number} OrderFunction\n */\n\n/**\n * @typedef {Object} ToContextOptions\n * @property {import(\"./size.js\").Size} [size] Desired size of the canvas in css\n * pixels. When provided, both canvas and css size will be set according to the\n * `pixelRatio`. If not provided, the current canvas and css sizes will not be\n * altered.\n * @property {number} [pixelRatio=window.devicePixelRatio] Pixel ratio (canvas\n * pixel to css pixel ratio) for the canvas.\n */\n\n/**\n * Binds a Canvas Immediate API to a canvas context, to allow drawing geometries\n * to the context's canvas.\n *\n * The units for geometry coordinates are css pixels relative to the top left\n * corner of the canvas element.\n * ```js\n * import {toContext} from 'ol/render';\n * import Fill from 'ol/style/Fill';\n * import Polygon from 'ol/geom/Polygon';\n *\n * var canvas = document.createElement('canvas');\n * var render = toContext(canvas.getContext('2d'),\n *     { size: [100, 100] });\n * render.setFillStrokeStyle(new Fill({ color: blue }));\n * render.drawPolygon(\n *     new Polygon([[[0, 0], [100, 100], [100, 0], [0, 0]]]));\n * ```\n *\n * @param {CanvasRenderingContext2D} context Canvas context.\n * @param {ToContextOptions=} opt_options Options.\n * @return {CanvasImmediateRenderer} Canvas Immediate.\n * @api\n */\nexport function toContext(context, opt_options) {\n  const canvas = context.canvas;\n  const options = opt_options ? opt_options : {};\n  const pixelRatio = options.pixelRatio || DEVICE_PIXEL_RATIO;\n  const size = options.size;\n  if (size) {\n    canvas.width = size[0] * pixelRatio;\n    canvas.height = size[1] * pixelRatio;\n    canvas.style.width = size[0] + 'px';\n    canvas.style.height = size[1] + 'px';\n  }\n  const extent = [0, 0, canvas.width, canvas.height];\n  const transform = scaleTransform(createTransform(), pixelRatio, pixelRatio);\n  return new CanvasImmediateRenderer(context, pixelRatio, extent, transform, 0);\n}\n\n/**\n * Gets a vector context for drawing to the event's canvas.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @returns {CanvasImmediateRenderer} Vector context.\n * @api\n */\nexport function getVectorContext(event) {\n  const frameState = event.frameState;\n  const transform = multiplyTransform(\n    event.inversePixelTransform.slice(),\n    frameState.coordinateToPixelTransform\n  );\n  const squaredTolerance = getSquaredTolerance(\n    frameState.viewState.resolution,\n    frameState.pixelRatio\n  );\n  let userTransform;\n  const userProjection = getUserProjection();\n  if (userProjection) {\n    userTransform = getTransformFromProjections(\n      userProjection,\n      frameState.viewState.projection\n    );\n  }\n  return new CanvasImmediateRenderer(\n    event.context,\n    frameState.pixelRatio,\n    frameState.extent,\n    transform,\n    frameState.viewState.rotation,\n    squaredTolerance,\n    userTransform\n  );\n}\n\n/**\n * Gets the pixel of the event's canvas context from the map viewport's CSS pixel.\n * @param {import(\"./render/Event.js\").default} event Render event.\n * @param {import(\"./pixel.js\").Pixel} pixel CSS pixel relative to the top-left\n * corner of the map viewport.\n * @returns {import(\"./pixel.js\").Pixel} Pixel on the event's canvas context.\n * @api\n */\nexport function getRenderPixel(event, pixel) {\n  const result = pixel.slice(0);\n  applyTransform(event.inversePixelTransform.slice(), result);\n  return result;\n}\n\n/**\n * @param {import(\"./PluggableMap.js\").FrameState} frameState Frame state.\n * @param {?} declutterTree Declutter tree.\n * @returns {?} Declutter tree.\n */\nexport function renderDeclutterItems(frameState, declutterTree) {\n  if (declutterTree) {\n    declutterTree.clear();\n  }\n  const items = frameState.declutterItems;\n  for (let z = items.length - 1; z >= 0; --z) {\n    const item = items[z];\n    const zIndexItems = item.items;\n    for (let i = 0, ii = zIndexItems.length; i < ii; i += 3) {\n      declutterTree = zIndexItems[i].renderDeclutter(\n        zIndexItems[i + 1],\n        zIndexItems[i + 2],\n        item.opacity,\n        declutterTree\n      );\n    }\n  }\n  items.length = 0;\n  return declutterTree;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}