{"ast":null,"code":"/**\n * @module ol/source/IIIF\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport { CustomTile } from './Zoomify.js';\nimport { DEFAULT_TILE_SIZE } from '../tilegrid/common.js';\nimport { Versions } from '../format/IIIFInfo.js';\nimport { assert } from '../asserts.js';\nimport { getTopLeft } from '../extent.js';\nimport { toSize } from '../size.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {null|string} [crossOrigin]\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]]\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio]\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition]\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number} [zDirection=0] Indicate which resolution should be used\n * by a renderer if the view resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {\n    maximumFractionDigits: 10\n  });\n}\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nvar IIIF = /** @class */function (_super) {\n  __extends(IIIF, _super);\n  /**\n   * @param {Options=} opt_options Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  function IIIF(opt_options) {\n    var _this = this;\n    /**\n     * @type {Partial<Options>}\n     */\n    var options = opt_options || {};\n    var baseUrl = options.url || '';\n    baseUrl = baseUrl + (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === '' ? '' : '/');\n    var version = options.version || Versions.VERSION2;\n    var sizes = options.sizes || [];\n    var size = options.size;\n    assert(size != undefined && Array.isArray(size) && size.length == 2 && !isNaN(size[0]) && size[0] > 0 && !isNaN(size[1]) && size[1] > 0, 60);\n    var width = size[0];\n    var height = size[1];\n    var tileSize = options.tileSize;\n    var tilePixelRatio = options.tilePixelRatio || 1;\n    var format = options.format || 'jpg';\n    var quality = options.quality || (options.version == Versions.VERSION1 ? 'native' : 'default');\n    var resolutions = options.resolutions || [];\n    var supports = options.supports || [];\n    var extent = options.extent || [0, -height, width, 0];\n    var supportsListedSizes = sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    var supportsListedTiles = tileSize !== undefined && (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0 || Array.isArray(tileSize) && tileSize.length > 0);\n    var supportsArbitraryTiling = supports != undefined && Array.isArray(supports) && (supports.includes('regionByPx') || supports.includes('regionByPct')) && (supports.includes('sizeByWh') || supports.includes('sizeByH') || supports.includes('sizeByW') || supports.includes('sizeByPct'));\n    var tileWidth, tileHeight, maxZoom;\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (typeof tileSize === 'number' && Number.isInteger(tileSize) && tileSize > 0) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (tileSize.length == 1 || tileSize[1] == undefined && Number.isInteger(tileSize[0])) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (Number.isInteger(tileSize[0]) && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (tileSize[0] == undefined && Number.isInteger(tileSize[1])) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(Math.ceil(Math.log(width / tileWidth) / Math.LN2), Math.ceil(Math.log(height / tileHeight) / Math.LN2));\n        for (var i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        var maxScaleFactor = Math.max.apply(Math, resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        var ignoredSizesIndex = [];\n        for (var i = 0; i < sizes.length; i++) {\n          var resolution = width / sizes[i][0];\n          if (resolutions.length > 0 && resolutions[resolutions.length - 1] == resolution) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (var i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n    var tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions\n    });\n    var tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      var regionParam, sizeParam;\n      var zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      var tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (tileX === undefined || tileY === undefined || scale === undefined || tileX < 0 || Math.ceil(width / scale / tileWidth) <= tileX || tileY < 0 || Math.ceil(height / scale / tileHeight) <= tileY) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        var regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        var regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (regionX == 0 && regionW == width && regionY == 0 && regionH == height) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (!supportsArbitraryTiling || supports.includes('regionByPx')) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          var pctX = formatPercentage(regionX / width * 100),\n            pctY = formatPercentage(regionY / height * 100),\n            pctW = formatPercentage(regionW / width * 100),\n            pctH = formatPercentage(regionH / height * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (version == Versions.VERSION3 && (!supportsArbitraryTiling || supports.includes('sizeByWh'))) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          var regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format;\n    };\n    var IiifTileClass = CustomTile.bind(null, toSize(tileSize || 256).map(function (size) {\n      return size * tilePixelRatio;\n    }));\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: options.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition\n    }) || this;\n    /**\n     * @type {number}\n     */\n    _this.zDirection = options.zDirection;\n    return _this;\n  }\n  return IIIF;\n}(TileImage);\nexport default IIIF;","map":{"version":3,"names":["TileGrid","TileImage","CustomTile","DEFAULT_TILE_SIZE","Versions","assert","getTopLeft","toSize","formatPercentage","percentage","toLocaleString","maximumFractionDigits","IIIF","_super","__extends","opt_options","_this","options","baseUrl","url","lastIndexOf","length","version","VERSION2","sizes","size","undefined","Array","isArray","isNaN","width","height","tileSize","tilePixelRatio","format","quality","VERSION1","resolutions","supports","extent","supportsListedSizes","supportsListedTiles","Number","isInteger","supportsArbitraryTiling","includes","tileWidth","tileHeight","maxZoom","sort","a","b","Math","max","ceil","log","LN2","i","push","pow","maxScaleFactor","apply","round","ignoredSizesIndex","resolution","splice","tileGrid","origin","tileUrlFunction","tileCoord","pixelRatio","projection","regionParam","sizeParam","zoom","tileX","tileY","scale","regionX","regionY","regionW","regionH","sizeW","sizeH","floor","pctX","pctY","pctW","pctH","VERSION3","regionWidth","regionHeight","IiifTileClass","bind","map","call","attributions","attributionsCollapsible","cacheSize","crossOrigin","imageSmoothing","reprojectionErrorThreshold","state","tileClass","transition","zDirection"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/IIIF.js"],"sourcesContent":["/**\n * @module ol/source/IIIF\n */\n\nimport TileGrid from '../tilegrid/TileGrid.js';\nimport TileImage from './TileImage.js';\nimport {CustomTile} from './Zoomify.js';\nimport {DEFAULT_TILE_SIZE} from '../tilegrid/common.js';\nimport {Versions} from '../format/IIIFInfo.js';\nimport {assert} from '../asserts.js';\nimport {getTopLeft} from '../extent.js';\nimport {toSize} from '../size.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {null|string} [crossOrigin]\n * @property {import(\"../extent.js\").Extent} [extent=[0, -height, width, 0]]\n * @property {string} [format='jpg'] Requested image format.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {string} [quality] Requested IIIF image quality. Default is 'native'\n * for version 1, 'default' for versions 2 and 3.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {Array<number>} [resolutions] Supported resolutions as given in IIIF 'scaleFactors'\n * @property {import(\"../size.js\").Size} size Size of the image [width, height].\n * @property {Array<import(\"../size.js\").Size>} [sizes] Supported scaled image sizes.\n * Content of the IIIF info.json 'sizes' property, but as array of Size objects.\n * @property {import(\"./State.js\").default} [state] Source state.\n * @property {Array<string>} [supports=[]] Supported IIIF region and size calculation\n * features.\n * @property {number} [tilePixelRatio]\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Same tile size is used for all zoom levels. If tile size is a number,\n * a square tile is assumed. If the IIIF image service supports arbitrary\n * tiling (sizeByH, sizeByW, sizeByWh or sizeByPct as well as regionByPx or regionByPct\n * are supported), the default tilesize is 256.\n * @property {number} [transition]\n * @property {string} [url] Base URL of the IIIF Image service.\n * This should be the same as the IIIF Image ID.\n * @property {import(\"../format/IIIFInfo.js\").Versions} [version=Versions.VERSION2] Service's IIIF Image API version.\n * @property {number} [zDirection=0] Indicate which resolution should be used\n * by a renderer if the view resolution does not match any resolution of the tile source.\n * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n * will be used. If -1, the nearest higher resolution will be used.\n */\n\nfunction formatPercentage(percentage) {\n  return percentage.toLocaleString('en', {maximumFractionDigits: 10});\n}\n\n/**\n * @classdesc\n * Layer source for IIIF Image API services.\n * @api\n */\nclass IIIF extends TileImage {\n  /**\n   * @param {Options=} opt_options Tile source options. Use {@link import(\"../format/IIIFInfo.js\").IIIFInfo}\n   * to parse Image API service information responses into constructor options.\n   * @api\n   */\n  constructor(opt_options) {\n    /**\n     * @type {Partial<Options>}\n     */\n    const options = opt_options || {};\n\n    let baseUrl = options.url || '';\n    baseUrl =\n      baseUrl +\n      (baseUrl.lastIndexOf('/') === baseUrl.length - 1 || baseUrl === ''\n        ? ''\n        : '/');\n    const version = options.version || Versions.VERSION2;\n    const sizes = options.sizes || [];\n    const size = options.size;\n    assert(\n      size != undefined &&\n        Array.isArray(size) &&\n        size.length == 2 &&\n        !isNaN(size[0]) &&\n        size[0] > 0 &&\n        !isNaN(size[1]) &&\n        size[1] > 0,\n      60\n    );\n    const width = size[0];\n    const height = size[1];\n    const tileSize = options.tileSize;\n    const tilePixelRatio = options.tilePixelRatio || 1;\n    const format = options.format || 'jpg';\n    const quality =\n      options.quality ||\n      (options.version == Versions.VERSION1 ? 'native' : 'default');\n    let resolutions = options.resolutions || [];\n    const supports = options.supports || [];\n    const extent = options.extent || [0, -height, width, 0];\n\n    const supportsListedSizes =\n      sizes != undefined && Array.isArray(sizes) && sizes.length > 0;\n    const supportsListedTiles =\n      tileSize !== undefined &&\n      ((typeof tileSize === 'number' &&\n        Number.isInteger(tileSize) &&\n        tileSize > 0) ||\n        (Array.isArray(tileSize) && tileSize.length > 0));\n    const supportsArbitraryTiling =\n      supports != undefined &&\n      Array.isArray(supports) &&\n      (supports.includes('regionByPx') || supports.includes('regionByPct')) &&\n      (supports.includes('sizeByWh') ||\n        supports.includes('sizeByH') ||\n        supports.includes('sizeByW') ||\n        supports.includes('sizeByPct'));\n\n    let tileWidth, tileHeight, maxZoom;\n\n    resolutions.sort(function (a, b) {\n      return b - a;\n    });\n\n    if (supportsListedTiles || supportsArbitraryTiling) {\n      if (tileSize != undefined) {\n        if (\n          typeof tileSize === 'number' &&\n          Number.isInteger(tileSize) &&\n          tileSize > 0\n        ) {\n          tileWidth = tileSize;\n          tileHeight = tileSize;\n        } else if (Array.isArray(tileSize) && tileSize.length > 0) {\n          if (\n            tileSize.length == 1 ||\n            (tileSize[1] == undefined && Number.isInteger(tileSize[0]))\n          ) {\n            tileWidth = tileSize[0];\n            tileHeight = tileSize[0];\n          }\n          if (tileSize.length == 2) {\n            if (\n              Number.isInteger(tileSize[0]) &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[0];\n              tileHeight = tileSize[1];\n            } else if (\n              tileSize[0] == undefined &&\n              Number.isInteger(tileSize[1])\n            ) {\n              tileWidth = tileSize[1];\n              tileHeight = tileSize[1];\n            }\n          }\n        }\n      }\n      if (tileWidth === undefined || tileHeight === undefined) {\n        tileWidth = DEFAULT_TILE_SIZE;\n        tileHeight = DEFAULT_TILE_SIZE;\n      }\n      if (resolutions.length == 0) {\n        maxZoom = Math.max(\n          Math.ceil(Math.log(width / tileWidth) / Math.LN2),\n          Math.ceil(Math.log(height / tileHeight) / Math.LN2)\n        );\n        for (let i = maxZoom; i >= 0; i--) {\n          resolutions.push(Math.pow(2, i));\n        }\n      } else {\n        const maxScaleFactor = Math.max(...resolutions);\n        // TODO maxScaleFactor might not be a power to 2\n        maxZoom = Math.round(Math.log(maxScaleFactor) / Math.LN2);\n      }\n    } else {\n      // No tile support.\n      tileWidth = width;\n      tileHeight = height;\n      resolutions = [];\n      if (supportsListedSizes) {\n        /*\n         * 'sizes' provided. Use full region in different resolutions. Every\n         * resolution has only one tile.\n         */\n        sizes.sort(function (a, b) {\n          return a[0] - b[0];\n        });\n        maxZoom = -1;\n        const ignoredSizesIndex = [];\n        for (let i = 0; i < sizes.length; i++) {\n          const resolution = width / sizes[i][0];\n          if (\n            resolutions.length > 0 &&\n            resolutions[resolutions.length - 1] == resolution\n          ) {\n            ignoredSizesIndex.push(i);\n            continue;\n          }\n          resolutions.push(resolution);\n          maxZoom++;\n        }\n        if (ignoredSizesIndex.length > 0) {\n          for (let i = 0; i < ignoredSizesIndex.length; i++) {\n            sizes.splice(ignoredSizesIndex[i] - i, 1);\n          }\n        }\n      } else {\n        // No useful image information at all. Try pseudo tile with full image.\n        resolutions.push(1);\n        sizes.push([width, height]);\n        maxZoom = 0;\n      }\n    }\n\n    const tileGrid = new TileGrid({\n      tileSize: [tileWidth, tileHeight],\n      extent: extent,\n      origin: getTopLeft(extent),\n      resolutions: resolutions,\n    });\n\n    const tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n      let regionParam, sizeParam;\n      const zoom = tileCoord[0];\n      if (zoom > maxZoom) {\n        return;\n      }\n      const tileX = tileCoord[1],\n        tileY = tileCoord[2],\n        scale = resolutions[zoom];\n      if (\n        tileX === undefined ||\n        tileY === undefined ||\n        scale === undefined ||\n        tileX < 0 ||\n        Math.ceil(width / scale / tileWidth) <= tileX ||\n        tileY < 0 ||\n        Math.ceil(height / scale / tileHeight) <= tileY\n      ) {\n        return;\n      }\n      if (supportsArbitraryTiling || supportsListedTiles) {\n        const regionX = tileX * tileWidth * scale,\n          regionY = tileY * tileHeight * scale;\n        let regionW = tileWidth * scale,\n          regionH = tileHeight * scale,\n          sizeW = tileWidth,\n          sizeH = tileHeight;\n        if (regionX + regionW > width) {\n          regionW = width - regionX;\n        }\n        if (regionY + regionH > height) {\n          regionH = height - regionY;\n        }\n        if (regionX + tileWidth * scale > width) {\n          sizeW = Math.floor((width - regionX + scale - 1) / scale);\n        }\n        if (regionY + tileHeight * scale > height) {\n          sizeH = Math.floor((height - regionY + scale - 1) / scale);\n        }\n        if (\n          regionX == 0 &&\n          regionW == width &&\n          regionY == 0 &&\n          regionH == height\n        ) {\n          // canonical full image region parameter is 'full', not 'x,y,w,h'\n          regionParam = 'full';\n        } else if (\n          !supportsArbitraryTiling ||\n          supports.includes('regionByPx')\n        ) {\n          regionParam = regionX + ',' + regionY + ',' + regionW + ',' + regionH;\n        } else if (supports.includes('regionByPct')) {\n          const pctX = formatPercentage((regionX / width) * 100),\n            pctY = formatPercentage((regionY / height) * 100),\n            pctW = formatPercentage((regionW / width) * 100),\n            pctH = formatPercentage((regionH / height) * 100);\n          regionParam = 'pct:' + pctX + ',' + pctY + ',' + pctW + ',' + pctH;\n        }\n        if (\n          version == Versions.VERSION3 &&\n          (!supportsArbitraryTiling || supports.includes('sizeByWh'))\n        ) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (!supportsArbitraryTiling || supports.includes('sizeByW')) {\n          sizeParam = sizeW + ',';\n        } else if (supports.includes('sizeByH')) {\n          sizeParam = ',' + sizeH;\n        } else if (supports.includes('sizeByWh')) {\n          sizeParam = sizeW + ',' + sizeH;\n        } else if (supports.includes('sizeByPct')) {\n          sizeParam = 'pct:' + formatPercentage(100 / scale);\n        }\n      } else {\n        regionParam = 'full';\n        if (supportsListedSizes) {\n          const regionWidth = sizes[zoom][0],\n            regionHeight = sizes[zoom][1];\n          if (version == Versions.VERSION3) {\n            if (regionWidth == width && regionHeight == height) {\n              sizeParam = 'max';\n            } else {\n              sizeParam = regionWidth + ',' + regionHeight;\n            }\n          } else {\n            if (regionWidth == width) {\n              sizeParam = 'full';\n            } else {\n              sizeParam = regionWidth + ',';\n            }\n          }\n        } else {\n          sizeParam = version == Versions.VERSION3 ? 'max' : 'full';\n        }\n      }\n      return (\n        baseUrl + regionParam + '/' + sizeParam + '/0/' + quality + '.' + format\n      );\n    };\n\n    const IiifTileClass = CustomTile.bind(\n      null,\n      toSize(tileSize || 256).map(function (size) {\n        return size * tilePixelRatio;\n      })\n    );\n\n    super({\n      attributions: options.attributions,\n      attributionsCollapsible: options.attributionsCollapsible,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: options.state,\n      tileClass: IiifTileClass,\n      tileGrid: tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      tileUrlFunction: tileUrlFunction,\n      transition: options.transition,\n    });\n\n    /**\n     * @type {number}\n     */\n    this.zDirection = options.zDirection;\n  }\n}\n\nexport default IIIF;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,QAAQ,MAAM,yBAAyB;AAC9C,OAAOC,SAAS,MAAM,gBAAgB;AACtC,SAAQC,UAAU,QAAO,cAAc;AACvC,SAAQC,iBAAiB,QAAO,uBAAuB;AACvD,SAAQC,QAAQ,QAAO,uBAAuB;AAC9C,SAAQC,MAAM,QAAO,eAAe;AACpC,SAAQC,UAAU,QAAO,cAAc;AACvC,SAAQC,MAAM,QAAO,YAAY;AAEjC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA,SAASC,gBAAgBA,CAACC,UAAU;EAClC,OAAOA,UAAU,CAACC,cAAc,CAAC,IAAI,EAAE;IAACC,qBAAqB,EAAE;EAAE,CAAC,CAAC;AACrE;AAEA;;;;;AAKA,IAAAC,IAAA,0BAAAC,MAAA;EAAmBC,SAAA,CAAAF,IAAA,EAAAC,MAAA;EACjB;;;;;EAKA,SAAAD,KAAYG,WAAW;IAAvB,IAAAC,KAAA;IACE;;;IAGA,IAAMC,OAAO,GAAGF,WAAW,IAAI,EAAE;IAEjC,IAAIG,OAAO,GAAGD,OAAO,CAACE,GAAG,IAAI,EAAE;IAC/BD,OAAO,GACLA,OAAO,IACNA,OAAO,CAACE,WAAW,CAAC,GAAG,CAAC,KAAKF,OAAO,CAACG,MAAM,GAAG,CAAC,IAAIH,OAAO,KAAK,EAAE,GAC9D,EAAE,GACF,GAAG,CAAC;IACV,IAAMI,OAAO,GAAGL,OAAO,CAACK,OAAO,IAAIlB,QAAQ,CAACmB,QAAQ;IACpD,IAAMC,KAAK,GAAGP,OAAO,CAACO,KAAK,IAAI,EAAE;IACjC,IAAMC,IAAI,GAAGR,OAAO,CAACQ,IAAI;IACzBpB,MAAM,CACJoB,IAAI,IAAIC,SAAS,IACfC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IACnBA,IAAI,CAACJ,MAAM,IAAI,CAAC,IAChB,CAACQ,KAAK,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,IACfA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IACX,CAACI,KAAK,CAACJ,IAAI,CAAC,CAAC,CAAC,CAAC,IACfA,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,EACb,EAAE,CACH;IACD,IAAMK,KAAK,GAAGL,IAAI,CAAC,CAAC,CAAC;IACrB,IAAMM,MAAM,GAAGN,IAAI,CAAC,CAAC,CAAC;IACtB,IAAMO,QAAQ,GAAGf,OAAO,CAACe,QAAQ;IACjC,IAAMC,cAAc,GAAGhB,OAAO,CAACgB,cAAc,IAAI,CAAC;IAClD,IAAMC,MAAM,GAAGjB,OAAO,CAACiB,MAAM,IAAI,KAAK;IACtC,IAAMC,OAAO,GACXlB,OAAO,CAACkB,OAAO,KACdlB,OAAO,CAACK,OAAO,IAAIlB,QAAQ,CAACgC,QAAQ,GAAG,QAAQ,GAAG,SAAS,CAAC;IAC/D,IAAIC,WAAW,GAAGpB,OAAO,CAACoB,WAAW,IAAI,EAAE;IAC3C,IAAMC,QAAQ,GAAGrB,OAAO,CAACqB,QAAQ,IAAI,EAAE;IACvC,IAAMC,MAAM,GAAGtB,OAAO,CAACsB,MAAM,IAAI,CAAC,CAAC,EAAE,CAACR,MAAM,EAAED,KAAK,EAAE,CAAC,CAAC;IAEvD,IAAMU,mBAAmB,GACvBhB,KAAK,IAAIE,SAAS,IAAIC,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,IAAIA,KAAK,CAACH,MAAM,GAAG,CAAC;IAChE,IAAMoB,mBAAmB,GACvBT,QAAQ,KAAKN,SAAS,KACpB,OAAOM,QAAQ,KAAK,QAAQ,IAC5BU,MAAM,CAACC,SAAS,CAACX,QAAQ,CAAC,IAC1BA,QAAQ,GAAG,CAAC,IACXL,KAAK,CAACC,OAAO,CAACI,QAAQ,CAAC,IAAIA,QAAQ,CAACX,MAAM,GAAG,CAAE,CAAC;IACrD,IAAMuB,uBAAuB,GAC3BN,QAAQ,IAAIZ,SAAS,IACrBC,KAAK,CAACC,OAAO,CAACU,QAAQ,CAAC,KACtBA,QAAQ,CAACO,QAAQ,CAAC,YAAY,CAAC,IAAIP,QAAQ,CAACO,QAAQ,CAAC,aAAa,CAAC,CAAC,KACpEP,QAAQ,CAACO,QAAQ,CAAC,UAAU,CAAC,IAC5BP,QAAQ,CAACO,QAAQ,CAAC,SAAS,CAAC,IAC5BP,QAAQ,CAACO,QAAQ,CAAC,SAAS,CAAC,IAC5BP,QAAQ,CAACO,QAAQ,CAAC,WAAW,CAAC,CAAC;IAEnC,IAAIC,SAAS,EAAEC,UAAU,EAAEC,OAAO;IAElCX,WAAW,CAACY,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC;MAC7B,OAAOA,CAAC,GAAGD,CAAC;IACd,CAAC,CAAC;IAEF,IAAIT,mBAAmB,IAAIG,uBAAuB,EAAE;MAClD,IAAIZ,QAAQ,IAAIN,SAAS,EAAE;QACzB,IACE,OAAOM,QAAQ,KAAK,QAAQ,IAC5BU,MAAM,CAACC,SAAS,CAACX,QAAQ,CAAC,IAC1BA,QAAQ,GAAG,CAAC,EACZ;UACAc,SAAS,GAAGd,QAAQ;UACpBe,UAAU,GAAGf,QAAQ;SACtB,MAAM,IAAIL,KAAK,CAACC,OAAO,CAACI,QAAQ,CAAC,IAAIA,QAAQ,CAACX,MAAM,GAAG,CAAC,EAAE;UACzD,IACEW,QAAQ,CAACX,MAAM,IAAI,CAAC,IACnBW,QAAQ,CAAC,CAAC,CAAC,IAAIN,SAAS,IAAIgB,MAAM,CAACC,SAAS,CAACX,QAAQ,CAAC,CAAC,CAAC,CAAE,EAC3D;YACAc,SAAS,GAAGd,QAAQ,CAAC,CAAC,CAAC;YACvBe,UAAU,GAAGf,QAAQ,CAAC,CAAC,CAAC;;UAE1B,IAAIA,QAAQ,CAACX,MAAM,IAAI,CAAC,EAAE;YACxB,IACEqB,MAAM,CAACC,SAAS,CAACX,QAAQ,CAAC,CAAC,CAAC,CAAC,IAC7BU,MAAM,CAACC,SAAS,CAACX,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC7B;cACAc,SAAS,GAAGd,QAAQ,CAAC,CAAC,CAAC;cACvBe,UAAU,GAAGf,QAAQ,CAAC,CAAC,CAAC;aACzB,MAAM,IACLA,QAAQ,CAAC,CAAC,CAAC,IAAIN,SAAS,IACxBgB,MAAM,CAACC,SAAS,CAACX,QAAQ,CAAC,CAAC,CAAC,CAAC,EAC7B;cACAc,SAAS,GAAGd,QAAQ,CAAC,CAAC,CAAC;cACvBe,UAAU,GAAGf,QAAQ,CAAC,CAAC,CAAC;;;;;MAKhC,IAAIc,SAAS,KAAKpB,SAAS,IAAIqB,UAAU,KAAKrB,SAAS,EAAE;QACvDoB,SAAS,GAAG3C,iBAAiB;QAC7B4C,UAAU,GAAG5C,iBAAiB;;MAEhC,IAAIkC,WAAW,CAAChB,MAAM,IAAI,CAAC,EAAE;QAC3B2B,OAAO,GAAGI,IAAI,CAACC,GAAG,CAChBD,IAAI,CAACE,IAAI,CAACF,IAAI,CAACG,GAAG,CAACzB,KAAK,GAAGgB,SAAS,CAAC,GAAGM,IAAI,CAACI,GAAG,CAAC,EACjDJ,IAAI,CAACE,IAAI,CAACF,IAAI,CAACG,GAAG,CAACxB,MAAM,GAAGgB,UAAU,CAAC,GAAGK,IAAI,CAACI,GAAG,CAAC,CACpD;QACD,KAAK,IAAIC,CAAC,GAAGT,OAAO,EAAES,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;UACjCpB,WAAW,CAACqB,IAAI,CAACN,IAAI,CAACO,GAAG,CAAC,CAAC,EAAEF,CAAC,CAAC,CAAC;;OAEnC,MAAM;QACL,IAAMG,cAAc,GAAGR,IAAI,CAACC,GAAG,CAAAQ,KAAA,CAART,IAAI,EAAQf,WAAW,CAAC;QAC/C;QACAW,OAAO,GAAGI,IAAI,CAACU,KAAK,CAACV,IAAI,CAACG,GAAG,CAACK,cAAc,CAAC,GAAGR,IAAI,CAACI,GAAG,CAAC;;KAE5D,MAAM;MACL;MACAV,SAAS,GAAGhB,KAAK;MACjBiB,UAAU,GAAGhB,MAAM;MACnBM,WAAW,GAAG,EAAE;MAChB,IAAIG,mBAAmB,EAAE;QACvB;;;;QAIAhB,KAAK,CAACyB,IAAI,CAAC,UAAUC,CAAC,EAAEC,CAAC;UACvB,OAAOD,CAAC,CAAC,CAAC,CAAC,GAAGC,CAAC,CAAC,CAAC,CAAC;QACpB,CAAC,CAAC;QACFH,OAAO,GAAG,CAAC,CAAC;QACZ,IAAMe,iBAAiB,GAAG,EAAE;QAC5B,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjC,KAAK,CAACH,MAAM,EAAEoC,CAAC,EAAE,EAAE;UACrC,IAAMO,UAAU,GAAGlC,KAAK,GAAGN,KAAK,CAACiC,CAAC,CAAC,CAAC,CAAC,CAAC;UACtC,IACEpB,WAAW,CAAChB,MAAM,GAAG,CAAC,IACtBgB,WAAW,CAACA,WAAW,CAAChB,MAAM,GAAG,CAAC,CAAC,IAAI2C,UAAU,EACjD;YACAD,iBAAiB,CAACL,IAAI,CAACD,CAAC,CAAC;YACzB;;UAEFpB,WAAW,CAACqB,IAAI,CAACM,UAAU,CAAC;UAC5BhB,OAAO,EAAE;;QAEX,IAAIe,iBAAiB,CAAC1C,MAAM,GAAG,CAAC,EAAE;UAChC,KAAK,IAAIoC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGM,iBAAiB,CAAC1C,MAAM,EAAEoC,CAAC,EAAE,EAAE;YACjDjC,KAAK,CAACyC,MAAM,CAACF,iBAAiB,CAACN,CAAC,CAAC,GAAGA,CAAC,EAAE,CAAC,CAAC;;;OAG9C,MAAM;QACL;QACApB,WAAW,CAACqB,IAAI,CAAC,CAAC,CAAC;QACnBlC,KAAK,CAACkC,IAAI,CAAC,CAAC5B,KAAK,EAAEC,MAAM,CAAC,CAAC;QAC3BiB,OAAO,GAAG,CAAC;;;IAIf,IAAMkB,QAAQ,GAAG,IAAIlE,QAAQ,CAAC;MAC5BgC,QAAQ,EAAE,CAACc,SAAS,EAAEC,UAAU,CAAC;MACjCR,MAAM,EAAEA,MAAM;MACd4B,MAAM,EAAE7D,UAAU,CAACiC,MAAM,CAAC;MAC1BF,WAAW,EAAEA;KACd,CAAC;IAEF,IAAM+B,eAAe,GAAG,SAAAA,CAAUC,SAAS,EAAEC,UAAU,EAAEC,UAAU;MACjE,IAAIC,WAAW,EAAEC,SAAS;MAC1B,IAAMC,IAAI,GAAGL,SAAS,CAAC,CAAC,CAAC;MACzB,IAAIK,IAAI,GAAG1B,OAAO,EAAE;QAClB;;MAEF,IAAM2B,KAAK,GAAGN,SAAS,CAAC,CAAC,CAAC;QACxBO,KAAK,GAAGP,SAAS,CAAC,CAAC,CAAC;QACpBQ,KAAK,GAAGxC,WAAW,CAACqC,IAAI,CAAC;MAC3B,IACEC,KAAK,KAAKjD,SAAS,IACnBkD,KAAK,KAAKlD,SAAS,IACnBmD,KAAK,KAAKnD,SAAS,IACnBiD,KAAK,GAAG,CAAC,IACTvB,IAAI,CAACE,IAAI,CAACxB,KAAK,GAAG+C,KAAK,GAAG/B,SAAS,CAAC,IAAI6B,KAAK,IAC7CC,KAAK,GAAG,CAAC,IACTxB,IAAI,CAACE,IAAI,CAACvB,MAAM,GAAG8C,KAAK,GAAG9B,UAAU,CAAC,IAAI6B,KAAK,EAC/C;QACA;;MAEF,IAAIhC,uBAAuB,IAAIH,mBAAmB,EAAE;QAClD,IAAMqC,OAAO,GAAGH,KAAK,GAAG7B,SAAS,GAAG+B,KAAK;UACvCE,OAAO,GAAGH,KAAK,GAAG7B,UAAU,GAAG8B,KAAK;QACtC,IAAIG,OAAO,GAAGlC,SAAS,GAAG+B,KAAK;UAC7BI,OAAO,GAAGlC,UAAU,GAAG8B,KAAK;UAC5BK,KAAK,GAAGpC,SAAS;UACjBqC,KAAK,GAAGpC,UAAU;QACpB,IAAI+B,OAAO,GAAGE,OAAO,GAAGlD,KAAK,EAAE;UAC7BkD,OAAO,GAAGlD,KAAK,GAAGgD,OAAO;;QAE3B,IAAIC,OAAO,GAAGE,OAAO,GAAGlD,MAAM,EAAE;UAC9BkD,OAAO,GAAGlD,MAAM,GAAGgD,OAAO;;QAE5B,IAAID,OAAO,GAAGhC,SAAS,GAAG+B,KAAK,GAAG/C,KAAK,EAAE;UACvCoD,KAAK,GAAG9B,IAAI,CAACgC,KAAK,CAAC,CAACtD,KAAK,GAAGgD,OAAO,GAAGD,KAAK,GAAG,CAAC,IAAIA,KAAK,CAAC;;QAE3D,IAAIE,OAAO,GAAGhC,UAAU,GAAG8B,KAAK,GAAG9C,MAAM,EAAE;UACzCoD,KAAK,GAAG/B,IAAI,CAACgC,KAAK,CAAC,CAACrD,MAAM,GAAGgD,OAAO,GAAGF,KAAK,GAAG,CAAC,IAAIA,KAAK,CAAC;;QAE5D,IACEC,OAAO,IAAI,CAAC,IACZE,OAAO,IAAIlD,KAAK,IAChBiD,OAAO,IAAI,CAAC,IACZE,OAAO,IAAIlD,MAAM,EACjB;UACA;UACAyC,WAAW,GAAG,MAAM;SACrB,MAAM,IACL,CAAC5B,uBAAuB,IACxBN,QAAQ,CAACO,QAAQ,CAAC,YAAY,CAAC,EAC/B;UACA2B,WAAW,GAAGM,OAAO,GAAG,GAAG,GAAGC,OAAO,GAAG,GAAG,GAAGC,OAAO,GAAG,GAAG,GAAGC,OAAO;SACtE,MAAM,IAAI3C,QAAQ,CAACO,QAAQ,CAAC,aAAa,CAAC,EAAE;UAC3C,IAAMwC,IAAI,GAAG7E,gBAAgB,CAAEsE,OAAO,GAAGhD,KAAK,GAAI,GAAG,CAAC;YACpDwD,IAAI,GAAG9E,gBAAgB,CAAEuE,OAAO,GAAGhD,MAAM,GAAI,GAAG,CAAC;YACjDwD,IAAI,GAAG/E,gBAAgB,CAAEwE,OAAO,GAAGlD,KAAK,GAAI,GAAG,CAAC;YAChD0D,IAAI,GAAGhF,gBAAgB,CAAEyE,OAAO,GAAGlD,MAAM,GAAI,GAAG,CAAC;UACnDyC,WAAW,GAAG,MAAM,GAAGa,IAAI,GAAG,GAAG,GAAGC,IAAI,GAAG,GAAG,GAAGC,IAAI,GAAG,GAAG,GAAGC,IAAI;;QAEpE,IACElE,OAAO,IAAIlB,QAAQ,CAACqF,QAAQ,KAC3B,CAAC7C,uBAAuB,IAAIN,QAAQ,CAACO,QAAQ,CAAC,UAAU,CAAC,CAAC,EAC3D;UACA4B,SAAS,GAAGS,KAAK,GAAG,GAAG,GAAGC,KAAK;SAChC,MAAM,IAAI,CAACvC,uBAAuB,IAAIN,QAAQ,CAACO,QAAQ,CAAC,SAAS,CAAC,EAAE;UACnE4B,SAAS,GAAGS,KAAK,GAAG,GAAG;SACxB,MAAM,IAAI5C,QAAQ,CAACO,QAAQ,CAAC,SAAS,CAAC,EAAE;UACvC4B,SAAS,GAAG,GAAG,GAAGU,KAAK;SACxB,MAAM,IAAI7C,QAAQ,CAACO,QAAQ,CAAC,UAAU,CAAC,EAAE;UACxC4B,SAAS,GAAGS,KAAK,GAAG,GAAG,GAAGC,KAAK;SAChC,MAAM,IAAI7C,QAAQ,CAACO,QAAQ,CAAC,WAAW,CAAC,EAAE;UACzC4B,SAAS,GAAG,MAAM,GAAGjE,gBAAgB,CAAC,GAAG,GAAGqE,KAAK,CAAC;;OAErD,MAAM;QACLL,WAAW,GAAG,MAAM;QACpB,IAAIhC,mBAAmB,EAAE;UACvB,IAAMkD,WAAW,GAAGlE,KAAK,CAACkD,IAAI,CAAC,CAAC,CAAC,CAAC;YAChCiB,YAAY,GAAGnE,KAAK,CAACkD,IAAI,CAAC,CAAC,CAAC,CAAC;UAC/B,IAAIpD,OAAO,IAAIlB,QAAQ,CAACqF,QAAQ,EAAE;YAChC,IAAIC,WAAW,IAAI5D,KAAK,IAAI6D,YAAY,IAAI5D,MAAM,EAAE;cAClD0C,SAAS,GAAG,KAAK;aAClB,MAAM;cACLA,SAAS,GAAGiB,WAAW,GAAG,GAAG,GAAGC,YAAY;;WAE/C,MAAM;YACL,IAAID,WAAW,IAAI5D,KAAK,EAAE;cACxB2C,SAAS,GAAG,MAAM;aACnB,MAAM;cACLA,SAAS,GAAGiB,WAAW,GAAG,GAAG;;;SAGlC,MAAM;UACLjB,SAAS,GAAGnD,OAAO,IAAIlB,QAAQ,CAACqF,QAAQ,GAAG,KAAK,GAAG,MAAM;;;MAG7D,OACEvE,OAAO,GAAGsD,WAAW,GAAG,GAAG,GAAGC,SAAS,GAAG,KAAK,GAAGtC,OAAO,GAAG,GAAG,GAAGD,MAAM;IAE5E,CAAC;IAED,IAAM0D,aAAa,GAAG1F,UAAU,CAAC2F,IAAI,CACnC,IAAI,EACJtF,MAAM,CAACyB,QAAQ,IAAI,GAAG,CAAC,CAAC8D,GAAG,CAAC,UAAUrE,IAAI;MACxC,OAAOA,IAAI,GAAGQ,cAAc;IAC9B,CAAC,CAAC,CACH;IAEDjB,KAAA,GAAAH,MAAA,CAAAkF,IAAA,OAAM;MACJC,YAAY,EAAE/E,OAAO,CAAC+E,YAAY;MAClCC,uBAAuB,EAAEhF,OAAO,CAACgF,uBAAuB;MACxDC,SAAS,EAAEjF,OAAO,CAACiF,SAAS;MAC5BC,WAAW,EAAElF,OAAO,CAACkF,WAAW;MAChCC,cAAc,EAAEnF,OAAO,CAACmF,cAAc;MACtC7B,UAAU,EAAEtD,OAAO,CAACsD,UAAU;MAC9B8B,0BAA0B,EAAEpF,OAAO,CAACoF,0BAA0B;MAC9DC,KAAK,EAAErF,OAAO,CAACqF,KAAK;MACpBC,SAAS,EAAEX,aAAa;MACxB1B,QAAQ,EAAEA,QAAQ;MAClBjC,cAAc,EAAEhB,OAAO,CAACgB,cAAc;MACtCmC,eAAe,EAAEA,eAAe;MAChCoC,UAAU,EAAEvF,OAAO,CAACuF;KACrB,CAAC;IAEF;;;IAGAxF,KAAI,CAACyF,UAAU,GAAGxF,OAAO,CAACwF,UAAU;;EACtC;EACF,OAAA7F,IAAC;AAAD,CAAC,CApSkBX,SAAS;AAsS5B,eAAeW,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}