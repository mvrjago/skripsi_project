{"ast":null,"code":"/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, { createOrUpdate as createOrUpdateTileRange } from '../TileRange.js';\nimport { DEFAULT_TILE_SIZE } from './common.js';\nimport { assert } from '../asserts.js';\nimport { clamp } from '../math.js';\nimport { createOrUpdate, getTopLeft } from '../extent.js';\nimport { createOrUpdate as createOrUpdateTileCoord } from '../tilecoord.js';\nimport { isSorted, linearFindNearest } from '../array.js';\nimport { toSize } from '../size.js';\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nvar tmpTileCoord = [0, 0, 0];\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nvar TileGrid = /** @class */function () {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  function TileGrid(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(isSorted(this.resolutions_, function (a, b) {\n      return b - a;\n    }, true), 17); // `resolutions` must be sorted in descending order\n    // check if we've got a consistent zoom factor and origin\n    var zoomFactor;\n    if (!options.origins) {\n      for (var i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    var extent = options.extent;\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n    assert(!this.origin_ && this.origins_ || this.origin_ && !this.origins_, 18); // Either `origin` or `origins` must be configured, never both\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ = options.tileSize !== undefined ? options.tileSize : !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\n    assert(!this.tileSize_ && this.tileSizes_ || this.tileSize_ && !this.tileSizes_, 22); // Either `tileSize` or `tileSizes` must be configured, never both\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        var tileRange = new TileRange(Math.min(0, size[0]), Math.max(size[0] - 1, -1), Math.min(0, size[1]), Math.max(size[1] - 1, -1));\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  TileGrid.prototype.forEachTileCoord = function (extent, zoom, callback) {\n    var tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (var i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (var j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default=} opt_tileRange Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  TileGrid.prototype.forEachTileCoordParentTileRange = function (tileCoord, callback, opt_tileRange, opt_extent) {\n    var tileRange, x, y;\n    var tileCoordExtent = null;\n    var z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    }\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  };\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  TileGrid.prototype.getExtent = function () {\n    return this.extent_;\n  };\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  TileGrid.prototype.getMaxZoom = function () {\n    return this.maxZoom;\n  };\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  TileGrid.prototype.getMinZoom = function () {\n    return this.minZoom;\n  };\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  TileGrid.prototype.getOrigin = function (z) {\n    if (this.origin_) {\n      return this.origin_;\n    } else {\n      return this.origins_[z];\n    }\n  };\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  TileGrid.prototype.getResolution = function (z) {\n    return this.resolutions_[z];\n  };\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  TileGrid.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default=} opt_tileRange Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  TileGrid.prototype.getTileCoordChildTileRange = function (tileCoord, opt_tileRange, opt_extent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        var minX = tileCoord[1] * 2;\n        var minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\n      }\n      var tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n      return this.getTileRangeForExtentAndZ(tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\n    }\n    return null;\n  };\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  TileGrid.prototype.getTileRangeExtent = function (z, tileRange, opt_extent) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    var maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    var minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    var maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default=} opt_tileRange Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  TileGrid.prototype.getTileRangeForExtentAndZ = function (extent, z, opt_tileRange) {\n    var tileCoord = tmpTileCoord;\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n    var minX = tileCoord[1];\n    var minY = tileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n    return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  TileGrid.prototype.getTileCoordCenter = function (tileCoord) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution, origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution];\n  };\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  TileGrid.prototype.getTileCoordExtent = function (tileCoord, opt_extent) {\n    var origin = this.getOrigin(tileCoord[0]);\n    var resolution = this.getResolution(tileCoord[0]);\n    var tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    var minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    var minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    var maxX = minX + tileSize[0] * resolution;\n    var maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  };\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  TileGrid.prototype.getTileCoordForCoordAndResolution = function (coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\n  };\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  TileGrid.prototype.getTileCoordForXYAndResolution_ = function (x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\n    var z = this.getZForResolution(resolution);\n    var scale = resolution / this.getResolution(z);\n    var origin = this.getOrigin(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n    var adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n    var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n    var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n    var tileCoordX = scale * xFromOrigin / tileSize[0];\n    var tileCoordY = scale * yFromOrigin / tileSize[1];\n    if (reverseIntersectionPolicy) {\n      tileCoordX = Math.ceil(tileCoordX) - 1;\n      tileCoordY = Math.ceil(tileCoordY) - 1;\n    } else {\n      tileCoordX = Math.floor(tileCoordX);\n      tileCoordY = Math.floor(tileCoordY);\n    }\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  TileGrid.prototype.getTileCoordForXYAndZ_ = function (x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    var origin = this.getOrigin(z);\n    var resolution = this.getResolution(z);\n    var tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    var adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n    var adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n    var xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n    var yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n    var tileCoordX = xFromOrigin / tileSize[0];\n    var tileCoordY = yFromOrigin / tileSize[1];\n    if (reverseIntersectionPolicy) {\n      tileCoordX = Math.ceil(tileCoordX) - 1;\n      tileCoordY = Math.ceil(tileCoordY) - 1;\n    } else {\n      tileCoordX = Math.floor(tileCoordX);\n      tileCoordY = Math.floor(tileCoordY);\n    }\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  };\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  TileGrid.prototype.getTileCoordForCoordAndZ = function (coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(coordinate[0], coordinate[1], z, false, opt_tileCoord);\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  TileGrid.prototype.getTileCoordResolution = function (tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  };\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an `import(\"../size.js\").Size`, run the result through `import(\"../size.js\").Size.toSize()`.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  TileGrid.prototype.getTileSize = function (z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    } else {\n      return this.tileSizes_[z];\n    }\n  };\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n  TileGrid.prototype.getFullTileRange = function (z) {\n    if (!this.fullTileRanges_) {\n      return null;\n    } else {\n      return this.fullTileRanges_[z];\n    }\n  };\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number=} opt_direction If 0, the nearest resolution will be used.\n   *     If 1, the nearest lower resolution will be used. If -1, the nearest\n   *     higher resolution will be used. Default is 0.\n   * @return {number} Z.\n   * @api\n   */\n  TileGrid.prototype.getZForResolution = function (resolution, opt_direction) {\n    var z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\n    return clamp(z, this.minZoom, this.maxZoom);\n  };\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  TileGrid.prototype.calculateTileRanges_ = function (extent) {\n    var length = this.resolutions_.length;\n    var fullTileRanges = new Array(length);\n    for (var z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  };\n  return TileGrid;\n}();\nexport default TileGrid;","map":{"version":3,"names":["TileRange","createOrUpdate","createOrUpdateTileRange","DEFAULT_TILE_SIZE","assert","clamp","getTopLeft","createOrUpdateTileCoord","isSorted","linearFindNearest","toSize","tmpTileCoord","TileGrid","options","minZoom","undefined","resolutions_","resolutions","a","b","zoomFactor","origins","i","ii","length","zoomFactor_","maxZoom","origin_","origin","origins_","extent","tileSizes_","tileSizes","tileSize_","tileSize","extent_","fullTileRanges_","tmpSize_","sizes","map","size","z","tileRange","Math","min","max","calculateTileRanges_","prototype","forEachTileCoord","zoom","callback","getTileRangeForExtentAndZ","minX","maxX","j","minY","jj","maxY","forEachTileCoordParentTileRange","tileCoord","opt_tileRange","opt_extent","x","y","tileCoordExtent","getTileCoordExtent","floor","getExtent","getMaxZoom","getMinZoom","getOrigin","getResolution","getResolutions","getTileCoordChildTileRange","getTileRangeExtent","resolution","getTileSize","getTileCoordForXYAndZ_","getTileCoordCenter","getTileCoordForCoordAndResolution","coordinate","opt_tileCoord","getTileCoordForXYAndResolution_","reverseIntersectionPolicy","getZForResolution","scale","adjustX","adjustY","xFromOrigin","yFromOrigin","tileCoordX","tileCoordY","ceil","getTileCoordForCoordAndZ","getTileCoordResolution","getFullTileRange","opt_direction","fullTileRanges","Array"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/tilegrid/TileGrid.js"],"sourcesContent":["/**\n * @module ol/tilegrid/TileGrid\n */\nimport TileRange, {\n  createOrUpdate as createOrUpdateTileRange,\n} from '../TileRange.js';\nimport {DEFAULT_TILE_SIZE} from './common.js';\nimport {assert} from '../asserts.js';\nimport {clamp} from '../math.js';\nimport {createOrUpdate, getTopLeft} from '../extent.js';\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\nimport {isSorted, linearFindNearest} from '../array.js';\nimport {toSize} from '../size.js';\n\n/**\n * @private\n * @type {import(\"../tilecoord.js\").TileCoord}\n */\nconst tmpTileCoord = [0, 0, 0];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"../extent.js\").Extent} [extent] Extent for the tile grid. No tiles outside this\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\n * @property {number} [minZoom=0] Minimum zoom.\n * @property {import(\"../coordinate.js\").Coordinate} [origin] The tile grid origin, i.e. where the `x`\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and downwards. If not\n * specified, `extent` or `origins` must be provided.\n * @property {Array<import(\"../coordinate.js\").Coordinate>} [origins] Tile grid origins, i.e. where\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * origin. Tile coordinates increase left to right and downwards. If not specified, `extent` or\n * `origin` must be provided.\n * @property {!Array<number>} resolutions Resolutions. The array index of each resolution needs\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\n * array will have a length of `maxZoom + 1`.\n * @property {Array<import(\"../size.js\").Size>} [sizes] Number of tile rows and columns\n * of the grid for each zoom level. If specified the values\n * define each zoom level's extent together with the `origin` or `origins`.\n * A grid `extent` can be configured in addition, and will further limit the extent\n * for which tile requests are made by sources. If the bottom-left corner of\n * an extent is used as `origin` or `origins`, then the `y` value must be\n * negative because OpenLayers tile coordinates use the top left as the origin.\n * @property {number|import(\"../size.js\").Size} [tileSize] Tile size.\n * Default is `[256, 256]`.\n * @property {Array<import(\"../size.js\").Size>} [tileSizes] Tile sizes. If given, the array length\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\n * tile size.\n */\n\n/**\n * @classdesc\n * Base class for setting the grid pattern for sources accessing tiled-image\n * servers.\n * @api\n */\nclass TileGrid {\n  /**\n   * @param {Options} options Tile grid options.\n   */\n  constructor(options) {\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\n\n    /**\n     * @private\n     * @type {!Array<number>}\n     */\n    this.resolutions_ = options.resolutions;\n    assert(\n      isSorted(\n        this.resolutions_,\n        function (a, b) {\n          return b - a;\n        },\n        true\n      ),\n      17\n    ); // `resolutions` must be sorted in descending order\n\n    // check if we've got a consistent zoom factor and origin\n    let zoomFactor;\n    if (!options.origins) {\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\n        if (!zoomFactor) {\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\n        } else {\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\n            zoomFactor = undefined;\n            break;\n          }\n        }\n      }\n    }\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.zoomFactor_ = zoomFactor;\n\n    /**\n     * @protected\n     * @type {number}\n     */\n    this.maxZoom = this.resolutions_.length - 1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.origin_ = options.origin !== undefined ? options.origin : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../coordinate.js\").Coordinate>}\n     */\n    this.origins_ = null;\n    if (options.origins !== undefined) {\n      this.origins_ = options.origins;\n      assert(this.origins_.length == this.resolutions_.length, 20); // Number of `origins` and `resolutions` must be equal\n    }\n\n    const extent = options.extent;\n\n    if (extent !== undefined && !this.origin_ && !this.origins_) {\n      this.origin_ = getTopLeft(extent);\n    }\n\n    assert(\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\n      18\n    ); // Either `origin` or `origins` must be configured, never both\n\n    /**\n     * @private\n     * @type {Array<number|import(\"../size.js\").Size>}\n     */\n    this.tileSizes_ = null;\n    if (options.tileSizes !== undefined) {\n      this.tileSizes_ = options.tileSizes;\n      assert(this.tileSizes_.length == this.resolutions_.length, 19); // Number of `tileSizes` and `resolutions` must be equal\n    }\n\n    /**\n     * @private\n     * @type {number|import(\"../size.js\").Size}\n     */\n    this.tileSize_ =\n      options.tileSize !== undefined\n        ? options.tileSize\n        : !this.tileSizes_\n        ? DEFAULT_TILE_SIZE\n        : null;\n    assert(\n      (!this.tileSize_ && this.tileSizes_) ||\n        (this.tileSize_ && !this.tileSizes_),\n      22\n    ); // Either `tileSize` or `tileSizes` must be configured, never both\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.extent_ = extent !== undefined ? extent : null;\n\n    /**\n     * @private\n     * @type {Array<import(\"../TileRange.js\").default>}\n     */\n    this.fullTileRanges_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.tmpSize_ = [0, 0];\n\n    if (options.sizes !== undefined) {\n      this.fullTileRanges_ = options.sizes.map(function (size, z) {\n        const tileRange = new TileRange(\n          Math.min(0, size[0]),\n          Math.max(size[0] - 1, -1),\n          Math.min(0, size[1]),\n          Math.max(size[1] - 1, -1)\n        );\n        return tileRange;\n      }, this);\n    } else if (extent) {\n      this.calculateTileRanges_(extent);\n    }\n  }\n\n  /**\n   * Call a function with each tile coordinate for a given extent and zoom level.\n   *\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} zoom Integer zoom level.\n   * @param {function(import(\"../tilecoord.js\").TileCoord): void} callback Function called with each tile coordinate.\n   * @api\n   */\n  forEachTileCoord(extent, zoom, callback) {\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\n        callback([zoom, i, j]);\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {function(number, import(\"../TileRange.js\").default): boolean} callback Callback.\n   * @param {import(\"../TileRange.js\").default=} opt_tileRange Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Temporary import(\"../extent.js\").Extent object.\n   * @return {boolean} Callback succeeded.\n   */\n  forEachTileCoordParentTileRange(\n    tileCoord,\n    callback,\n    opt_tileRange,\n    opt_extent\n  ) {\n    let tileRange, x, y;\n    let tileCoordExtent = null;\n    let z = tileCoord[0] - 1;\n    if (this.zoomFactor_ === 2) {\n      x = tileCoord[1];\n      y = tileCoord[2];\n    } else {\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n    }\n    while (z >= this.minZoom) {\n      if (this.zoomFactor_ === 2) {\n        x = Math.floor(x / 2);\n        y = Math.floor(y / 2);\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\n      } else {\n        tileRange = this.getTileRangeForExtentAndZ(\n          tileCoordExtent,\n          z,\n          opt_tileRange\n        );\n      }\n      if (callback(z, tileRange)) {\n        return true;\n      }\n      --z;\n    }\n    return false;\n  }\n\n  /**\n   * Get the extent for this tile grid, if it was configured.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    return this.extent_;\n  }\n\n  /**\n   * Get the maximum zoom level for the grid.\n   * @return {number} Max zoom.\n   * @api\n   */\n  getMaxZoom() {\n    return this.maxZoom;\n  }\n\n  /**\n   * Get the minimum zoom level for the grid.\n   * @return {number} Min zoom.\n   * @api\n   */\n  getMinZoom() {\n    return this.minZoom;\n  }\n\n  /**\n   * Get the origin for the grid at the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {import(\"../coordinate.js\").Coordinate} Origin.\n   * @api\n   */\n  getOrigin(z) {\n    if (this.origin_) {\n      return this.origin_;\n    } else {\n      return this.origins_[z];\n    }\n  }\n\n  /**\n   * Get the resolution for the given zoom level.\n   * @param {number} z Integer zoom level.\n   * @return {number} Resolution.\n   * @api\n   */\n  getResolution(z) {\n    return this.resolutions_[z];\n  }\n\n  /**\n   * Get the list of resolutions for the tile grid.\n   * @return {Array<number>} Resolutions.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../TileRange.js\").default=} opt_tileRange Temporary import(\"../TileRange.js\").default object.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileCoordChildTileRange(tileCoord, opt_tileRange, opt_extent) {\n    if (tileCoord[0] < this.maxZoom) {\n      if (this.zoomFactor_ === 2) {\n        const minX = tileCoord[1] * 2;\n        const minY = tileCoord[2] * 2;\n        return createOrUpdateTileRange(\n          minX,\n          minX + 1,\n          minY,\n          minY + 1,\n          opt_tileRange\n        );\n      }\n      const tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\n      return this.getTileRangeForExtentAndZ(\n        tileCoordExtent,\n        tileCoord[0] + 1,\n        opt_tileRange\n      );\n    }\n    return null;\n  }\n\n  /**\n   * Get the extent for a tile range.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default} tileRange Tile range.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Temporary import(\"../extent.js\").Extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   */\n  getTileRangeExtent(z, tileRange, opt_extent) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n    const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\n    const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\n    const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\n    const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  }\n\n  /**\n   * Get a tile range for the given extent and integer zoom level.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} z Integer zoom level.\n   * @param {import(\"../TileRange.js\").default=} opt_tileRange Temporary tile range object.\n   * @return {import(\"../TileRange.js\").default} Tile range.\n   */\n  getTileRangeForExtentAndZ(extent, z, opt_tileRange) {\n    const tileCoord = tmpTileCoord;\n    this.getTileCoordForXYAndZ_(extent[0], extent[3], z, false, tileCoord);\n    const minX = tileCoord[1];\n    const minY = tileCoord[2];\n    this.getTileCoordForXYAndZ_(extent[2], extent[1], z, true, tileCoord);\n    return createOrUpdateTileRange(\n      minX,\n      tileCoord[1],\n      minY,\n      tileCoord[2],\n      opt_tileRange\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {import(\"../coordinate.js\").Coordinate} Tile center.\n   */\n  getTileCoordCenter(tileCoord) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    return [\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\n      origin[1] - (tileCoord[2] + 0.5) * tileSize[1] * resolution,\n    ];\n  }\n\n  /**\n   * Get the extent of a tile coordinate.\n   *\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../extent.js\").Extent=} opt_extent Temporary extent object.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getTileCoordExtent(tileCoord, opt_extent) {\n    const origin = this.getOrigin(tileCoord[0]);\n    const resolution = this.getResolution(tileCoord[0]);\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\n    const minY = origin[1] - (tileCoord[2] + 1) * tileSize[1] * resolution;\n    const maxX = minX + tileSize[0] * resolution;\n    const maxY = minY + tileSize[1] * resolution;\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\n  }\n\n  /**\n   * Get the tile coordinate for the given map coordinate and resolution.  This\n   * method considers that coordinates that intersect tile boundaries should be\n   * assigned the higher tile coordinate.\n   *\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\n    return this.getTileCoordForXYAndResolution_(\n      coordinate[0],\n      coordinate[1],\n      resolution,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * Note that this method should not be called for resolutions that correspond\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {number} resolution Resolution (for a non-integer zoom level).\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndResolution_(\n    x,\n    y,\n    resolution,\n    reverseIntersectionPolicy,\n    opt_tileCoord\n  ) {\n    const z = this.getZForResolution(resolution);\n    const scale = resolution / this.getResolution(z);\n    const origin = this.getOrigin(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    const adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n    const adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n    const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n    const yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n    let tileCoordX = (scale * xFromOrigin) / tileSize[0];\n    let tileCoordY = (scale * yFromOrigin) / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = Math.ceil(tileCoordX) - 1;\n      tileCoordY = Math.ceil(tileCoordY) - 1;\n    } else {\n      tileCoordX = Math.floor(tileCoordX);\n      tileCoordY = Math.floor(tileCoordY);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\n   * they should have separate implementations.  This method is for integer zoom\n   * levels.  The other method should only be called for resolutions corresponding\n   * to non-integer zoom levels.\n   * @param {number} x Map x coordinate.\n   * @param {number} y Map y coordinate.\n   * @param {number} z Integer zoom level.\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\n   *     intersections go to the higher tile coordinate, let edge intersections\n   *     go to the lower tile coordinate.\n   * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Temporary import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @private\n   */\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\n    const origin = this.getOrigin(z);\n    const resolution = this.getResolution(z);\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\n\n    const adjustX = reverseIntersectionPolicy ? 0.5 : 0;\n    const adjustY = reverseIntersectionPolicy ? 0.5 : 0;\n    const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\n    const yFromOrigin = Math.floor((origin[1] - y) / resolution + adjustY);\n    let tileCoordX = xFromOrigin / tileSize[0];\n    let tileCoordY = yFromOrigin / tileSize[1];\n\n    if (reverseIntersectionPolicy) {\n      tileCoordX = Math.ceil(tileCoordX) - 1;\n      tileCoordY = Math.ceil(tileCoordY) - 1;\n    } else {\n      tileCoordX = Math.floor(tileCoordX);\n      tileCoordY = Math.floor(tileCoordY);\n    }\n\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\n  }\n\n  /**\n   * Get a tile coordinate given a map coordinate and zoom level.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} z Zoom level.\n   * @param {import(\"../tilecoord.js\").TileCoord=} opt_tileCoord Destination import(\"../tilecoord.js\").TileCoord object.\n   * @return {import(\"../tilecoord.js\").TileCoord} Tile coordinate.\n   * @api\n   */\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\n    return this.getTileCoordForXYAndZ_(\n      coordinate[0],\n      coordinate[1],\n      z,\n      false,\n      opt_tileCoord\n    );\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @return {number} Tile resolution.\n   */\n  getTileCoordResolution(tileCoord) {\n    return this.resolutions_[tileCoord[0]];\n  }\n\n  /**\n   * Get the tile size for a zoom level. The type of the return value matches the\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\n   * get an `import(\"../size.js\").Size`, run the result through `import(\"../size.js\").Size.toSize()`.\n   * @param {number} z Z.\n   * @return {number|import(\"../size.js\").Size} Tile size.\n   * @api\n   */\n  getTileSize(z) {\n    if (this.tileSize_) {\n      return this.tileSize_;\n    } else {\n      return this.tileSizes_[z];\n    }\n  }\n\n  /**\n   * @param {number} z Zoom level.\n   * @return {import(\"../TileRange.js\").default} Extent tile range for the specified zoom level.\n   */\n  getFullTileRange(z) {\n    if (!this.fullTileRanges_) {\n      return null;\n    } else {\n      return this.fullTileRanges_[z];\n    }\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @param {number=} opt_direction If 0, the nearest resolution will be used.\n   *     If 1, the nearest lower resolution will be used. If -1, the nearest\n   *     higher resolution will be used. Default is 0.\n   * @return {number} Z.\n   * @api\n   */\n  getZForResolution(resolution, opt_direction) {\n    const z = linearFindNearest(\n      this.resolutions_,\n      resolution,\n      opt_direction || 0\n    );\n    return clamp(z, this.minZoom, this.maxZoom);\n  }\n\n  /**\n   * @param {!import(\"../extent.js\").Extent} extent Extent for this tile grid.\n   * @private\n   */\n  calculateTileRanges_(extent) {\n    const length = this.resolutions_.length;\n    const fullTileRanges = new Array(length);\n    for (let z = this.minZoom; z < length; ++z) {\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\n    }\n    this.fullTileRanges_ = fullTileRanges;\n  }\n}\n\nexport default TileGrid;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}