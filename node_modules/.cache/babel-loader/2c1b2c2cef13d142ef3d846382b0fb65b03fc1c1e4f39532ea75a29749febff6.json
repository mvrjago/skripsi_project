{"ast":null,"code":"/**\n * @module ol/source/ImageWMS\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport { DEFAULT_WMS_VERSION } from './common.js';\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport WMSServerType from './WMSServerType.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { calculateSourceResolution } from '../reproj.js';\nimport { compareVersions } from '../string.js';\nimport { containsExtent, getCenter, getForViewAndSize, getHeight, getWidth } from '../extent.js';\nimport { get as getProjection, transform } from '../proj.js';\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nvar GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageWMS = /** @class */function (_super) {\n  __extends(ImageWMS, _super);\n  /**\n   * @param {Options=} [opt_options] ImageWMS options.\n   */\n  function ImageWMS(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.v13_ = true;\n    _this.updateV13_();\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    _this.serverType_ = /** @type {import(\"./WMSServerType.js\").default|undefined} */options.serverType;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  ImageWMS.prototype.getFeatureInfoUrl = function (coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    var projectionObj = getProjection(projection);\n    var sourceProjectionObj = this.getProjection();\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, resolution);\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n    var extent = getForViewAndSize(coordinate, resolution, 0, GETFEATUREINFO_IMAGE_SIZE);\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS']\n    };\n    assign(baseParams, this.params_, params);\n    var x = Math.floor((coordinate[0] - extent[0]) / resolution);\n    var y = Math.floor((extent[3] - coordinate[1]) / resolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n    return this.getRequestUrl_(extent, GETFEATUREINFO_IMAGE_SIZE, 1, sourceProjectionObj || projectionObj, baseParams);\n  };\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  ImageWMS.prototype.getLegendUrl = function (resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    var baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png'\n    };\n    if (params === undefined || params['LAYER'] === undefined) {\n      var layers = this.params_.LAYERS;\n      var isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n    if (resolution !== undefined) {\n      var mpu = this.getProjection() ? this.getProjection().getMetersPerUnit() : 1;\n      var dpi = 25.4 / 0.28;\n      var inchesPerMeter = 39.37;\n      baseParams['SCALE'] = resolution * mpu * inchesPerMeter * dpi;\n    }\n    assign(baseParams, params);\n    return appendParams( /** @type {string} */this.url_, baseParams);\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  ImageWMS.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  ImageWMS.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    resolution = this.findNearestResolution(resolution);\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n    var imageResolution = resolution / pixelRatio;\n    var center = getCenter(extent);\n    var viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n    var viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n    var viewExtent = getForViewAndSize(center, imageResolution, 0, [viewWidth, viewHeight]);\n    var requestWidth = Math.ceil(this.ratio_ * getWidth(extent) / imageResolution);\n    var requestHeight = Math.ceil(this.ratio_ * getHeight(extent) / imageResolution);\n    var requestExtent = getForViewAndSize(center, imageResolution, 0, [requestWidth, requestHeight]);\n    var image = this.image_;\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), viewExtent)) {\n      return image;\n    }\n    var params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n    this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n    this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n    var url = this.getRequestUrl_(requestExtent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(requestExtent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  ImageWMS.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  ImageWMS.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          var dpi = 90 * pixelRatio + 0.5 | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 8); // Unknown `serverType` configured\n          break;\n      }\n    }\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n    var axisOrientation = projection.getAxisOrientation();\n    var bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n    return appendParams( /** @type {string} */this.url_, params);\n  };\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  ImageWMS.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  ImageWMS.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  ImageWMS.prototype.setUrl = function (url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  ImageWMS.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  };\n  /**\n   * @private\n   */\n  ImageWMS.prototype.updateV13_ = function () {\n    var version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  };\n  return ImageWMS;\n}(ImageSource);\nexport default ImageWMS;","map":{"version":3,"names":["DEFAULT_WMS_VERSION","EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","WMSServerType","appendParams","assert","assign","calculateSourceResolution","compareVersions","containsExtent","getCenter","getForViewAndSize","getHeight","getWidth","get","getProjection","transform","GETFEATUREINFO_IMAGE_SIZE","ImageWMS","_super","__extends","opt_options","_this","options","call","attributions","imageSmoothing","projection","resolutions","crossOrigin_","crossOrigin","undefined","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","v13_","updateV13_","serverType_","serverType","hidpi_","hidpi","image_","imageSize_","renderedRevision_","ratio_","ratio","prototype","getFeatureInfoUrl","coordinate","resolution","projectionObj","sourceProjectionObj","extent","baseParams","x","Math","floor","y","getRequestUrl_","getLegendUrl","layers","LAYERS","isSingleLayer","Array","isArray","length","mpu","getMetersPerUnit","dpi","inchesPerMeter","getParams","getImageInternal","pixelRatio","findNearestResolution","imageResolution","center","viewWidth","ceil","viewHeight","viewExtent","requestWidth","requestHeight","requestExtent","image","getRevision","getResolution","getPixelRatio","getExtent","round","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","size","getCode","GEOSERVER","MAPSERVER","CARMENTA_SERVER","QGIS","axisOrientation","getAxisOrientation","bbox","substr","join","getUrl","setImageLoadFunction","changed","setUrl","updateParams","version"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/ImageWMS.js"],"sourcesContent":["/**\n * @module ol/source/ImageWMS\n */\n\nimport {DEFAULT_WMS_VERSION} from './common.js';\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport WMSServerType from './WMSServerType.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {calculateSourceResolution} from '../reproj.js';\nimport {compareVersions} from '../string.js';\nimport {\n  containsExtent,\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n} from '../extent.js';\nimport {get as getProjection, transform} from '../proj.js';\n\n/**\n * @const\n * @type {import(\"../size.js\").Size}\n */\nconst GETFEATUREINFO_IMAGE_SIZE = [101, 101];\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"./WMSServerType.js\").default|string} [serverType] The type of\n * the remote WMS server: `mapserver`, `geoserver` or `qgis`. Only needed if `hidpi` is `true`.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} params WMS request parameters.\n * At least a `LAYERS` param is required. `STYLES` is\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport, `2` means\n * twice the width and height of the map viewport, and so on. Must be `1` or\n * higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, requests will be made for these resolutions only.\n * @property {string} url WMS service URL.\n */\n\n/**\n * @classdesc\n * Source for WMS servers providing single, untiled images.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageWMS extends ImageSource {\n  /**\n   * @param {Options=} [opt_options] ImageWMS options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.v13_ = true;\n    this.updateV13_();\n\n    /**\n     * @private\n     * @type {import(\"./WMSServerType.js\").default|undefined}\n     */\n    this.serverType_ = /** @type {import(\"./WMSServerType.js\").default|undefined} */ (options.serverType);\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\n   * constructed.\n   * @param {import(\"../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {number} resolution Resolution.\n   * @param {import(\"../proj.js\").ProjectionLike} projection Projection.\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\n   *     specified here.\n   * @return {string|undefined} GetFeatureInfo URL.\n   * @api\n   */\n  getFeatureInfoUrl(coordinate, resolution, projection, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n    const projectionObj = getProjection(projection);\n    const sourceProjectionObj = this.getProjection();\n\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\n      resolution = calculateSourceResolution(\n        sourceProjectionObj,\n        projectionObj,\n        coordinate,\n        resolution\n      );\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\n    }\n\n    const extent = getForViewAndSize(\n      coordinate,\n      resolution,\n      0,\n      GETFEATUREINFO_IMAGE_SIZE\n    );\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetFeatureInfo',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n      'QUERY_LAYERS': this.params_['LAYERS'],\n    };\n    assign(baseParams, this.params_, params);\n\n    const x = Math.floor((coordinate[0] - extent[0]) / resolution);\n    const y = Math.floor((extent[3] - coordinate[1]) / resolution);\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\n\n    return this.getRequestUrl_(\n      extent,\n      GETFEATUREINFO_IMAGE_SIZE,\n      1,\n      sourceProjectionObj || projectionObj,\n      baseParams\n    );\n  }\n\n  /**\n   * Return the GetLegendGraphic URL, optionally optimized for the passed\n   * resolution and possibly including any passed specific parameters. Returns\n   * `undefined` if the GetLegendGraphic URL cannot be constructed.\n   *\n   * @param {number} [resolution] Resolution. If set to undefined, `SCALE`\n   *     will not be calculated and included in URL.\n   * @param {Object} [params] GetLegendGraphic params. If `LAYER` is set, the\n   *     request is generated for this wms layer, else it will try to use the\n   *     configured wms layer. Default `FORMAT` is `image/png`.\n   *     `VERSION` should not be specified here.\n   * @return {string|undefined} GetLegendGraphic URL.\n   * @api\n   */\n  getLegendUrl(resolution, params) {\n    if (this.url_ === undefined) {\n      return undefined;\n    }\n\n    const baseParams = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetLegendGraphic',\n      'FORMAT': 'image/png',\n    };\n\n    if (params === undefined || params['LAYER'] === undefined) {\n      const layers = this.params_.LAYERS;\n      const isSingleLayer = !Array.isArray(layers) || layers.length === 1;\n      if (!isSingleLayer) {\n        return undefined;\n      }\n      baseParams['LAYER'] = layers;\n    }\n\n    if (resolution !== undefined) {\n      const mpu = this.getProjection()\n        ? this.getProjection().getMetersPerUnit()\n        : 1;\n      const dpi = 25.4 / 0.28;\n      const inchesPerMeter = 39.37;\n      baseParams['SCALE'] = resolution * mpu * inchesPerMeter * dpi;\n    }\n\n    assign(baseParams, params);\n\n    return appendParams(/** @type {string} */ (this.url_), baseParams);\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\n      pixelRatio = 1;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    const center = getCenter(extent);\n    const viewWidth = Math.ceil(getWidth(extent) / imageResolution);\n    const viewHeight = Math.ceil(getHeight(extent) / imageResolution);\n    const viewExtent = getForViewAndSize(center, imageResolution, 0, [\n      viewWidth,\n      viewHeight,\n    ]);\n    const requestWidth = Math.ceil(\n      (this.ratio_ * getWidth(extent)) / imageResolution\n    );\n    const requestHeight = Math.ceil(\n      (this.ratio_ * getHeight(extent)) / imageResolution\n    );\n    const requestExtent = getForViewAndSize(center, imageResolution, 0, [\n      requestWidth,\n      requestHeight,\n    ]);\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), viewExtent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'SERVICE': 'WMS',\n      'VERSION': DEFAULT_WMS_VERSION,\n      'REQUEST': 'GetMap',\n      'FORMAT': 'image/png',\n      'TRANSPARENT': true,\n    };\n    assign(params, this.params_);\n\n    this.imageSize_[0] = Math.round(getWidth(requestExtent) / imageResolution);\n    this.imageSize_[1] = Math.round(getHeight(requestExtent) / imageResolution);\n\n    const url = this.getRequestUrl_(\n      requestExtent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      requestExtent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    assert(this.url_ !== undefined, 9); // `url` must be configured or set using `#setUrl()`\n\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\n\n    if (!('STYLES' in this.params_)) {\n      params['STYLES'] = '';\n    }\n\n    if (pixelRatio != 1) {\n      switch (this.serverType_) {\n        case WMSServerType.GEOSERVER:\n          const dpi = (90 * pixelRatio + 0.5) | 0;\n          if ('FORMAT_OPTIONS' in params) {\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\n          } else {\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\n          }\n          break;\n        case WMSServerType.MAPSERVER:\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\n          break;\n        case WMSServerType.CARMENTA_SERVER:\n        case WMSServerType.QGIS:\n          params['DPI'] = 90 * pixelRatio;\n          break;\n        default:\n          assert(false, 8); // Unknown `serverType` configured\n          break;\n      }\n    }\n\n    params['WIDTH'] = size[0];\n    params['HEIGHT'] = size[1];\n\n    const axisOrientation = projection.getAxisOrientation();\n    let bbox;\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\n      bbox = [extent[1], extent[0], extent[3], extent[2]];\n    } else {\n      bbox = extent;\n    }\n    params['BBOX'] = bbox.join(',');\n\n    return appendParams(/** @type {string} */ (this.url_), params);\n  }\n\n  /**\n   * Return the URL used for this WMS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.updateV13_();\n    this.image_ = null;\n    this.changed();\n  }\n\n  /**\n   * @private\n   */\n  updateV13_() {\n    const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\n    this.v13_ = compareVersions(version, '1.3') >= 0;\n  }\n}\n\nexport default ImageWMS;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}