{"ast":null,"code":"/**\n * @module ol/source/BingMaps\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport { applyTransform, intersects } from '../extent.js';\nimport { createFromTileUrlFunctions } from '../tileurlfunction.js';\nimport { createOrUpdate } from '../tilecoord.js';\nimport { createXYZ, extentFromProjection } from '../tilegrid.js';\nimport { get as getProjection, getTransformFromProjections } from '../proj.js';\nimport { jsonp as requestJSONP } from '../net.js';\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  var z = tileCoord[0];\n  var digits = new Array(z);\n  var mask = 1 << z - 1;\n  var i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nvar TOS_ATTRIBUTION = '<a class=\"ol-attribution-bing-tos\" ' + 'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' + 'Terms of Use</a>';\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at http://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources\n */\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nvar BingMaps = /** @class */function (_super) {\n  __extends(BingMaps, _super);\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  function BingMaps(options) {\n    var _this = this;\n    var hidpi = options.hidpi !== undefined ? options.hidpi : false;\n    _this = _super.call(this, {\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      imageSmoothing: options.imageSmoothing,\n      opaque: true,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = hidpi;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.apiKey_ = options.key;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.imagerySet_ = options.imagerySet;\n    var url = 'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' + _this.imagerySet_ + '?uriScheme=https&include=ImageryProviders&key=' + _this.apiKey_ + '&c=' + _this.culture_;\n    requestJSONP(url, _this.handleImageryMetadataResponse.bind(_this), undefined, 'jsonp');\n    return _this;\n  }\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  BingMaps.prototype.getApiKey = function () {\n    return this.apiKey_;\n  };\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n  BingMaps.prototype.getImagerySet = function () {\n    return this.imagerySet_;\n  };\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n  BingMaps.prototype.handleImageryMetadataResponse = function (response) {\n    if (response.statusCode != 200 || response.statusDescription != 'OK' || response.authenticationResultCode != 'ValidCredentials' || response.resourceSets.length != 1 || response.resourceSets[0].resources.length != 1) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n    var resource = response.resourceSets[0].resources[0];\n    var maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n    var sourceProjection = this.getProjection();\n    var extent = extentFromProjection(sourceProjection);\n    var scale = this.hidpi_ ? 2 : 1;\n    var tileSize = resource.imageWidth == resource.imageHeight ? resource.imageWidth / scale : [resource.imageWidth / scale, resource.imageHeight / scale];\n    var tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize\n    });\n    this.tileGrid = tileGrid;\n    var culture = this.culture_;\n    var hidpi = this.hidpi_;\n    this.tileUrlFunction = createFromTileUrlFunctions(resource.imageUrlSubdomains.map(function (subdomain) {\n      /** @type {import('../tilecoord.js').TileCoord} */\n      var quadKeyTileCoord = [0, 0, 0];\n      var imageUrl = resource.imageUrl.replace('{subdomain}', subdomain).replace('{culture}', culture);\n      return (\n        /**\n         * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n         * @param {number} pixelRatio Pixel ratio.\n         * @param {import(\"../proj/Projection.js\").default} projection Projection.\n         * @return {string|undefined} Tile URL.\n         */\n        function (tileCoord, pixelRatio, projection) {\n          if (!tileCoord) {\n            return undefined;\n          } else {\n            createOrUpdate(tileCoord[0], tileCoord[1], tileCoord[2], quadKeyTileCoord);\n            var url = imageUrl;\n            if (hidpi) {\n              url += '&dpi=d1&device=mobile';\n            }\n            return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\n          }\n        }\n      );\n    }));\n    if (resource.imageryProviders) {\n      var transform_1 = getTransformFromProjections(getProjection('EPSG:4326'), this.getProjection());\n      this.setAttributions(function (frameState) {\n        var attributions = [];\n        var viewState = frameState.viewState;\n        var tileGrid = this.getTileGrid();\n        var z = tileGrid.getZForResolution(viewState.resolution, this.zDirection);\n        var tileCoord = tileGrid.getTileCoordForCoordAndZ(viewState.center, z);\n        var zoom = tileCoord[0];\n        resource.imageryProviders.map(function (imageryProvider) {\n          var intersecting = false;\n          var coverageAreas = imageryProvider.coverageAreas;\n          for (var i = 0, ii = coverageAreas.length; i < ii; ++i) {\n            var coverageArea = coverageAreas[i];\n            if (zoom >= coverageArea.zoomMin && zoom <= coverageArea.zoomMax) {\n              var bbox = coverageArea.bbox;\n              var epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n              var extent_1 = applyTransform(epsg4326Extent, transform_1);\n              if (intersects(extent_1, frameState.extent)) {\n                intersecting = true;\n                break;\n              }\n            }\n          }\n          if (intersecting) {\n            attributions.push(imageryProvider.attribution);\n          }\n        });\n        attributions.push(TOS_ATTRIBUTION);\n        return attributions;\n      }.bind(this));\n    }\n    this.setState(SourceState.READY);\n  };\n  return BingMaps;\n}(TileImage);\nexport default BingMaps;","map":{"version":3,"names":["SourceState","TileImage","applyTransform","intersects","createFromTileUrlFunctions","createOrUpdate","createXYZ","extentFromProjection","get","getProjection","getTransformFromProjections","jsonp","requestJSONP","quadKey","tileCoord","z","digits","Array","mask","i","charCode","String","fromCharCode","join","TOS_ATTRIBUTION","BingMaps","_super","__extends","options","_this","hidpi","undefined","call","cacheSize","crossOrigin","imageSmoothing","opaque","projection","reprojectionErrorThreshold","state","LOADING","tileLoadFunction","tilePixelRatio","wrapX","transition","hidpi_","culture_","culture","maxZoom_","maxZoom","apiKey_","key","imagerySet_","imagerySet","url","handleImageryMetadataResponse","bind","prototype","getApiKey","getImagerySet","response","statusCode","statusDescription","authenticationResultCode","resourceSets","length","resources","setState","ERROR","resource","zoomMax","sourceProjection","extent","scale","tileSize","imageWidth","imageHeight","tileGrid","minZoom","zoomMin","tileUrlFunction","imageUrlSubdomains","map","subdomain","quadKeyTileCoord","imageUrl","replace","pixelRatio","imageryProviders","transform_1","setAttributions","frameState","attributions","viewState","getTileGrid","getZForResolution","resolution","zDirection","getTileCoordForCoordAndZ","center","zoom","imageryProvider","intersecting","coverageAreas","ii","coverageArea","bbox","epsg4326Extent","extent_1","push","attribution","READY"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/BingMaps.js"],"sourcesContent":["/**\n * @module ol/source/BingMaps\n */\n\nimport SourceState from './State.js';\nimport TileImage from './TileImage.js';\nimport {applyTransform, intersects} from '../extent.js';\nimport {createFromTileUrlFunctions} from '../tileurlfunction.js';\nimport {createOrUpdate} from '../tilecoord.js';\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\nimport {jsonp as requestJSONP} from '../net.js';\n\n/**\n * @param {import('../tilecoord.js').TileCoord} tileCoord Tile coord.\n * @return {string} Quad key.\n */\nexport function quadKey(tileCoord) {\n  const z = tileCoord[0];\n  const digits = new Array(z);\n  let mask = 1 << (z - 1);\n  let i, charCode;\n  for (i = 0; i < z; ++i) {\n    // 48 is charCode for 0 - '0'.charCodeAt(0)\n    charCode = 48;\n    if (tileCoord[1] & mask) {\n      charCode += 1;\n    }\n    if (tileCoord[2] & mask) {\n      charCode += 2;\n    }\n    digits[i] = String.fromCharCode(charCode);\n    mask >>= 1;\n  }\n  return digits.join('');\n}\n\n/**\n * The attribution containing a link to the Microsoft® Bing™ Maps Platform APIs’\n * Terms Of Use.\n * @const\n * @type {string}\n */\nconst TOS_ATTRIBUTION =\n  '<a class=\"ol-attribution-bing-tos\" ' +\n  'href=\"https://www.microsoft.com/maps/product/terms.html\" target=\"_blank\">' +\n  'Terms of Use</a>';\n\n/**\n * @typedef {Object} Options\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {boolean} [hidpi=false] If `true` hidpi tiles will be requested.\n * @property {string} [culture='en-us'] Culture code.\n * @property {string} key Bing Maps API key. Get yours at http://www.bingmapsportal.com/.\n * @property {string} imagerySet Type of imagery.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {number} [maxZoom=21] Max zoom. Default is what's advertized by the BingMaps service.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.\n * To disable the opacity transition, pass `transition: 0`.\n */\n\n/**\n * @typedef {Object} BingMapsImageryMetadataResponse\n * @property {number} statusCode The response status code\n * @property {string} statusDescription The response status description\n * @property {string} authenticationResultCode The authentication result code\n * @property {Array<ResourceSet>} resourceSets The array of resource sets\n */\n\n/**\n * @typedef {Object} ResourceSet\n * @property {Array<Resource>} resources\n */\n\n/**\n * @typedef {Object} Resource\n * @property {number} imageHeight The image height\n * @property {number} imageWidth The image width\n * @property {number} zoomMin The minimum zoom level\n * @property {number} zoomMax The maximum zoom level\n * @property {string} imageUrl The image URL\n * @property {Array<string>} imageUrlSubdomains The image URL subdomains for rotation\n * @property {Array<ImageryProvider>} [imageryProviders] The array of ImageryProviders\n */\n\n/**\n * @typedef {Object} ImageryProvider\n * @property {Array<CoverageArea>} coverageAreas The coverage areas\n * @property {string} [attribution] The attribution\n */\n\n/**\n * @typedef {Object} CoverageArea\n * @property {number} zoomMin The minimum zoom\n * @property {number} zoomMax The maximum zoom\n * @property {Array<number>} bbox The coverage bounding box\n */\n\n/**\n * @classdesc\n * Layer source for Bing Maps tile data.\n * @api\n */\nclass BingMaps extends TileImage {\n  /**\n   * @param {Options} options Bing Maps options.\n   */\n  constructor(options) {\n    const hidpi = options.hidpi !== undefined ? options.hidpi : false;\n\n    super({\n      cacheSize: options.cacheSize,\n      crossOrigin: 'anonymous',\n      imageSmoothing: options.imageSmoothing,\n      opaque: true,\n      projection: getProjection('EPSG:3857'),\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      state: SourceState.LOADING,\n      tileLoadFunction: options.tileLoadFunction,\n      tilePixelRatio: hidpi ? 2 : 1,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = hidpi;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.culture_ = options.culture !== undefined ? options.culture : 'en-us';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxZoom_ = options.maxZoom !== undefined ? options.maxZoom : -1;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.apiKey_ = options.key;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.imagerySet_ = options.imagerySet;\n\n    const url =\n      'https://dev.virtualearth.net/REST/v1/Imagery/Metadata/' +\n      this.imagerySet_ +\n      '?uriScheme=https&include=ImageryProviders&key=' +\n      this.apiKey_ +\n      '&c=' +\n      this.culture_;\n\n    requestJSONP(\n      url,\n      this.handleImageryMetadataResponse.bind(this),\n      undefined,\n      'jsonp'\n    );\n  }\n\n  /**\n   * Get the api key used for this source.\n   *\n   * @return {string} The api key.\n   * @api\n   */\n  getApiKey() {\n    return this.apiKey_;\n  }\n\n  /**\n   * Get the imagery set associated with this source.\n   *\n   * @return {string} The imagery set.\n   * @api\n   */\n  getImagerySet() {\n    return this.imagerySet_;\n  }\n\n  /**\n   * @param {BingMapsImageryMetadataResponse} response Response.\n   */\n  handleImageryMetadataResponse(response) {\n    if (\n      response.statusCode != 200 ||\n      response.statusDescription != 'OK' ||\n      response.authenticationResultCode != 'ValidCredentials' ||\n      response.resourceSets.length != 1 ||\n      response.resourceSets[0].resources.length != 1\n    ) {\n      this.setState(SourceState.ERROR);\n      return;\n    }\n\n    const resource = response.resourceSets[0].resources[0];\n    const maxZoom = this.maxZoom_ == -1 ? resource.zoomMax : this.maxZoom_;\n\n    const sourceProjection = this.getProjection();\n    const extent = extentFromProjection(sourceProjection);\n    const scale = this.hidpi_ ? 2 : 1;\n    const tileSize =\n      resource.imageWidth == resource.imageHeight\n        ? resource.imageWidth / scale\n        : [resource.imageWidth / scale, resource.imageHeight / scale];\n\n    const tileGrid = createXYZ({\n      extent: extent,\n      minZoom: resource.zoomMin,\n      maxZoom: maxZoom,\n      tileSize: tileSize,\n    });\n    this.tileGrid = tileGrid;\n\n    const culture = this.culture_;\n    const hidpi = this.hidpi_;\n    this.tileUrlFunction = createFromTileUrlFunctions(\n      resource.imageUrlSubdomains.map(function (subdomain) {\n        /** @type {import('../tilecoord.js').TileCoord} */\n        const quadKeyTileCoord = [0, 0, 0];\n        const imageUrl = resource.imageUrl\n          .replace('{subdomain}', subdomain)\n          .replace('{culture}', culture);\n        return (\n          /**\n           * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n           * @param {number} pixelRatio Pixel ratio.\n           * @param {import(\"../proj/Projection.js\").default} projection Projection.\n           * @return {string|undefined} Tile URL.\n           */\n          function (tileCoord, pixelRatio, projection) {\n            if (!tileCoord) {\n              return undefined;\n            } else {\n              createOrUpdate(\n                tileCoord[0],\n                tileCoord[1],\n                tileCoord[2],\n                quadKeyTileCoord\n              );\n              let url = imageUrl;\n              if (hidpi) {\n                url += '&dpi=d1&device=mobile';\n              }\n              return url.replace('{quadkey}', quadKey(quadKeyTileCoord));\n            }\n          }\n        );\n      })\n    );\n\n    if (resource.imageryProviders) {\n      const transform = getTransformFromProjections(\n        getProjection('EPSG:4326'),\n        this.getProjection()\n      );\n\n      this.setAttributions(\n        function (frameState) {\n          const attributions = [];\n          const viewState = frameState.viewState;\n          const tileGrid = this.getTileGrid();\n          const z = tileGrid.getZForResolution(\n            viewState.resolution,\n            this.zDirection\n          );\n          const tileCoord = tileGrid.getTileCoordForCoordAndZ(\n            viewState.center,\n            z\n          );\n          const zoom = tileCoord[0];\n          resource.imageryProviders.map(function (imageryProvider) {\n            let intersecting = false;\n            const coverageAreas = imageryProvider.coverageAreas;\n            for (let i = 0, ii = coverageAreas.length; i < ii; ++i) {\n              const coverageArea = coverageAreas[i];\n              if (\n                zoom >= coverageArea.zoomMin &&\n                zoom <= coverageArea.zoomMax\n              ) {\n                const bbox = coverageArea.bbox;\n                const epsg4326Extent = [bbox[1], bbox[0], bbox[3], bbox[2]];\n                const extent = applyTransform(epsg4326Extent, transform);\n                if (intersects(extent, frameState.extent)) {\n                  intersecting = true;\n                  break;\n                }\n              }\n            }\n            if (intersecting) {\n              attributions.push(imageryProvider.attribution);\n            }\n          });\n\n          attributions.push(TOS_ATTRIBUTION);\n          return attributions;\n        }.bind(this)\n      );\n    }\n\n    this.setState(SourceState.READY);\n  }\n}\n\nexport default BingMaps;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,WAAW,MAAM,YAAY;AACpC,OAAOC,SAAS,MAAM,gBAAgB;AACtC,SAAQC,cAAc,EAAEC,UAAU,QAAO,cAAc;AACvD,SAAQC,0BAA0B,QAAO,uBAAuB;AAChE,SAAQC,cAAc,QAAO,iBAAiB;AAC9C,SAAQC,SAAS,EAAEC,oBAAoB,QAAO,gBAAgB;AAC9D,SAAQC,GAAG,IAAIC,aAAa,EAAEC,2BAA2B,QAAO,YAAY;AAC5E,SAAQC,KAAK,IAAIC,YAAY,QAAO,WAAW;AAE/C;;;;AAIA,OAAM,SAAUC,OAAOA,CAACC,SAAS;EAC/B,IAAMC,CAAC,GAAGD,SAAS,CAAC,CAAC,CAAC;EACtB,IAAME,MAAM,GAAG,IAAIC,KAAK,CAACF,CAAC,CAAC;EAC3B,IAAIG,IAAI,GAAG,CAAC,IAAKH,CAAC,GAAG,CAAE;EACvB,IAAII,CAAC,EAAEC,QAAQ;EACf,KAAKD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,CAAC,EAAE,EAAEI,CAAC,EAAE;IACtB;IACAC,QAAQ,GAAG,EAAE;IACb,IAAIN,SAAS,CAAC,CAAC,CAAC,GAAGI,IAAI,EAAE;MACvBE,QAAQ,IAAI,CAAC;;IAEf,IAAIN,SAAS,CAAC,CAAC,CAAC,GAAGI,IAAI,EAAE;MACvBE,QAAQ,IAAI,CAAC;;IAEfJ,MAAM,CAACG,CAAC,CAAC,GAAGE,MAAM,CAACC,YAAY,CAACF,QAAQ,CAAC;IACzCF,IAAI,KAAK,CAAC;;EAEZ,OAAOF,MAAM,CAACO,IAAI,CAAC,EAAE,CAAC;AACxB;AAEA;;;;;;AAMA,IAAMC,eAAe,GACnB,qCAAqC,GACrC,2EAA2E,GAC3E,kBAAkB;AAEpB;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;AAQA;;;;AAKA;;;;;;;;;;AAWA;;;;;AAMA;;;;;;AAOA;;;;;AAKA,IAAAC,QAAA,0BAAAC,MAAA;EAAuBC,SAAA,CAAAF,QAAA,EAAAC,MAAA;EACrB;;;EAGA,SAAAD,SAAYG,OAAO;IAAnB,IAAAC,KAAA;IACE,IAAMC,KAAK,GAAGF,OAAO,CAACE,KAAK,KAAKC,SAAS,GAAGH,OAAO,CAACE,KAAK,GAAG,KAAK;IAEjED,KAAA,GAAAH,MAAA,CAAAM,IAAA,OAAM;MACJC,SAAS,EAAEL,OAAO,CAACK,SAAS;MAC5BC,WAAW,EAAE,WAAW;MACxBC,cAAc,EAAEP,OAAO,CAACO,cAAc;MACtCC,MAAM,EAAE,IAAI;MACZC,UAAU,EAAE5B,aAAa,CAAC,WAAW,CAAC;MACtC6B,0BAA0B,EAAEV,OAAO,CAACU,0BAA0B;MAC9DC,KAAK,EAAEvC,WAAW,CAACwC,OAAO;MAC1BC,gBAAgB,EAAEb,OAAO,CAACa,gBAAgB;MAC1CC,cAAc,EAAEZ,KAAK,GAAG,CAAC,GAAG,CAAC;MAC7Ba,KAAK,EAAEf,OAAO,CAACe,KAAK,KAAKZ,SAAS,GAAGH,OAAO,CAACe,KAAK,GAAG,IAAI;MACzDC,UAAU,EAAEhB,OAAO,CAACgB;KACrB,CAAC;IAEF;;;;IAIAf,KAAI,CAACgB,MAAM,GAAGf,KAAK;IAEnB;;;;IAIAD,KAAI,CAACiB,QAAQ,GAAGlB,OAAO,CAACmB,OAAO,KAAKhB,SAAS,GAAGH,OAAO,CAACmB,OAAO,GAAG,OAAO;IAEzE;;;;IAIAlB,KAAI,CAACmB,QAAQ,GAAGpB,OAAO,CAACqB,OAAO,KAAKlB,SAAS,GAAGH,OAAO,CAACqB,OAAO,GAAG,CAAC,CAAC;IAEpE;;;;IAIApB,KAAI,CAACqB,OAAO,GAAGtB,OAAO,CAACuB,GAAG;IAE1B;;;;IAIAtB,KAAI,CAACuB,WAAW,GAAGxB,OAAO,CAACyB,UAAU;IAErC,IAAMC,GAAG,GACP,wDAAwD,GACxDzB,KAAI,CAACuB,WAAW,GAChB,gDAAgD,GAChDvB,KAAI,CAACqB,OAAO,GACZ,KAAK,GACLrB,KAAI,CAACiB,QAAQ;IAEflC,YAAY,CACV0C,GAAG,EACHzB,KAAI,CAAC0B,6BAA6B,CAACC,IAAI,CAAC3B,KAAI,CAAC,EAC7CE,SAAS,EACT,OAAO,CACR;;EACH;EAEA;;;;;;EAMAN,QAAA,CAAAgC,SAAA,CAAAC,SAAS,GAAT;IACE,OAAO,IAAI,CAACR,OAAO;EACrB,CAAC;EAED;;;;;;EAMAzB,QAAA,CAAAgC,SAAA,CAAAE,aAAa,GAAb;IACE,OAAO,IAAI,CAACP,WAAW;EACzB,CAAC;EAED;;;EAGA3B,QAAA,CAAAgC,SAAA,CAAAF,6BAA6B,GAA7B,UAA8BK,QAAQ;IACpC,IACEA,QAAQ,CAACC,UAAU,IAAI,GAAG,IAC1BD,QAAQ,CAACE,iBAAiB,IAAI,IAAI,IAClCF,QAAQ,CAACG,wBAAwB,IAAI,kBAAkB,IACvDH,QAAQ,CAACI,YAAY,CAACC,MAAM,IAAI,CAAC,IACjCL,QAAQ,CAACI,YAAY,CAAC,CAAC,CAAC,CAACE,SAAS,CAACD,MAAM,IAAI,CAAC,EAC9C;MACA,IAAI,CAACE,QAAQ,CAACnE,WAAW,CAACoE,KAAK,CAAC;MAChC;;IAGF,IAAMC,QAAQ,GAAGT,QAAQ,CAACI,YAAY,CAAC,CAAC,CAAC,CAACE,SAAS,CAAC,CAAC,CAAC;IACtD,IAAMjB,OAAO,GAAG,IAAI,CAACD,QAAQ,IAAI,CAAC,CAAC,GAAGqB,QAAQ,CAACC,OAAO,GAAG,IAAI,CAACtB,QAAQ;IAEtE,IAAMuB,gBAAgB,GAAG,IAAI,CAAC9D,aAAa,EAAE;IAC7C,IAAM+D,MAAM,GAAGjE,oBAAoB,CAACgE,gBAAgB,CAAC;IACrD,IAAME,KAAK,GAAG,IAAI,CAAC5B,MAAM,GAAG,CAAC,GAAG,CAAC;IACjC,IAAM6B,QAAQ,GACZL,QAAQ,CAACM,UAAU,IAAIN,QAAQ,CAACO,WAAW,GACvCP,QAAQ,CAACM,UAAU,GAAGF,KAAK,GAC3B,CAACJ,QAAQ,CAACM,UAAU,GAAGF,KAAK,EAAEJ,QAAQ,CAACO,WAAW,GAAGH,KAAK,CAAC;IAEjE,IAAMI,QAAQ,GAAGvE,SAAS,CAAC;MACzBkE,MAAM,EAAEA,MAAM;MACdM,OAAO,EAAET,QAAQ,CAACU,OAAO;MACzB9B,OAAO,EAAEA,OAAO;MAChByB,QAAQ,EAAEA;KACX,CAAC;IACF,IAAI,CAACG,QAAQ,GAAGA,QAAQ;IAExB,IAAM9B,OAAO,GAAG,IAAI,CAACD,QAAQ;IAC7B,IAAMhB,KAAK,GAAG,IAAI,CAACe,MAAM;IACzB,IAAI,CAACmC,eAAe,GAAG5E,0BAA0B,CAC/CiE,QAAQ,CAACY,kBAAkB,CAACC,GAAG,CAAC,UAAUC,SAAS;MACjD;MACA,IAAMC,gBAAgB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAClC,IAAMC,QAAQ,GAAGhB,QAAQ,CAACgB,QAAQ,CAC/BC,OAAO,CAAC,aAAa,EAAEH,SAAS,CAAC,CACjCG,OAAO,CAAC,WAAW,EAAEvC,OAAO,CAAC;MAChC;QACE;;;;;;QAMA,UAAUjC,SAAS,EAAEyE,UAAU,EAAElD,UAAU;UACzC,IAAI,CAACvB,SAAS,EAAE;YACd,OAAOiB,SAAS;WACjB,MAAM;YACL1B,cAAc,CACZS,SAAS,CAAC,CAAC,CAAC,EACZA,SAAS,CAAC,CAAC,CAAC,EACZA,SAAS,CAAC,CAAC,CAAC,EACZsE,gBAAgB,CACjB;YACD,IAAI9B,GAAG,GAAG+B,QAAQ;YAClB,IAAIvD,KAAK,EAAE;cACTwB,GAAG,IAAI,uBAAuB;;YAEhC,OAAOA,GAAG,CAACgC,OAAO,CAAC,WAAW,EAAEzE,OAAO,CAACuE,gBAAgB,CAAC,CAAC;;QAE9D;MAAC;IAEL,CAAC,CAAC,CACH;IAED,IAAIf,QAAQ,CAACmB,gBAAgB,EAAE;MAC7B,IAAMC,WAAS,GAAG/E,2BAA2B,CAC3CD,aAAa,CAAC,WAAW,CAAC,EAC1B,IAAI,CAACA,aAAa,EAAE,CACrB;MAED,IAAI,CAACiF,eAAe,CAClB,UAAUC,UAAU;QAClB,IAAMC,YAAY,GAAG,EAAE;QACvB,IAAMC,SAAS,GAAGF,UAAU,CAACE,SAAS;QACtC,IAAMhB,QAAQ,GAAG,IAAI,CAACiB,WAAW,EAAE;QACnC,IAAM/E,CAAC,GAAG8D,QAAQ,CAACkB,iBAAiB,CAClCF,SAAS,CAACG,UAAU,EACpB,IAAI,CAACC,UAAU,CAChB;QACD,IAAMnF,SAAS,GAAG+D,QAAQ,CAACqB,wBAAwB,CACjDL,SAAS,CAACM,MAAM,EAChBpF,CAAC,CACF;QACD,IAAMqF,IAAI,GAAGtF,SAAS,CAAC,CAAC,CAAC;QACzBuD,QAAQ,CAACmB,gBAAgB,CAACN,GAAG,CAAC,UAAUmB,eAAe;UACrD,IAAIC,YAAY,GAAG,KAAK;UACxB,IAAMC,aAAa,GAAGF,eAAe,CAACE,aAAa;UACnD,KAAK,IAAIpF,CAAC,GAAG,CAAC,EAAEqF,EAAE,GAAGD,aAAa,CAACtC,MAAM,EAAE9C,CAAC,GAAGqF,EAAE,EAAE,EAAErF,CAAC,EAAE;YACtD,IAAMsF,YAAY,GAAGF,aAAa,CAACpF,CAAC,CAAC;YACrC,IACEiF,IAAI,IAAIK,YAAY,CAAC1B,OAAO,IAC5BqB,IAAI,IAAIK,YAAY,CAACnC,OAAO,EAC5B;cACA,IAAMoC,IAAI,GAAGD,YAAY,CAACC,IAAI;cAC9B,IAAMC,cAAc,GAAG,CAACD,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,EAAEA,IAAI,CAAC,CAAC,CAAC,CAAC;cAC3D,IAAME,QAAM,GAAG1G,cAAc,CAACyG,cAAc,EAAElB,WAAS,CAAC;cACxD,IAAItF,UAAU,CAACyG,QAAM,EAAEjB,UAAU,CAACnB,MAAM,CAAC,EAAE;gBACzC8B,YAAY,GAAG,IAAI;gBACnB;;;;UAIN,IAAIA,YAAY,EAAE;YAChBV,YAAY,CAACiB,IAAI,CAACR,eAAe,CAACS,WAAW,CAAC;;QAElD,CAAC,CAAC;QAEFlB,YAAY,CAACiB,IAAI,CAACrF,eAAe,CAAC;QAClC,OAAOoE,YAAY;MACrB,CAAC,CAACpC,IAAI,CAAC,IAAI,CAAC,CACb;;IAGH,IAAI,CAACW,QAAQ,CAACnE,WAAW,CAAC+G,KAAK,CAAC;EAClC,CAAC;EACH,OAAAtF,QAAC;AAAD,CAAC,CAjNsBxB,SAAS;AAmNhC,eAAewB,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}