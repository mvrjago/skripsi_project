{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport TextPlacement from '../../style/TextPlacement.js';\nimport { asColorLike } from '../../colorlike.js';\nimport { defaultFillStyle, defaultFont, defaultLineCap, defaultLineDash, defaultLineDashOffset, defaultLineJoin, defaultLineWidth, defaultMiterLimit, defaultPadding, defaultStrokeStyle, defaultTextAlign, defaultTextBaseline, registerFont } from '../canvas.js';\nimport { getUid } from '../../util.js';\nimport { intersects } from '../../extent.js';\nimport { matchingChunk } from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @enum {number}\n */\nexport var TEXT_ALIGN = {\n  'left': 0,\n  'end': 0,\n  'center': 0.5,\n  'right': 1,\n  'start': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1\n};\nvar CanvasTextBuilder = /** @class */function (_super) {\n  __extends(CanvasTextBuilder, _super);\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  function CanvasTextBuilder(tolerance, maxExtent, resolution, pixelRatio) {\n    var _this = _super.call(this, tolerance, maxExtent, resolution, pixelRatio) || this;\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterGroups}\n     */\n    _this.declutterGroups_;\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    _this.labels_ = null;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.text_ = '';\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.textOffsetX_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.textOffsetY_ = 0;\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    _this.textRotateWithView_ = undefined;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.textRotation_ = 0;\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    _this.textFillState_ = null;\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    _this.fillStates = {};\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    _this.textStrokeState_ = null;\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    _this.strokeStates = {};\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    _this.textState_ = /** @type {import(\"../canvas.js\").TextState} */{};\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    _this.textStates = {};\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.textKey_ = '';\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.fillKey_ = '';\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.strokeKey_ = '';\n    return _this;\n  }\n  /**\n   * @return {import(\"./Builder.js\").SerializableInstructions} the serializable instructions.\n   */\n  CanvasTextBuilder.prototype.finish = function () {\n    var instructions = _super.prototype.finish.call(this);\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  };\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  CanvasTextBuilder.prototype.drawText = function (geometry, feature) {\n    var fillState = this.textFillState_;\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n    if (this.text_ === '' || !textState || !fillState && !strokeState) {\n      return;\n    }\n    var begin = this.coordinates.length;\n    var geometryType = geometry.getType();\n    var flatCoordinates = null;\n    var end = 2;\n    var stride = geometry.getStride();\n    var i, ii;\n    if (textState.placement === TextPlacement.LINE) {\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n      var ends = void 0;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == GeometryType.LINE_STRING) {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == GeometryType.MULTI_LINE_STRING) {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */geometry.getEnds();\n      } else if (geometryType == GeometryType.POLYGON) {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */geometry.getEnds().slice(0, 1);\n      } else if (geometryType == GeometryType.MULTI_POLYGON) {\n        var endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getEndss();\n        ends = [];\n        for (i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      var textAlign = textState.textAlign;\n      var flatOffset = 0;\n      var flatEnd = void 0;\n      for (var o = 0, oo = ends.length; o < oo; ++o) {\n        if (textAlign == undefined) {\n          var range = matchingChunk(textState.maxAngle, flatCoordinates, flatOffset, ends[o], stride);\n          flatOffset = range[0];\n          flatEnd = range[1];\n        } else {\n          flatEnd = ends[o];\n        }\n        for (i = flatOffset; i < flatEnd; i += stride) {\n          this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n        }\n        end = this.coordinates.length;\n        flatOffset = ends[o];\n        var declutterGroup = this.declutterGroups_ ? o === 0 ? this.declutterGroups_[0] : [].concat(this.declutterGroups_[0]) : null;\n        this.drawChars_(begin, end, declutterGroup);\n        begin = end;\n      }\n      this.endGeometry(feature);\n    } else {\n      var geometryWidths = null;\n      if (!textState.overflow) {\n        geometryWidths = [];\n      }\n      switch (geometryType) {\n        case GeometryType.POINT:\n        case GeometryType.MULTI_POINT:\n          flatCoordinates = /** @type {import(\"../../geom/MultiPoint.js\").default} */geometry.getFlatCoordinates();\n          end = flatCoordinates.length;\n          break;\n        case GeometryType.LINE_STRING:\n          flatCoordinates = /** @type {import(\"../../geom/LineString.js\").default} */geometry.getFlatMidpoint();\n          break;\n        case GeometryType.CIRCLE:\n          flatCoordinates = /** @type {import(\"../../geom/Circle.js\").default} */geometry.getCenter();\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          flatCoordinates = /** @type {import(\"../../geom/MultiLineString.js\").default} */geometry.getFlatMidpoints();\n          stride = 2;\n          end = flatCoordinates.length;\n          break;\n        case GeometryType.POLYGON:\n          flatCoordinates = /** @type {import(\"../../geom/Polygon.js\").default} */geometry.getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          var interiorPoints = /** @type {import(\"../../geom/MultiPolygon.js\").default} */geometry.getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          stride = 2;\n          end = flatCoordinates.length;\n          if (end == 0) {\n            return;\n          }\n          break;\n        default:\n      }\n      end = this.appendFlatCoordinates(flatCoordinates, 0, end, stride, false, false);\n      this.saveTextStates_();\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(textState.backgroundFill, textState.backgroundStroke);\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n          this.hitDetectionInstructions.push(this.createFill(this.state));\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      // adjust padding for negative scale\n      var padding = textState.padding;\n      if (padding != defaultPadding && (textState.scale[0] < 0 || textState.scale[1] < 0)) {\n        var p0 = textState.padding[0];\n        var p1 = textState.padding[1];\n        var p2 = textState.padding[2];\n        var p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      var pixelRatio_1 = this.pixelRatio;\n      this.instructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, null, NaN, NaN, this.declutterGroups_, NaN, 1, 0, 0, this.textRotateWithView_, this.textRotation_, [1, 1], NaN, padding == defaultPadding ? defaultPadding : padding.map(function (p) {\n        return p * pixelRatio_1;\n      }), !!textState.backgroundFill, !!textState.backgroundStroke, this.text_, this.textKey_, this.strokeKey_, this.fillKey_, this.textOffsetX_, this.textOffsetY_, geometryWidths]);\n      var scale = 1 / pixelRatio_1;\n      this.hitDetectionInstructions.push([CanvasInstruction.DRAW_IMAGE, begin, end, null, NaN, NaN, this.declutterGroups_, NaN, 1, 0, 0, this.textRotateWithView_, this.textRotation_, [scale, scale], NaN, padding, !!textState.backgroundFill, !!textState.backgroundStroke, this.text_, this.textKey_, this.strokeKey_, this.fillKey_, this.textOffsetX_, this.textOffsetY_, geometryWidths]);\n      this.endGeometry(feature);\n    }\n  };\n  /**\n   * @private\n   */\n  CanvasTextBuilder.prototype.saveTextStates_ = function () {\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n    var fillState = this.textFillState_;\n    var strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash\n        };\n      }\n    }\n    var textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale\n      };\n    }\n    var fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle\n        };\n      }\n    }\n  };\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   * @param {import(\"../canvas.js\").DeclutterGroup} declutterGroup Declutter group.\n   */\n  CanvasTextBuilder.prototype.drawChars_ = function (begin, end, declutterGroup) {\n    var strokeState = this.textStrokeState_;\n    var textState = this.textState_;\n    var strokeKey = this.strokeKey_;\n    var textKey = this.textKey_;\n    var fillKey = this.fillKey_;\n    this.saveTextStates_();\n    var pixelRatio = this.pixelRatio;\n    var baseline = TEXT_ALIGN[textState.textBaseline];\n    var offsetY = this.textOffsetY_ * pixelRatio;\n    var text = this.text_;\n    var strokeWidth = strokeState ? strokeState.lineWidth * Math.abs(textState.scale[0]) / 2 : 0;\n    this.instructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, declutterGroup, textState.overflow, fillKey, textState.maxAngle, pixelRatio, offsetY, strokeKey, strokeWidth * pixelRatio, text, textKey, 1]);\n    this.hitDetectionInstructions.push([CanvasInstruction.DRAW_CHARS, begin, end, baseline, declutterGroup, textState.overflow, fillKey, textState.maxAngle, 1, offsetY, strokeKey, strokeWidth, text, textKey, 1 / pixelRatio]);\n  };\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {import(\"../canvas.js\").DeclutterGroups} declutterGroups Declutter.\n   */\n  CanvasTextBuilder.prototype.setTextStyle = function (textStyle, declutterGroups) {\n    var textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      this.declutterGroups_ = declutterGroups;\n      var textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */{};\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = asColorLike(textFillStyle.getColor() || defaultFillStyle);\n      }\n      var textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */{};\n          this.textStrokeState_ = strokeState;\n        }\n        var lineDash = textStrokeStyle.getLineDash();\n        var lineDashOffset = textStrokeStyle.getLineDashOffset();\n        var lineWidth = textStrokeStyle.getWidth();\n        var miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset = lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth = lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit = miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(textStrokeStyle.getColor() || defaultStrokeStyle);\n      }\n      textState = this.textState_;\n      var font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      var textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.textBaseline = textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n      var textOffsetX = textStyle.getOffsetX();\n      var textOffsetY = textStyle.getOffsetY();\n      var textRotateWithView = textStyle.getRotateWithView();\n      var textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ = textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n      this.strokeKey_ = strokeState ? (typeof strokeState.strokeStyle == 'string' ? strokeState.strokeStyle : getUid(strokeState.strokeStyle)) + strokeState.lineCap + strokeState.lineDashOffset + '|' + strokeState.lineWidth + strokeState.lineJoin + strokeState.miterLimit + '[' + strokeState.lineDash.join() + ']' : '';\n      this.textKey_ = textState.font + textState.scale + (textState.textAlign || '?') + (textState.textBaseline || '?');\n      this.fillKey_ = fillState ? typeof fillState.fillStyle == 'string' ? fillState.fillStyle : '|' + getUid(fillState.fillStyle) : '';\n    }\n  };\n  return CanvasTextBuilder;\n}(CanvasBuilder);\nexport default CanvasTextBuilder;","map":{"version":3,"names":["CanvasBuilder","CanvasInstruction","GeometryType","TextPlacement","asColorLike","defaultFillStyle","defaultFont","defaultLineCap","defaultLineDash","defaultLineDashOffset","defaultLineJoin","defaultLineWidth","defaultMiterLimit","defaultPadding","defaultStrokeStyle","defaultTextAlign","defaultTextBaseline","registerFont","getUid","intersects","matchingChunk","TEXT_ALIGN","CanvasTextBuilder","_super","__extends","tolerance","maxExtent","resolution","pixelRatio","_this","call","declutterGroups_","labels_","text_","textOffsetX_","textOffsetY_","textRotateWithView_","undefined","textRotation_","textFillState_","fillStates","textStrokeState_","strokeStates","textState_","textStates","textKey_","fillKey_","strokeKey_","prototype","finish","instructions","drawText","geometry","feature","fillState","strokeState","textState","begin","coordinates","length","geometryType","getType","flatCoordinates","end","stride","getStride","i","ii","placement","LINE","getBufferedMaxExtent","getExtent","ends","getFlatCoordinates","LINE_STRING","MULTI_LINE_STRING","getEnds","POLYGON","slice","MULTI_POLYGON","endss","getEndss","push","beginGeometry","textAlign","flatOffset","flatEnd","o","oo","range","maxAngle","declutterGroup","concat","drawChars_","endGeometry","geometryWidths","overflow","POINT","MULTI_POINT","getFlatMidpoint","CIRCLE","getCenter","getFlatMidpoints","getFlatInteriorPoint","interiorPoints","getFlatInteriorPoints","appendFlatCoordinates","saveTextStates_","backgroundFill","backgroundStroke","setFillStrokeStyle","updateFillStyle","state","createFill","hitDetectionInstructions","updateStrokeStyle","applyStroke","createStroke","padding","scale","p0","p1","p2","p3","pixelRatio_1","DRAW_IMAGE","NaN","map","p","strokeKey","strokeStyle","lineCap","lineDashOffset","lineWidth","lineJoin","miterLimit","lineDash","textKey","font","textBaseline","fillKey","fillStyle","baseline","offsetY","text","strokeWidth","Math","abs","DRAW_CHARS","setTextStyle","textStyle","declutterGroups","textFillStyle","getFill","getColor","textStrokeStyle","getStroke","getLineDash","getLineDashOffset","getWidth","getMiterLimit","getLineCap","getLineJoin","getFont","textScale","getScaleArray","getOverflow","getMaxAngle","getPlacement","getTextAlign","getTextBaseline","getBackgroundFill","getBackgroundStroke","getPadding","textOffsetX","getOffsetX","textOffsetY","getOffsetY","textRotateWithView","getRotateWithView","textRotation","getRotation","getText","join"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/render/canvas/TextBuilder.js"],"sourcesContent":["/**\n * @module ol/render/canvas/TextBuilder\n */\nimport CanvasBuilder from './Builder.js';\nimport CanvasInstruction from './Instruction.js';\nimport GeometryType from '../../geom/GeometryType.js';\nimport TextPlacement from '../../style/TextPlacement.js';\nimport {asColorLike} from '../../colorlike.js';\nimport {\n  defaultFillStyle,\n  defaultFont,\n  defaultLineCap,\n  defaultLineDash,\n  defaultLineDashOffset,\n  defaultLineJoin,\n  defaultLineWidth,\n  defaultMiterLimit,\n  defaultPadding,\n  defaultStrokeStyle,\n  defaultTextAlign,\n  defaultTextBaseline,\n  registerFont,\n} from '../canvas.js';\nimport {getUid} from '../../util.js';\nimport {intersects} from '../../extent.js';\nimport {matchingChunk} from '../../geom/flat/straightchunk.js';\n/**\n * @const\n * @enum {number}\n */\nexport const TEXT_ALIGN = {\n  'left': 0,\n  'end': 0,\n  'center': 0.5,\n  'right': 1,\n  'start': 1,\n  'top': 0,\n  'middle': 0.5,\n  'hanging': 0.2,\n  'alphabetic': 0.8,\n  'ideographic': 0.8,\n  'bottom': 1,\n};\n\nclass CanvasTextBuilder extends CanvasBuilder {\n  /**\n   * @param {number} tolerance Tolerance.\n   * @param {import(\"../../extent.js\").Extent} maxExtent Maximum extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   */\n  constructor(tolerance, maxExtent, resolution, pixelRatio) {\n    super(tolerance, maxExtent, resolution, pixelRatio);\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").DeclutterGroups}\n     */\n    this.declutterGroups_;\n\n    /**\n     * @private\n     * @type {Array<HTMLCanvasElement>}\n     */\n    this.labels_ = null;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.text_ = '';\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetX_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textOffsetY_ = 0;\n\n    /**\n     * @private\n     * @type {boolean|undefined}\n     */\n    this.textRotateWithView_ = undefined;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.textRotation_ = 0;\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").FillState}\n     */\n    this.textFillState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").FillState>}\n     */\n    this.fillStates = {};\n\n    /**\n     * @private\n     * @type {?import(\"../canvas.js\").StrokeState}\n     */\n    this.textStrokeState_ = null;\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").StrokeState>}\n     */\n    this.strokeStates = {};\n\n    /**\n     * @private\n     * @type {import(\"../canvas.js\").TextState}\n     */\n    this.textState_ = /** @type {import(\"../canvas.js\").TextState} */ ({});\n\n    /**\n     * @type {!Object<string, import(\"../canvas.js\").TextState>}\n     */\n    this.textStates = {};\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.textKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.fillKey_ = '';\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.strokeKey_ = '';\n  }\n\n  /**\n   * @return {import(\"./Builder.js\").SerializableInstructions} the serializable instructions.\n   */\n  finish() {\n    const instructions = super.finish();\n    instructions.textStates = this.textStates;\n    instructions.fillStates = this.fillStates;\n    instructions.strokeStates = this.strokeStates;\n    return instructions;\n  }\n\n  /**\n   * @param {import(\"../../geom/SimpleGeometry.js\").default|import(\"../Feature.js\").default} geometry Geometry.\n   * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n   */\n  drawText(geometry, feature) {\n    const fillState = this.textFillState_;\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    if (this.text_ === '' || !textState || (!fillState && !strokeState)) {\n      return;\n    }\n\n    let begin = this.coordinates.length;\n\n    const geometryType = geometry.getType();\n    let flatCoordinates = null;\n    let end = 2;\n    let stride = geometry.getStride();\n    let i, ii;\n\n    if (textState.placement === TextPlacement.LINE) {\n      if (!intersects(this.getBufferedMaxExtent(), geometry.getExtent())) {\n        return;\n      }\n      let ends;\n      flatCoordinates = geometry.getFlatCoordinates();\n      if (geometryType == GeometryType.LINE_STRING) {\n        ends = [flatCoordinates.length];\n      } else if (geometryType == GeometryType.MULTI_LINE_STRING) {\n        ends = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (geometry).getEnds();\n      } else if (geometryType == GeometryType.POLYGON) {\n        ends = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry)\n          .getEnds()\n          .slice(0, 1);\n      } else if (geometryType == GeometryType.MULTI_POLYGON) {\n        const endss = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry).getEndss();\n        ends = [];\n        for (i = 0, ii = endss.length; i < ii; ++i) {\n          ends.push(endss[i][0]);\n        }\n      }\n      this.beginGeometry(geometry, feature);\n      const textAlign = textState.textAlign;\n      let flatOffset = 0;\n      let flatEnd;\n      for (let o = 0, oo = ends.length; o < oo; ++o) {\n        if (textAlign == undefined) {\n          const range = matchingChunk(\n            textState.maxAngle,\n            flatCoordinates,\n            flatOffset,\n            ends[o],\n            stride\n          );\n          flatOffset = range[0];\n          flatEnd = range[1];\n        } else {\n          flatEnd = ends[o];\n        }\n        for (i = flatOffset; i < flatEnd; i += stride) {\n          this.coordinates.push(flatCoordinates[i], flatCoordinates[i + 1]);\n        }\n        end = this.coordinates.length;\n        flatOffset = ends[o];\n        const declutterGroup = this.declutterGroups_\n          ? o === 0\n            ? this.declutterGroups_[0]\n            : [].concat(this.declutterGroups_[0])\n          : null;\n        this.drawChars_(begin, end, declutterGroup);\n        begin = end;\n      }\n      this.endGeometry(feature);\n    } else {\n      let geometryWidths = null;\n      if (!textState.overflow) {\n        geometryWidths = [];\n      }\n      switch (geometryType) {\n        case GeometryType.POINT:\n        case GeometryType.MULTI_POINT:\n          flatCoordinates = /** @type {import(\"../../geom/MultiPoint.js\").default} */ (geometry).getFlatCoordinates();\n          end = flatCoordinates.length;\n          break;\n        case GeometryType.LINE_STRING:\n          flatCoordinates = /** @type {import(\"../../geom/LineString.js\").default} */ (geometry).getFlatMidpoint();\n          break;\n        case GeometryType.CIRCLE:\n          flatCoordinates = /** @type {import(\"../../geom/Circle.js\").default} */ (geometry).getCenter();\n          break;\n        case GeometryType.MULTI_LINE_STRING:\n          flatCoordinates = /** @type {import(\"../../geom/MultiLineString.js\").default} */ (geometry).getFlatMidpoints();\n          stride = 2;\n          end = flatCoordinates.length;\n          break;\n        case GeometryType.POLYGON:\n          flatCoordinates = /** @type {import(\"../../geom/Polygon.js\").default} */ (geometry).getFlatInteriorPoint();\n          if (!textState.overflow) {\n            geometryWidths.push(flatCoordinates[2] / this.resolution);\n          }\n          stride = 3;\n          break;\n        case GeometryType.MULTI_POLYGON:\n          const interiorPoints = /** @type {import(\"../../geom/MultiPolygon.js\").default} */ (geometry).getFlatInteriorPoints();\n          flatCoordinates = [];\n          for (i = 0, ii = interiorPoints.length; i < ii; i += 3) {\n            if (!textState.overflow) {\n              geometryWidths.push(interiorPoints[i + 2] / this.resolution);\n            }\n            flatCoordinates.push(interiorPoints[i], interiorPoints[i + 1]);\n          }\n          stride = 2;\n          end = flatCoordinates.length;\n          if (end == 0) {\n            return;\n          }\n          break;\n        default:\n      }\n      end = this.appendFlatCoordinates(\n        flatCoordinates,\n        0,\n        end,\n        stride,\n        false,\n        false\n      );\n\n      this.saveTextStates_();\n\n      if (textState.backgroundFill || textState.backgroundStroke) {\n        this.setFillStrokeStyle(\n          textState.backgroundFill,\n          textState.backgroundStroke\n        );\n        if (textState.backgroundFill) {\n          this.updateFillStyle(this.state, this.createFill);\n          this.hitDetectionInstructions.push(this.createFill(this.state));\n        }\n        if (textState.backgroundStroke) {\n          this.updateStrokeStyle(this.state, this.applyStroke);\n          this.hitDetectionInstructions.push(this.createStroke(this.state));\n        }\n      }\n\n      this.beginGeometry(geometry, feature);\n\n      // adjust padding for negative scale\n      let padding = textState.padding;\n      if (\n        padding != defaultPadding &&\n        (textState.scale[0] < 0 || textState.scale[1] < 0)\n      ) {\n        let p0 = textState.padding[0];\n        let p1 = textState.padding[1];\n        let p2 = textState.padding[2];\n        let p3 = textState.padding[3];\n        if (textState.scale[0] < 0) {\n          p1 = -p1;\n          p3 = -p3;\n        }\n        if (textState.scale[1] < 0) {\n          p0 = -p0;\n          p2 = -p2;\n        }\n        padding = [p0, p1, p2, p3];\n      }\n\n      // The image is unknown at this stage so we pass null; it will be computed at render time.\n      // For clarity, we pass NaN for offsetX, offsetY, width and height, which will be computed at\n      // render time.\n      const pixelRatio = this.pixelRatio;\n      this.instructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        this.declutterGroups_,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [1, 1],\n        NaN,\n        padding == defaultPadding\n          ? defaultPadding\n          : padding.map(function (p) {\n              return p * pixelRatio;\n            }),\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n      const scale = 1 / pixelRatio;\n      this.hitDetectionInstructions.push([\n        CanvasInstruction.DRAW_IMAGE,\n        begin,\n        end,\n        null,\n        NaN,\n        NaN,\n        this.declutterGroups_,\n        NaN,\n        1,\n        0,\n        0,\n        this.textRotateWithView_,\n        this.textRotation_,\n        [scale, scale],\n        NaN,\n        padding,\n        !!textState.backgroundFill,\n        !!textState.backgroundStroke,\n        this.text_,\n        this.textKey_,\n        this.strokeKey_,\n        this.fillKey_,\n        this.textOffsetX_,\n        this.textOffsetY_,\n        geometryWidths,\n      ]);\n\n      this.endGeometry(feature);\n    }\n  }\n\n  /**\n   * @private\n   */\n  saveTextStates_() {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n    const fillState = this.textFillState_;\n\n    const strokeKey = this.strokeKey_;\n    if (strokeState) {\n      if (!(strokeKey in this.strokeStates)) {\n        this.strokeStates[strokeKey] = {\n          strokeStyle: strokeState.strokeStyle,\n          lineCap: strokeState.lineCap,\n          lineDashOffset: strokeState.lineDashOffset,\n          lineWidth: strokeState.lineWidth,\n          lineJoin: strokeState.lineJoin,\n          miterLimit: strokeState.miterLimit,\n          lineDash: strokeState.lineDash,\n        };\n      }\n    }\n    const textKey = this.textKey_;\n    if (!(textKey in this.textStates)) {\n      this.textStates[textKey] = {\n        font: textState.font,\n        textAlign: textState.textAlign || defaultTextAlign,\n        textBaseline: textState.textBaseline || defaultTextBaseline,\n        scale: textState.scale,\n      };\n    }\n    const fillKey = this.fillKey_;\n    if (fillState) {\n      if (!(fillKey in this.fillStates)) {\n        this.fillStates[fillKey] = {\n          fillStyle: fillState.fillStyle,\n        };\n      }\n    }\n  }\n\n  /**\n   * @private\n   * @param {number} begin Begin.\n   * @param {number} end End.\n   * @param {import(\"../canvas.js\").DeclutterGroup} declutterGroup Declutter group.\n   */\n  drawChars_(begin, end, declutterGroup) {\n    const strokeState = this.textStrokeState_;\n    const textState = this.textState_;\n\n    const strokeKey = this.strokeKey_;\n    const textKey = this.textKey_;\n    const fillKey = this.fillKey_;\n    this.saveTextStates_();\n\n    const pixelRatio = this.pixelRatio;\n    const baseline = TEXT_ALIGN[textState.textBaseline];\n\n    const offsetY = this.textOffsetY_ * pixelRatio;\n    const text = this.text_;\n    const strokeWidth = strokeState\n      ? (strokeState.lineWidth * Math.abs(textState.scale[0])) / 2\n      : 0;\n\n    this.instructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      declutterGroup,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      pixelRatio,\n      offsetY,\n      strokeKey,\n      strokeWidth * pixelRatio,\n      text,\n      textKey,\n      1,\n    ]);\n    this.hitDetectionInstructions.push([\n      CanvasInstruction.DRAW_CHARS,\n      begin,\n      end,\n      baseline,\n      declutterGroup,\n      textState.overflow,\n      fillKey,\n      textState.maxAngle,\n      1,\n      offsetY,\n      strokeKey,\n      strokeWidth,\n      text,\n      textKey,\n      1 / pixelRatio,\n    ]);\n  }\n\n  /**\n   * @param {import(\"../../style/Text.js\").default} textStyle Text style.\n   * @param {import(\"../canvas.js\").DeclutterGroups} declutterGroups Declutter.\n   */\n  setTextStyle(textStyle, declutterGroups) {\n    let textState, fillState, strokeState;\n    if (!textStyle) {\n      this.text_ = '';\n    } else {\n      this.declutterGroups_ = declutterGroups;\n\n      const textFillStyle = textStyle.getFill();\n      if (!textFillStyle) {\n        fillState = null;\n        this.textFillState_ = fillState;\n      } else {\n        fillState = this.textFillState_;\n        if (!fillState) {\n          fillState = /** @type {import(\"../canvas.js\").FillState} */ ({});\n          this.textFillState_ = fillState;\n        }\n        fillState.fillStyle = asColorLike(\n          textFillStyle.getColor() || defaultFillStyle\n        );\n      }\n\n      const textStrokeStyle = textStyle.getStroke();\n      if (!textStrokeStyle) {\n        strokeState = null;\n        this.textStrokeState_ = strokeState;\n      } else {\n        strokeState = this.textStrokeState_;\n        if (!strokeState) {\n          strokeState = /** @type {import(\"../canvas.js\").StrokeState} */ ({});\n          this.textStrokeState_ = strokeState;\n        }\n        const lineDash = textStrokeStyle.getLineDash();\n        const lineDashOffset = textStrokeStyle.getLineDashOffset();\n        const lineWidth = textStrokeStyle.getWidth();\n        const miterLimit = textStrokeStyle.getMiterLimit();\n        strokeState.lineCap = textStrokeStyle.getLineCap() || defaultLineCap;\n        strokeState.lineDash = lineDash ? lineDash.slice() : defaultLineDash;\n        strokeState.lineDashOffset =\n          lineDashOffset === undefined ? defaultLineDashOffset : lineDashOffset;\n        strokeState.lineJoin = textStrokeStyle.getLineJoin() || defaultLineJoin;\n        strokeState.lineWidth =\n          lineWidth === undefined ? defaultLineWidth : lineWidth;\n        strokeState.miterLimit =\n          miterLimit === undefined ? defaultMiterLimit : miterLimit;\n        strokeState.strokeStyle = asColorLike(\n          textStrokeStyle.getColor() || defaultStrokeStyle\n        );\n      }\n\n      textState = this.textState_;\n      const font = textStyle.getFont() || defaultFont;\n      registerFont(font);\n      const textScale = textStyle.getScaleArray();\n      textState.overflow = textStyle.getOverflow();\n      textState.font = font;\n      textState.maxAngle = textStyle.getMaxAngle();\n      textState.placement = textStyle.getPlacement();\n      textState.textAlign = textStyle.getTextAlign();\n      textState.textBaseline =\n        textStyle.getTextBaseline() || defaultTextBaseline;\n      textState.backgroundFill = textStyle.getBackgroundFill();\n      textState.backgroundStroke = textStyle.getBackgroundStroke();\n      textState.padding = textStyle.getPadding() || defaultPadding;\n      textState.scale = textScale === undefined ? [1, 1] : textScale;\n\n      const textOffsetX = textStyle.getOffsetX();\n      const textOffsetY = textStyle.getOffsetY();\n      const textRotateWithView = textStyle.getRotateWithView();\n      const textRotation = textStyle.getRotation();\n      this.text_ = textStyle.getText() || '';\n      this.textOffsetX_ = textOffsetX === undefined ? 0 : textOffsetX;\n      this.textOffsetY_ = textOffsetY === undefined ? 0 : textOffsetY;\n      this.textRotateWithView_ =\n        textRotateWithView === undefined ? false : textRotateWithView;\n      this.textRotation_ = textRotation === undefined ? 0 : textRotation;\n\n      this.strokeKey_ = strokeState\n        ? (typeof strokeState.strokeStyle == 'string'\n            ? strokeState.strokeStyle\n            : getUid(strokeState.strokeStyle)) +\n          strokeState.lineCap +\n          strokeState.lineDashOffset +\n          '|' +\n          strokeState.lineWidth +\n          strokeState.lineJoin +\n          strokeState.miterLimit +\n          '[' +\n          strokeState.lineDash.join() +\n          ']'\n        : '';\n      this.textKey_ =\n        textState.font +\n        textState.scale +\n        (textState.textAlign || '?') +\n        (textState.textBaseline || '?');\n      this.fillKey_ = fillState\n        ? typeof fillState.fillStyle == 'string'\n          ? fillState.fillStyle\n          : '|' + getUid(fillState.fillStyle)\n        : '';\n    }\n  }\n}\n\nexport default CanvasTextBuilder;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}