{"ast":null,"code":"/**\n * @module ol/style/IconImage\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport { createCanvasContext2D } from '../dom.js';\nimport { shared as iconImageCache } from './IconImageCache.js';\nimport { listenImage } from '../Image.js';\n/**\n * @type {CanvasRenderingContext2D}\n */\nvar taintedTestContext = null;\nvar IconImage = /** @class */function (_super) {\n  __extends(IconImage, _super);\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n   * @param {string|undefined} src Src.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../ImageState.js\").default} imageState Image state.\n   * @param {import(\"../color.js\").Color} color Color.\n   */\n  function IconImage(image, src, size, crossOrigin, imageState, color) {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    _this.hitDetectionImage_ = null;\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    _this.image_ = !image ? new Image() : image;\n    if (crossOrigin !== null) {\n      /** @type {HTMLImageElement} */_this.image_.crossOrigin = crossOrigin;\n    }\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    _this.canvas_ = {};\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    _this.color_ = color;\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    _this.unlisten_ = null;\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n    _this.imageState_ = imageState;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.size_ = size;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.src_ = src;\n    /**\n     * @private\n     */\n    _this.tainted_;\n    return _this;\n  }\n  /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */\n  IconImage.prototype.isTainted_ = function () {\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n      if (!taintedTestContext) {\n        taintedTestContext = createCanvasContext2D(1, 1);\n      }\n      taintedTestContext.drawImage(this.image_, 0, 0);\n      try {\n        taintedTestContext.getImageData(0, 0, 1, 1);\n        this.tainted_ = false;\n      } catch (e) {\n        taintedTestContext = null;\n        this.tainted_ = true;\n      }\n    }\n    return this.tainted_ === true;\n  };\n  /**\n   * @private\n   */\n  IconImage.prototype.dispatchChangeEvent_ = function () {\n    this.dispatchEvent(EventType.CHANGE);\n  };\n  /**\n   * @private\n   */\n  IconImage.prototype.handleImageError_ = function () {\n    this.imageState_ = ImageState.ERROR;\n    this.unlistenImage_();\n    this.dispatchChangeEvent_();\n  };\n  /**\n   * @private\n   */\n  IconImage.prototype.handleImageLoad_ = function () {\n    this.imageState_ = ImageState.LOADED;\n    if (this.size_) {\n      this.image_.width = this.size_[0];\n      this.image_.height = this.size_[1];\n    } else {\n      this.size_ = [this.image_.width, this.image_.height];\n    }\n    this.unlistenImage_();\n    this.dispatchChangeEvent_();\n  };\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   */\n  IconImage.prototype.getImage = function (pixelRatio) {\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\n  };\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Image or Canvas element.\n   */\n  IconImage.prototype.getPixelRatio = function (pixelRatio) {\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? pixelRatio : 1;\n  };\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  IconImage.prototype.getImageState = function () {\n    return this.imageState_;\n  };\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  IconImage.prototype.getHitDetectionImage = function () {\n    if (!this.hitDetectionImage_) {\n      if (this.isTainted_()) {\n        var width = this.size_[0];\n        var height = this.size_[1];\n        var context = createCanvasContext2D(width, height);\n        context.fillRect(0, 0, width, height);\n        this.hitDetectionImage_ = context.canvas;\n      } else {\n        this.hitDetectionImage_ = this.image_;\n      }\n    }\n    return this.hitDetectionImage_;\n  };\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  IconImage.prototype.getSize = function () {\n    return this.size_;\n  };\n  /**\n   * @return {string|undefined} Image src.\n   */\n  IconImage.prototype.getSrc = function () {\n    return this.src_;\n  };\n  /**\n   * Load not yet loaded URI.\n   */\n  IconImage.prototype.load = function () {\n    if (this.imageState_ == ImageState.IDLE) {\n      this.imageState_ = ImageState.LOADING;\n      try {\n        /** @type {HTMLImageElement} */this.image_.src = this.src_;\n      } catch (e) {\n        this.handleImageError_();\n      }\n      this.unlisten_ = listenImage(this.image_, this.handleImageLoad_.bind(this), this.handleImageError_.bind(this));\n    }\n  };\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @private\n   */\n  IconImage.prototype.replaceColor_ = function (pixelRatio) {\n    if (!this.color_ || this.canvas_[pixelRatio]) {\n      return;\n    }\n    var canvas = document.createElement('canvas');\n    this.canvas_[pixelRatio] = canvas;\n    canvas.width = Math.ceil(this.image_.width * pixelRatio);\n    canvas.height = Math.ceil(this.image_.height * pixelRatio);\n    var ctx = canvas.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.drawImage(this.image_, 0, 0);\n    if (this.isTainted_()) {\n      // If reading from the canvas throws a SecurityError the same effect can be\n      // achieved with globalCompositeOperation.\n      // This could be used as the default, but it is not fully supported by all\n      // browsers. E. g. Internet Explorer 11 does not support the multiply\n      // operation and the resulting image shape will be completelly filled with\n      // the provided color.\n      // So this is only used as a fallback. It is still better than having no icon\n      // at all.\n      var c = this.color_;\n      ctx.globalCompositeOperation = 'multiply';\n      ctx.fillStyle = 'rgb(' + c[0] + ',' + c[1] + ',' + c[2] + ')';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n      ctx.globalCompositeOperation = 'destination-in';\n      ctx.drawImage(this.image_, 0, 0);\n      return;\n    }\n    var imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    var data = imgData.data;\n    var r = this.color_[0] / 255.0;\n    var g = this.color_[1] / 255.0;\n    var b = this.color_[2] / 255.0;\n    for (var i = 0, ii = data.length; i < ii; i += 4) {\n      data[i] *= r;\n      data[i + 1] *= g;\n      data[i + 2] *= b;\n    }\n    ctx.putImageData(imgData, 0, 0);\n  };\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  IconImage.prototype.unlistenImage_ = function () {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  };\n  return IconImage;\n}(EventTarget);\n/**\n * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n * @param {string} src Src.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default} imageState Image state.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {IconImage} Icon image.\n */\nexport function get(image, src, size, crossOrigin, imageState, color) {\n  var iconImage = iconImageCache.get(src, crossOrigin, color);\n  if (!iconImage) {\n    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);\n    iconImageCache.set(src, crossOrigin, color, iconImage);\n  }\n  return iconImage;\n}\nexport default IconImage;","map":{"version":3,"names":["EventTarget","EventType","ImageState","createCanvasContext2D","shared","iconImageCache","listenImage","taintedTestContext","IconImage","_super","__extends","image","src","size","crossOrigin","imageState","color","_this","call","hitDetectionImage_","image_","Image","canvas_","color_","unlisten_","imageState_","size_","src_","tainted_","prototype","isTainted_","undefined","LOADED","drawImage","getImageData","e","dispatchChangeEvent_","dispatchEvent","CHANGE","handleImageError_","ERROR","unlistenImage_","handleImageLoad_","width","height","getImage","pixelRatio","replaceColor_","getPixelRatio","getImageState","getHitDetectionImage","context","fillRect","canvas","getSize","getSrc","load","IDLE","LOADING","bind","document","createElement","Math","ceil","ctx","getContext","scale","c","globalCompositeOperation","fillStyle","imgData","data","r","g","b","i","ii","length","putImageData","get","iconImage","set"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/style/IconImage.js"],"sourcesContent":["/**\n * @module ol/style/IconImage\n */\n\nimport EventTarget from '../events/Target.js';\nimport EventType from '../events/EventType.js';\nimport ImageState from '../ImageState.js';\nimport {createCanvasContext2D} from '../dom.js';\nimport {shared as iconImageCache} from './IconImageCache.js';\nimport {listenImage} from '../Image.js';\n\n/**\n * @type {CanvasRenderingContext2D}\n */\nlet taintedTestContext = null;\n\nclass IconImage extends EventTarget {\n  /**\n   * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n   * @param {string|undefined} src Src.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {?string} crossOrigin Cross origin.\n   * @param {import(\"../ImageState.js\").default} imageState Image state.\n   * @param {import(\"../color.js\").Color} color Color.\n   */\n  constructor(image, src, size, crossOrigin, imageState, color) {\n    super();\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.hitDetectionImage_ = null;\n\n    /**\n     * @private\n     * @type {HTMLImageElement|HTMLCanvasElement}\n     */\n    this.image_ = !image ? new Image() : image;\n\n    if (crossOrigin !== null) {\n      /** @type {HTMLImageElement} */ (this.image_).crossOrigin = crossOrigin;\n    }\n\n    /**\n     * @private\n     * @type {Object<number, HTMLCanvasElement>}\n     */\n    this.canvas_ = {};\n\n    /**\n     * @private\n     * @type {import(\"../color.js\").Color}\n     */\n    this.color_ = color;\n\n    /**\n     * @private\n     * @type {?function():void}\n     */\n    this.unlisten_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../ImageState.js\").default}\n     */\n    this.imageState_ = imageState;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.size_ = size;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.src_ = src;\n\n    /**\n     * @private\n     */\n    this.tainted_;\n  }\n\n  /**\n   * @private\n   * @return {boolean} The image canvas is tainted.\n   */\n  isTainted_() {\n    if (this.tainted_ === undefined && this.imageState_ === ImageState.LOADED) {\n      if (!taintedTestContext) {\n        taintedTestContext = createCanvasContext2D(1, 1);\n      }\n      taintedTestContext.drawImage(this.image_, 0, 0);\n      try {\n        taintedTestContext.getImageData(0, 0, 1, 1);\n        this.tainted_ = false;\n      } catch (e) {\n        taintedTestContext = null;\n        this.tainted_ = true;\n      }\n    }\n    return this.tainted_ === true;\n  }\n\n  /**\n   * @private\n   */\n  dispatchChangeEvent_() {\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * @private\n   */\n  handleImageError_() {\n    this.imageState_ = ImageState.ERROR;\n    this.unlistenImage_();\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @private\n   */\n  handleImageLoad_() {\n    this.imageState_ = ImageState.LOADED;\n    if (this.size_) {\n      this.image_.width = this.size_[0];\n      this.image_.height = this.size_[1];\n    } else {\n      this.size_ = [this.image_.width, this.image_.height];\n    }\n    this.unlistenImage_();\n    this.dispatchChangeEvent_();\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {HTMLImageElement|HTMLCanvasElement} Image or Canvas element.\n   */\n  getImage(pixelRatio) {\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? this.canvas_[pixelRatio] : this.image_;\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Image or Canvas element.\n   */\n  getPixelRatio(pixelRatio) {\n    this.replaceColor_(pixelRatio);\n    return this.canvas_[pixelRatio] ? pixelRatio : 1;\n  }\n\n  /**\n   * @return {import(\"../ImageState.js\").default} Image state.\n   */\n  getImageState() {\n    return this.imageState_;\n  }\n\n  /**\n   * @return {HTMLImageElement|HTMLCanvasElement} Image element.\n   */\n  getHitDetectionImage() {\n    if (!this.hitDetectionImage_) {\n      if (this.isTainted_()) {\n        const width = this.size_[0];\n        const height = this.size_[1];\n        const context = createCanvasContext2D(width, height);\n        context.fillRect(0, 0, width, height);\n        this.hitDetectionImage_ = context.canvas;\n      } else {\n        this.hitDetectionImage_ = this.image_;\n      }\n    }\n    return this.hitDetectionImage_;\n  }\n\n  /**\n   * Get the size of the icon (in pixels).\n   * @return {import(\"../size.js\").Size} Image size.\n   */\n  getSize() {\n    return this.size_;\n  }\n\n  /**\n   * @return {string|undefined} Image src.\n   */\n  getSrc() {\n    return this.src_;\n  }\n\n  /**\n   * Load not yet loaded URI.\n   */\n  load() {\n    if (this.imageState_ == ImageState.IDLE) {\n      this.imageState_ = ImageState.LOADING;\n      try {\n        /** @type {HTMLImageElement} */ (this.image_).src = this.src_;\n      } catch (e) {\n        this.handleImageError_();\n      }\n      this.unlisten_ = listenImage(\n        this.image_,\n        this.handleImageLoad_.bind(this),\n        this.handleImageError_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {number} pixelRatio Pixel ratio.\n   * @private\n   */\n  replaceColor_(pixelRatio) {\n    if (!this.color_ || this.canvas_[pixelRatio]) {\n      return;\n    }\n\n    const canvas = document.createElement('canvas');\n    this.canvas_[pixelRatio] = canvas;\n\n    canvas.width = Math.ceil(this.image_.width * pixelRatio);\n    canvas.height = Math.ceil(this.image_.height * pixelRatio);\n\n    const ctx = canvas.getContext('2d');\n    ctx.scale(pixelRatio, pixelRatio);\n    ctx.drawImage(this.image_, 0, 0);\n\n    if (this.isTainted_()) {\n      // If reading from the canvas throws a SecurityError the same effect can be\n      // achieved with globalCompositeOperation.\n      // This could be used as the default, but it is not fully supported by all\n      // browsers. E. g. Internet Explorer 11 does not support the multiply\n      // operation and the resulting image shape will be completelly filled with\n      // the provided color.\n      // So this is only used as a fallback. It is still better than having no icon\n      // at all.\n      const c = this.color_;\n      ctx.globalCompositeOperation = 'multiply';\n      ctx.fillStyle = 'rgb(' + c[0] + ',' + c[1] + ',' + c[2] + ')';\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      ctx.globalCompositeOperation = 'destination-in';\n      ctx.drawImage(this.image_, 0, 0);\n      return;\n    }\n\n    const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    const data = imgData.data;\n    const r = this.color_[0] / 255.0;\n    const g = this.color_[1] / 255.0;\n    const b = this.color_[2] / 255.0;\n\n    for (let i = 0, ii = data.length; i < ii; i += 4) {\n      data[i] *= r;\n      data[i + 1] *= g;\n      data[i + 2] *= b;\n    }\n    ctx.putImageData(imgData, 0, 0);\n  }\n\n  /**\n   * Discards event handlers which listen for load completion or errors.\n   *\n   * @private\n   */\n  unlistenImage_() {\n    if (this.unlisten_) {\n      this.unlisten_();\n      this.unlisten_ = null;\n    }\n  }\n}\n\n/**\n * @param {HTMLImageElement|HTMLCanvasElement} image Image.\n * @param {string} src Src.\n * @param {import(\"../size.js\").Size} size Size.\n * @param {?string} crossOrigin Cross origin.\n * @param {import(\"../ImageState.js\").default} imageState Image state.\n * @param {import(\"../color.js\").Color} color Color.\n * @return {IconImage} Icon image.\n */\nexport function get(image, src, size, crossOrigin, imageState, color) {\n  let iconImage = iconImageCache.get(src, crossOrigin, color);\n  if (!iconImage) {\n    iconImage = new IconImage(image, src, size, crossOrigin, imageState, color);\n    iconImageCache.set(src, crossOrigin, color, iconImage);\n  }\n  return iconImage;\n}\n\nexport default IconImage;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,WAAW,MAAM,qBAAqB;AAC7C,OAAOC,SAAS,MAAM,wBAAwB;AAC9C,OAAOC,UAAU,MAAM,kBAAkB;AACzC,SAAQC,qBAAqB,QAAO,WAAW;AAC/C,SAAQC,MAAM,IAAIC,cAAc,QAAO,qBAAqB;AAC5D,SAAQC,WAAW,QAAO,aAAa;AAEvC;;;AAGA,IAAIC,kBAAkB,GAAG,IAAI;AAE7B,IAAAC,SAAA,0BAAAC,MAAA;EAAwBC,SAAA,CAAAF,SAAA,EAAAC,MAAA;EACtB;;;;;;;;EAQA,SAAAD,UAAYG,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK;IAA5D,IAAAC,KAAA,GACER,MAAA,CAAAS,IAAA,MAAO;IAEP;;;;IAIAD,KAAI,CAACE,kBAAkB,GAAG,IAAI;IAE9B;;;;IAIAF,KAAI,CAACG,MAAM,GAAG,CAACT,KAAK,GAAG,IAAIU,KAAK,EAAE,GAAGV,KAAK;IAE1C,IAAIG,WAAW,KAAK,IAAI,EAAE;MACxB,+BAAiCG,KAAI,CAACG,MAAM,CAAEN,WAAW,GAAGA,WAAW;;IAGzE;;;;IAIAG,KAAI,CAACK,OAAO,GAAG,EAAE;IAEjB;;;;IAIAL,KAAI,CAACM,MAAM,GAAGP,KAAK;IAEnB;;;;IAIAC,KAAI,CAACO,SAAS,GAAG,IAAI;IAErB;;;;IAIAP,KAAI,CAACQ,WAAW,GAAGV,UAAU;IAE7B;;;;IAIAE,KAAI,CAACS,KAAK,GAAGb,IAAI;IAEjB;;;;IAIAI,KAAI,CAACU,IAAI,GAAGf,GAAG;IAEf;;;IAGAK,KAAI,CAACW,QAAQ;;EACf;EAEA;;;;EAIApB,SAAA,CAAAqB,SAAA,CAAAC,UAAU,GAAV;IACE,IAAI,IAAI,CAACF,QAAQ,KAAKG,SAAS,IAAI,IAAI,CAACN,WAAW,KAAKvB,UAAU,CAAC8B,MAAM,EAAE;MACzE,IAAI,CAACzB,kBAAkB,EAAE;QACvBA,kBAAkB,GAAGJ,qBAAqB,CAAC,CAAC,EAAE,CAAC,CAAC;;MAElDI,kBAAkB,CAAC0B,SAAS,CAAC,IAAI,CAACb,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;MAC/C,IAAI;QACFb,kBAAkB,CAAC2B,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QAC3C,IAAI,CAACN,QAAQ,GAAG,KAAK;OACtB,CAAC,OAAOO,CAAC,EAAE;QACV5B,kBAAkB,GAAG,IAAI;QACzB,IAAI,CAACqB,QAAQ,GAAG,IAAI;;;IAGxB,OAAO,IAAI,CAACA,QAAQ,KAAK,IAAI;EAC/B,CAAC;EAED;;;EAGApB,SAAA,CAAAqB,SAAA,CAAAO,oBAAoB,GAApB;IACE,IAAI,CAACC,aAAa,CAACpC,SAAS,CAACqC,MAAM,CAAC;EACtC,CAAC;EAED;;;EAGA9B,SAAA,CAAAqB,SAAA,CAAAU,iBAAiB,GAAjB;IACE,IAAI,CAACd,WAAW,GAAGvB,UAAU,CAACsC,KAAK;IACnC,IAAI,CAACC,cAAc,EAAE;IACrB,IAAI,CAACL,oBAAoB,EAAE;EAC7B,CAAC;EAED;;;EAGA5B,SAAA,CAAAqB,SAAA,CAAAa,gBAAgB,GAAhB;IACE,IAAI,CAACjB,WAAW,GAAGvB,UAAU,CAAC8B,MAAM;IACpC,IAAI,IAAI,CAACN,KAAK,EAAE;MACd,IAAI,CAACN,MAAM,CAACuB,KAAK,GAAG,IAAI,CAACjB,KAAK,CAAC,CAAC,CAAC;MACjC,IAAI,CAACN,MAAM,CAACwB,MAAM,GAAG,IAAI,CAAClB,KAAK,CAAC,CAAC,CAAC;KACnC,MAAM;MACL,IAAI,CAACA,KAAK,GAAG,CAAC,IAAI,CAACN,MAAM,CAACuB,KAAK,EAAE,IAAI,CAACvB,MAAM,CAACwB,MAAM,CAAC;;IAEtD,IAAI,CAACH,cAAc,EAAE;IACrB,IAAI,CAACL,oBAAoB,EAAE;EAC7B,CAAC;EAED;;;;EAIA5B,SAAA,CAAAqB,SAAA,CAAAgB,QAAQ,GAAR,UAASC,UAAU;IACjB,IAAI,CAACC,aAAa,CAACD,UAAU,CAAC;IAC9B,OAAO,IAAI,CAACxB,OAAO,CAACwB,UAAU,CAAC,GAAG,IAAI,CAACxB,OAAO,CAACwB,UAAU,CAAC,GAAG,IAAI,CAAC1B,MAAM;EAC1E,CAAC;EAED;;;;EAIAZ,SAAA,CAAAqB,SAAA,CAAAmB,aAAa,GAAb,UAAcF,UAAU;IACtB,IAAI,CAACC,aAAa,CAACD,UAAU,CAAC;IAC9B,OAAO,IAAI,CAACxB,OAAO,CAACwB,UAAU,CAAC,GAAGA,UAAU,GAAG,CAAC;EAClD,CAAC;EAED;;;EAGAtC,SAAA,CAAAqB,SAAA,CAAAoB,aAAa,GAAb;IACE,OAAO,IAAI,CAACxB,WAAW;EACzB,CAAC;EAED;;;EAGAjB,SAAA,CAAAqB,SAAA,CAAAqB,oBAAoB,GAApB;IACE,IAAI,CAAC,IAAI,CAAC/B,kBAAkB,EAAE;MAC5B,IAAI,IAAI,CAACW,UAAU,EAAE,EAAE;QACrB,IAAMa,KAAK,GAAG,IAAI,CAACjB,KAAK,CAAC,CAAC,CAAC;QAC3B,IAAMkB,MAAM,GAAG,IAAI,CAAClB,KAAK,CAAC,CAAC,CAAC;QAC5B,IAAMyB,OAAO,GAAGhD,qBAAqB,CAACwC,KAAK,EAAEC,MAAM,CAAC;QACpDO,OAAO,CAACC,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAET,KAAK,EAAEC,MAAM,CAAC;QACrC,IAAI,CAACzB,kBAAkB,GAAGgC,OAAO,CAACE,MAAM;OACzC,MAAM;QACL,IAAI,CAAClC,kBAAkB,GAAG,IAAI,CAACC,MAAM;;;IAGzC,OAAO,IAAI,CAACD,kBAAkB;EAChC,CAAC;EAED;;;;EAIAX,SAAA,CAAAqB,SAAA,CAAAyB,OAAO,GAAP;IACE,OAAO,IAAI,CAAC5B,KAAK;EACnB,CAAC;EAED;;;EAGAlB,SAAA,CAAAqB,SAAA,CAAA0B,MAAM,GAAN;IACE,OAAO,IAAI,CAAC5B,IAAI;EAClB,CAAC;EAED;;;EAGAnB,SAAA,CAAAqB,SAAA,CAAA2B,IAAI,GAAJ;IACE,IAAI,IAAI,CAAC/B,WAAW,IAAIvB,UAAU,CAACuD,IAAI,EAAE;MACvC,IAAI,CAAChC,WAAW,GAAGvB,UAAU,CAACwD,OAAO;MACrC,IAAI;QACF,+BAAiC,IAAI,CAACtC,MAAM,CAAER,GAAG,GAAG,IAAI,CAACe,IAAI;OAC9D,CAAC,OAAOQ,CAAC,EAAE;QACV,IAAI,CAACI,iBAAiB,EAAE;;MAE1B,IAAI,CAACf,SAAS,GAAGlB,WAAW,CAC1B,IAAI,CAACc,MAAM,EACX,IAAI,CAACsB,gBAAgB,CAACiB,IAAI,CAAC,IAAI,CAAC,EAChC,IAAI,CAACpB,iBAAiB,CAACoB,IAAI,CAAC,IAAI,CAAC,CAClC;;EAEL,CAAC;EAED;;;;EAIAnD,SAAA,CAAAqB,SAAA,CAAAkB,aAAa,GAAb,UAAcD,UAAU;IACtB,IAAI,CAAC,IAAI,CAACvB,MAAM,IAAI,IAAI,CAACD,OAAO,CAACwB,UAAU,CAAC,EAAE;MAC5C;;IAGF,IAAMO,MAAM,GAAGO,QAAQ,CAACC,aAAa,CAAC,QAAQ,CAAC;IAC/C,IAAI,CAACvC,OAAO,CAACwB,UAAU,CAAC,GAAGO,MAAM;IAEjCA,MAAM,CAACV,KAAK,GAAGmB,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC3C,MAAM,CAACuB,KAAK,GAAGG,UAAU,CAAC;IACxDO,MAAM,CAACT,MAAM,GAAGkB,IAAI,CAACC,IAAI,CAAC,IAAI,CAAC3C,MAAM,CAACwB,MAAM,GAAGE,UAAU,CAAC;IAE1D,IAAMkB,GAAG,GAAGX,MAAM,CAACY,UAAU,CAAC,IAAI,CAAC;IACnCD,GAAG,CAACE,KAAK,CAACpB,UAAU,EAAEA,UAAU,CAAC;IACjCkB,GAAG,CAAC/B,SAAS,CAAC,IAAI,CAACb,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;IAEhC,IAAI,IAAI,CAACU,UAAU,EAAE,EAAE;MACrB;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAMqC,CAAC,GAAG,IAAI,CAAC5C,MAAM;MACrByC,GAAG,CAACI,wBAAwB,GAAG,UAAU;MACzCJ,GAAG,CAACK,SAAS,GAAG,MAAM,GAAGF,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG,GAAGA,CAAC,CAAC,CAAC,CAAC,GAAG,GAAG;MAC7DH,GAAG,CAACZ,QAAQ,CAAC,CAAC,EAAE,CAAC,EAAEC,MAAM,CAACV,KAAK,EAAEU,MAAM,CAACT,MAAM,CAAC;MAE/CoB,GAAG,CAACI,wBAAwB,GAAG,gBAAgB;MAC/CJ,GAAG,CAAC/B,SAAS,CAAC,IAAI,CAACb,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC;MAChC;;IAGF,IAAMkD,OAAO,GAAGN,GAAG,CAAC9B,YAAY,CAAC,CAAC,EAAE,CAAC,EAAEmB,MAAM,CAACV,KAAK,EAAEU,MAAM,CAACT,MAAM,CAAC;IACnE,IAAM2B,IAAI,GAAGD,OAAO,CAACC,IAAI;IACzB,IAAMC,CAAC,GAAG,IAAI,CAACjD,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK;IAChC,IAAMkD,CAAC,GAAG,IAAI,CAAClD,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK;IAChC,IAAMmD,CAAC,GAAG,IAAI,CAACnD,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK;IAEhC,KAAK,IAAIoD,CAAC,GAAG,CAAC,EAAEC,EAAE,GAAGL,IAAI,CAACM,MAAM,EAAEF,CAAC,GAAGC,EAAE,EAAED,CAAC,IAAI,CAAC,EAAE;MAChDJ,IAAI,CAACI,CAAC,CAAC,IAAIH,CAAC;MACZD,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC,IAAIF,CAAC;MAChBF,IAAI,CAACI,CAAC,GAAG,CAAC,CAAC,IAAID,CAAC;;IAElBV,GAAG,CAACc,YAAY,CAACR,OAAO,EAAE,CAAC,EAAE,CAAC,CAAC;EACjC,CAAC;EAED;;;;;EAKA9D,SAAA,CAAAqB,SAAA,CAAAY,cAAc,GAAd;IACE,IAAI,IAAI,CAACjB,SAAS,EAAE;MAClB,IAAI,CAACA,SAAS,EAAE;MAChB,IAAI,CAACA,SAAS,GAAG,IAAI;;EAEzB,CAAC;EACH,OAAAhB,SAAC;AAAD,CAAC,CAtQuBR,WAAW;AAwQnC;;;;;;;;;AASA,OAAM,SAAU+E,GAAGA,CAACpE,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK;EAClE,IAAIgE,SAAS,GAAG3E,cAAc,CAAC0E,GAAG,CAACnE,GAAG,EAAEE,WAAW,EAAEE,KAAK,CAAC;EAC3D,IAAI,CAACgE,SAAS,EAAE;IACdA,SAAS,GAAG,IAAIxE,SAAS,CAACG,KAAK,EAAEC,GAAG,EAAEC,IAAI,EAAEC,WAAW,EAAEC,UAAU,EAAEC,KAAK,CAAC;IAC3EX,cAAc,CAAC4E,GAAG,CAACrE,GAAG,EAAEE,WAAW,EAAEE,KAAK,EAAEgE,SAAS,CAAC;;EAExD,OAAOA,SAAS;AAClB;AAEA,eAAexE,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}