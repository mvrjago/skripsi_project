{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport ExecutorGroup, { replayDeclutter } from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport { apply, makeInverse, makeScale, toString as transformToString } from '../../transform.js';\nimport { buffer, containsExtent, createEmpty, getWidth, intersects as intersectsExtent, wrapX as wrapExtentX } from '../../extent.js';\nimport { createHitDetectionImageData, hitDetect } from '../../render/canvas/hitdetect.js';\nimport { defaultOrder as defaultRenderOrder, getTolerance as getRenderTolerance, getSquaredTolerance as getSquaredRenderTolerance, renderFeature } from '../vector.js';\nimport { fromUserExtent, getTransformFromProjections, getUserProjection, toUserExtent } from '../../proj.js';\nimport { getUid } from '../../util.js';\nimport { wrapX as wrapCoordinateX } from '../../coordinate.js';\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nvar CanvasVectorLayerRenderer = /** @class */function (_super) {\n  __extends(CanvasVectorLayerRenderer, _super);\n  /**\n   * @param {import(\"../../layer/Vector.js\").default} vectorLayer Vector layer.\n   */\n  function CanvasVectorLayerRenderer(vectorLayer) {\n    var _this = _super.call(this, vectorLayer) || this;\n    /** @private */\n    _this.boundHandleStyleImageChange_ = _this.handleStyleImageChange_.bind(_this);\n    /**\n     * @type {boolean}\n     */\n    _this.animatingOrInteracting_;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.dirty_ = false;\n    /**\n     * @type {ImageData}\n     */\n    _this.hitDetectionImageData_ = null;\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    _this.renderedFeatures_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedResolution_ = NaN;\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    _this.renderedExtent_ = createEmpty();\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRotation_;\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    _this.renderedCenter_ = null;\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    _this.renderedProjection_ = null;\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    _this.renderedRenderOrder_ = null;\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    _this.replayGroup_ = null;\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    _this.replayGroupChanged = true;\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    _this.clipping = true;\n    return _this;\n  }\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   */\n  CanvasVectorLayerRenderer.prototype.useContainer = function (target, transform, opacity) {\n    if (opacity < 1) {\n      target = null;\n    }\n    _super.prototype.useContainer.call(this, target, transform, opacity);\n  };\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  CanvasVectorLayerRenderer.prototype.renderFrame = function (frameState, target) {\n    var pixelRatio = frameState.pixelRatio;\n    var layerState = frameState.layerStatesArray[frameState.layerIndex];\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n    var canvasTransform = transformToString(this.pixelTransform);\n    this.useContainer(target, canvasTransform, layerState.opacity);\n    var context = this.context;\n    var canvas = context.canvas;\n    var replayGroup = this.replayGroup_;\n    if (!replayGroup || replayGroup.isEmpty()) {\n      if (!this.containerReused && canvas.width > 0) {\n        canvas.width = 0;\n      }\n      return this.container;\n    }\n    // resize and clear\n    var width = Math.round(frameState.size[0] * pixelRatio);\n    var height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n    this.preRender(context, frameState);\n    var extent = frameState.extent;\n    var viewState = frameState.viewState;\n    var center = viewState.center;\n    var resolution = viewState.resolution;\n    var projection = viewState.projection;\n    var rotation = viewState.rotation;\n    var projectionExtent = projection.getExtent();\n    var vectorSource = this.getLayer().getSource();\n    // clipped rendering if layer extent is set\n    var clipped = false;\n    if (layerState.extent && this.clipping) {\n      var layerExtent = fromUserExtent(layerState.extent, projection);\n      clipped = !containsExtent(layerExtent, frameState.extent) && intersectsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n    var viewHints = frameState.viewHints;\n    var snapToPixel = !(viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]);\n    var transform = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, 0);\n    var declutterReplays = this.getLayer().getDeclutter() ? {} : null;\n    replayGroup.execute(context, 1, transform, rotation, snapToPixel, undefined, declutterReplays);\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n      var startX = extent[0];\n      var worldWidth = getWidth(projectionExtent);\n      var world = 0;\n      var offsetX = void 0;\n      while (startX < projectionExtent[0]) {\n        --world;\n        offsetX = worldWidth * world;\n        var transform_1 = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);\n        replayGroup.execute(context, 1, transform_1, rotation, snapToPixel, undefined, declutterReplays);\n        startX += worldWidth;\n      }\n      world = 0;\n      startX = extent[2];\n      while (startX > projectionExtent[2]) {\n        ++world;\n        offsetX = worldWidth * world;\n        var transform_2 = this.getRenderTransform(center, resolution, rotation, pixelRatio, width, height, offsetX);\n        replayGroup.execute(context, 1, transform_2, rotation, snapToPixel, undefined, declutterReplays);\n        startX -= worldWidth;\n      }\n    }\n    if (declutterReplays) {\n      var viewHints_1 = frameState.viewHints;\n      var hifi = !(viewHints_1[ViewHint.ANIMATING] || viewHints_1[ViewHint.INTERACTING]);\n      replayDeclutter(declutterReplays, context, rotation, 1, hifi, frameState.declutterItems);\n    }\n    if (clipped) {\n      context.restore();\n    }\n    this.postRender(context, frameState);\n    var opacity = layerState.opacity;\n    var container = this.container;\n    if (opacity !== parseFloat(container.style.opacity)) {\n      container.style.opacity = opacity === 1 ? '' : String(opacity);\n    }\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  };\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n  CanvasVectorLayerRenderer.prototype.getFeatures = function (pixel) {\n    return new Promise(function (resolve, reject) {\n      if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n        var size = [this.context.canvas.width, this.context.canvas.height];\n        apply(this.pixelTransform, size);\n        var center = this.renderedCenter_;\n        var resolution = this.renderedResolution_;\n        var rotation = this.renderedRotation_;\n        var projection = this.renderedProjection_;\n        var extent = this.renderedExtent_;\n        var layer = this.getLayer();\n        var transforms = [];\n        var width = size[0] / 2;\n        var height = size[1] / 2;\n        transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, 0).slice());\n        var source = layer.getSource();\n        var projectionExtent = projection.getExtent();\n        if (source.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, extent)) {\n          var startX = extent[0];\n          var worldWidth = getWidth(projectionExtent);\n          var world = 0;\n          var offsetX = void 0;\n          while (startX < projectionExtent[0]) {\n            --world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());\n            startX += worldWidth;\n          }\n          world = 0;\n          startX = extent[2];\n          while (startX > projectionExtent[2]) {\n            ++world;\n            offsetX = worldWidth * world;\n            transforms.push(this.getRenderTransform(center, resolution, rotation, 0.5, width, height, offsetX).slice());\n            startX -= worldWidth;\n          }\n        }\n        this.hitDetectionImageData_ = createHitDetectionImageData(size, transforms, this.renderedFeatures_, layer.getStyleFunction(), extent, resolution, rotation);\n      }\n      resolve(hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_));\n    }.bind(this));\n  };\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../layer/Layer.js\").default): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|void} Callback result.\n   * @template T\n   */\n  CanvasVectorLayerRenderer.prototype.forEachFeatureAtCoordinate = function (coordinate, frameState, hitTolerance, callback, declutteredFeatures) {\n    if (!this.replayGroup_) {\n      return undefined;\n    } else {\n      var resolution = frameState.viewState.resolution;\n      var rotation = frameState.viewState.rotation;\n      var layer_1 = this.getLayer();\n      /** @type {!Object<string, boolean>} */\n      var features_1 = {};\n      var result = this.replayGroup_.forEachFeatureAtCoordinate(coordinate, resolution, rotation, hitTolerance,\n      /**\n       * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n       * @return {?} Callback result.\n       */\n      function (feature) {\n        var key = getUid(feature);\n        if (!(key in features_1)) {\n          features_1[key] = true;\n          return callback(feature, layer_1);\n        }\n      }, layer_1.getDeclutter() ? declutteredFeatures : null);\n      return result;\n    }\n  };\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  CanvasVectorLayerRenderer.prototype.handleFontsChanged = function () {\n    var layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  };\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  CanvasVectorLayerRenderer.prototype.handleStyleImageChange_ = function (event) {\n    this.renderIfReadyAndVisible();\n  };\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  CanvasVectorLayerRenderer.prototype.prepareFrame = function (frameState) {\n    var vectorLayer = this.getLayer();\n    var vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n    var animating = frameState.viewHints[ViewHint.ANIMATING];\n    var interacting = frameState.viewHints[ViewHint.INTERACTING];\n    var updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    var updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n    if (!this.dirty_ && !updateWhileAnimating && animating || !updateWhileInteracting && interacting) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n    var frameStateExtent = frameState.extent;\n    var viewState = frameState.viewState;\n    var projection = viewState.projection;\n    var resolution = viewState.resolution;\n    var pixelRatio = frameState.pixelRatio;\n    var vectorLayerRevision = vectorLayer.getRevision();\n    var vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    var vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n    var center = viewState.center.slice();\n    var extent = buffer(frameStateExtent, vectorLayerRenderBuffer * resolution);\n    var loadExtents = [extent.slice()];\n    var projectionExtent = projection.getExtent();\n    if (vectorSource.getWrapX() && projection.canWrapX() && !containsExtent(projectionExtent, frameState.extent)) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      var worldWidth = getWidth(projectionExtent);\n      var gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      var loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (loadExtent[0] < projectionExtent[0] && loadExtent[2] < projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] + worldWidth, loadExtent[1], loadExtent[2] + worldWidth, loadExtent[3]]);\n      } else if (loadExtent[0] > projectionExtent[0] && loadExtent[2] > projectionExtent[2]) {\n        loadExtents.push([loadExtent[0] - worldWidth, loadExtent[1], loadExtent[2] - worldWidth, loadExtent[3]]);\n      }\n    }\n    if (!this.dirty_ && this.renderedResolution_ == resolution && this.renderedRevision_ == vectorLayerRevision && this.renderedRenderOrder_ == vectorLayerRenderOrder && containsExtent(this.renderedExtent_, extent)) {\n      this.replayGroupChanged = false;\n      return true;\n    }\n    this.replayGroup_ = null;\n    this.dirty_ = false;\n    var replayGroup = new CanvasBuilderGroup(getRenderTolerance(resolution, pixelRatio), extent, resolution, pixelRatio, vectorLayer.getDeclutter());\n    var userProjection = getUserProjection();\n    var userTransform;\n    if (userProjection) {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(toUserExtent(loadExtents[i], projection), resolution, userProjection);\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (var i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n    var squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    var render = function (feature) {\n      var styles;\n      var styleFunction = feature.getStyleFunction() || vectorLayer.getStyleFunction();\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n      if (styles) {\n        var dirty = this.renderFeature(feature, squaredTolerance, styles, replayGroup, userTransform);\n        this.dirty_ = this.dirty_ || dirty;\n      }\n    }.bind(this);\n    var userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    var features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (var i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n    var replayGroupInstructions = replayGroup.finish();\n    var executorGroup = new ExecutorGroup(extent, resolution, pixelRatio, vectorSource.getOverlaps(), replayGroupInstructions, vectorLayer.getRenderBuffer());\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n    this.replayGroupChanged = true;\n    return true;\n  };\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction=} opt_transform Transform from user to view projection.\n   * @return {boolean} `true` if an image is loading.\n   */\n  CanvasVectorLayerRenderer.prototype.renderFeature = function (feature, squaredTolerance, styles, builderGroup, opt_transform) {\n    if (!styles) {\n      return false;\n    }\n    var loading = false;\n    if (Array.isArray(styles)) {\n      for (var i = 0, ii = styles.length; i < ii; ++i) {\n        loading = renderFeature(builderGroup, feature, styles[i], squaredTolerance, this.boundHandleStyleImageChange_, opt_transform) || loading;\n      }\n    } else {\n      loading = renderFeature(builderGroup, feature, styles, squaredTolerance, this.boundHandleStyleImageChange_, opt_transform);\n    }\n    return loading;\n  };\n  return CanvasVectorLayerRenderer;\n}(CanvasLayerRenderer);\nexport default CanvasVectorLayerRenderer;","map":{"version":3,"names":["CanvasBuilderGroup","CanvasLayerRenderer","ExecutorGroup","replayDeclutter","ViewHint","apply","makeInverse","makeScale","toString","transformToString","buffer","containsExtent","createEmpty","getWidth","intersects","intersectsExtent","wrapX","wrapExtentX","createHitDetectionImageData","hitDetect","defaultOrder","defaultRenderOrder","getTolerance","getRenderTolerance","getSquaredTolerance","getSquaredRenderTolerance","renderFeature","fromUserExtent","getTransformFromProjections","getUserProjection","toUserExtent","getUid","wrapCoordinateX","CanvasVectorLayerRenderer","_super","__extends","vectorLayer","_this","call","boundHandleStyleImageChange_","handleStyleImageChange_","bind","animatingOrInteracting_","dirty_","hitDetectionImageData_","renderedFeatures_","renderedRevision_","renderedResolution_","NaN","renderedExtent_","renderedRotation_","renderedCenter_","renderedProjection_","renderedRenderOrder_","replayGroup_","replayGroupChanged","clipping","prototype","useContainer","target","transform","opacity","renderFrame","frameState","pixelRatio","layerState","layerStatesArray","layerIndex","pixelTransform","inversePixelTransform","canvasTransform","context","canvas","replayGroup","isEmpty","containerReused","width","container","Math","round","size","height","style","clearRect","preRender","extent","viewState","center","resolution","projection","rotation","projectionExtent","getExtent","vectorSource","getLayer","getSource","clipped","layerExtent","clipUnrotated","viewHints","snapToPixel","ANIMATING","INTERACTING","getRenderTransform","declutterReplays","getDeclutter","execute","undefined","getWrapX","canWrapX","startX","worldWidth","world","offsetX","transform_1","transform_2","viewHints_1","hifi","declutterItems","restore","postRender","parseFloat","String","getFeatures","pixel","Promise","resolve","reject","layer","transforms","push","slice","source","getStyleFunction","forEachFeatureAtCoordinate","coordinate","hitTolerance","callback","declutteredFeatures","layer_1","features_1","result","feature","key","handleFontsChanged","getVisible","changed","event","renderIfReadyAndVisible","prepareFrame","animating","interacting","updateWhileAnimating","getUpdateWhileAnimating","updateWhileInteracting","getUpdateWhileInteracting","frameStateExtent","vectorLayerRevision","getRevision","vectorLayerRenderBuffer","getRenderBuffer","vectorLayerRenderOrder","getRenderOrder","loadExtents","gutter","max","loadExtent","userProjection","userTransform","i","ii","length","loadFeatures","squaredTolerance","render","styles","styleFunction","dirty","userExtent","features","getFeaturesInExtent","sort","replayGroupInstructions","finish","executorGroup","getOverlaps","builderGroup","opt_transform","loading","Array","isArray"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/renderer/canvas/VectorLayer.js"],"sourcesContent":["/**\n * @module ol/renderer/canvas/VectorLayer\n */\nimport CanvasBuilderGroup from '../../render/canvas/BuilderGroup.js';\nimport CanvasLayerRenderer from './Layer.js';\nimport ExecutorGroup, {\n  replayDeclutter,\n} from '../../render/canvas/ExecutorGroup.js';\nimport ViewHint from '../../ViewHint.js';\nimport {\n  apply,\n  makeInverse,\n  makeScale,\n  toString as transformToString,\n} from '../../transform.js';\nimport {\n  buffer,\n  containsExtent,\n  createEmpty,\n  getWidth,\n  intersects as intersectsExtent,\n  wrapX as wrapExtentX,\n} from '../../extent.js';\nimport {\n  createHitDetectionImageData,\n  hitDetect,\n} from '../../render/canvas/hitdetect.js';\nimport {\n  defaultOrder as defaultRenderOrder,\n  getTolerance as getRenderTolerance,\n  getSquaredTolerance as getSquaredRenderTolerance,\n  renderFeature,\n} from '../vector.js';\nimport {\n  fromUserExtent,\n  getTransformFromProjections,\n  getUserProjection,\n  toUserExtent,\n} from '../../proj.js';\nimport {getUid} from '../../util.js';\nimport {wrapX as wrapCoordinateX} from '../../coordinate.js';\n\n/**\n * @classdesc\n * Canvas renderer for vector layers.\n * @api\n */\nclass CanvasVectorLayerRenderer extends CanvasLayerRenderer {\n  /**\n   * @param {import(\"../../layer/Vector.js\").default} vectorLayer Vector layer.\n   */\n  constructor(vectorLayer) {\n    super(vectorLayer);\n\n    /** @private */\n    this.boundHandleStyleImageChange_ = this.handleStyleImageChange_.bind(this);\n\n    /**\n     * @type {boolean}\n     */\n    this.animatingOrInteracting_;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.dirty_ = false;\n\n    /**\n     * @type {ImageData}\n     */\n    this.hitDetectionImageData_ = null;\n\n    /**\n     * @type {Array<import(\"../../Feature.js\").default>}\n     */\n    this.renderedFeatures_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedResolution_ = NaN;\n\n    /**\n     * @private\n     * @type {import(\"../../extent.js\").Extent}\n     */\n    this.renderedExtent_ = createEmpty();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRotation_;\n\n    /**\n     * @private\n     * @type {import(\"../../coordinate\").Coordinate}\n     */\n    this.renderedCenter_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../proj/Projection\").default}\n     */\n    this.renderedProjection_ = null;\n\n    /**\n     * @private\n     * @type {function(import(\"../../Feature.js\").default, import(\"../../Feature.js\").default): number|null}\n     */\n    this.renderedRenderOrder_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../../render/canvas/ExecutorGroup\").default}\n     */\n    this.replayGroup_ = null;\n\n    /**\n     * A new replay group had to be created by `prepareFrame()`\n     * @type {boolean}\n     */\n    this.replayGroupChanged = true;\n\n    /**\n     * Clipping to be performed by `renderFrame()`\n     * @type {boolean}\n     */\n    this.clipping = true;\n  }\n\n  /**\n   * Get a rendering container from an existing target, if compatible.\n   * @param {HTMLElement} target Potential render target.\n   * @param {string} transform CSS Transform.\n   * @param {number} opacity Opacity.\n   */\n  useContainer(target, transform, opacity) {\n    if (opacity < 1) {\n      target = null;\n    }\n    super.useContainer(target, transform, opacity);\n  }\n\n  /**\n   * Render the layer.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {HTMLElement} target Target that may be used to render content to.\n   * @return {HTMLElement} The rendered element.\n   */\n  renderFrame(frameState, target) {\n    const pixelRatio = frameState.pixelRatio;\n    const layerState = frameState.layerStatesArray[frameState.layerIndex];\n\n    // set forward and inverse pixel transforms\n    makeScale(this.pixelTransform, 1 / pixelRatio, 1 / pixelRatio);\n    makeInverse(this.inversePixelTransform, this.pixelTransform);\n\n    const canvasTransform = transformToString(this.pixelTransform);\n\n    this.useContainer(target, canvasTransform, layerState.opacity);\n    const context = this.context;\n    const canvas = context.canvas;\n\n    const replayGroup = this.replayGroup_;\n    if (!replayGroup || replayGroup.isEmpty()) {\n      if (!this.containerReused && canvas.width > 0) {\n        canvas.width = 0;\n      }\n      return this.container;\n    }\n\n    // resize and clear\n    const width = Math.round(frameState.size[0] * pixelRatio);\n    const height = Math.round(frameState.size[1] * pixelRatio);\n    if (canvas.width != width || canvas.height != height) {\n      canvas.width = width;\n      canvas.height = height;\n      if (canvas.style.transform !== canvasTransform) {\n        canvas.style.transform = canvasTransform;\n      }\n    } else if (!this.containerReused) {\n      context.clearRect(0, 0, width, height);\n    }\n\n    this.preRender(context, frameState);\n\n    const extent = frameState.extent;\n    const viewState = frameState.viewState;\n    const center = viewState.center;\n    const resolution = viewState.resolution;\n    const projection = viewState.projection;\n    const rotation = viewState.rotation;\n    const projectionExtent = projection.getExtent();\n    const vectorSource = this.getLayer().getSource();\n\n    // clipped rendering if layer extent is set\n    let clipped = false;\n    if (layerState.extent && this.clipping) {\n      const layerExtent = fromUserExtent(layerState.extent, projection);\n      clipped =\n        !containsExtent(layerExtent, frameState.extent) &&\n        intersectsExtent(layerExtent, frameState.extent);\n      if (clipped) {\n        this.clipUnrotated(context, frameState, layerExtent);\n      }\n    }\n\n    const viewHints = frameState.viewHints;\n    const snapToPixel = !(\n      viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n    );\n\n    const transform = this.getRenderTransform(\n      center,\n      resolution,\n      rotation,\n      pixelRatio,\n      width,\n      height,\n      0\n    );\n    const declutterReplays = this.getLayer().getDeclutter() ? {} : null;\n    replayGroup.execute(\n      context,\n      1,\n      transform,\n      rotation,\n      snapToPixel,\n      undefined,\n      declutterReplays\n    );\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, extent)\n    ) {\n      let startX = extent[0];\n      const worldWidth = getWidth(projectionExtent);\n      let world = 0;\n      let offsetX;\n      while (startX < projectionExtent[0]) {\n        --world;\n        offsetX = worldWidth * world;\n        const transform = this.getRenderTransform(\n          center,\n          resolution,\n          rotation,\n          pixelRatio,\n          width,\n          height,\n          offsetX\n        );\n        replayGroup.execute(\n          context,\n          1,\n          transform,\n          rotation,\n          snapToPixel,\n          undefined,\n          declutterReplays\n        );\n        startX += worldWidth;\n      }\n      world = 0;\n      startX = extent[2];\n      while (startX > projectionExtent[2]) {\n        ++world;\n        offsetX = worldWidth * world;\n        const transform = this.getRenderTransform(\n          center,\n          resolution,\n          rotation,\n          pixelRatio,\n          width,\n          height,\n          offsetX\n        );\n        replayGroup.execute(\n          context,\n          1,\n          transform,\n          rotation,\n          snapToPixel,\n          undefined,\n          declutterReplays\n        );\n        startX -= worldWidth;\n      }\n    }\n    if (declutterReplays) {\n      const viewHints = frameState.viewHints;\n      const hifi = !(\n        viewHints[ViewHint.ANIMATING] || viewHints[ViewHint.INTERACTING]\n      );\n      replayDeclutter(\n        declutterReplays,\n        context,\n        rotation,\n        1,\n        hifi,\n        frameState.declutterItems\n      );\n    }\n\n    if (clipped) {\n      context.restore();\n    }\n\n    this.postRender(context, frameState);\n\n    const opacity = layerState.opacity;\n    const container = this.container;\n    if (opacity !== parseFloat(container.style.opacity)) {\n      container.style.opacity = opacity === 1 ? '' : String(opacity);\n    }\n\n    if (this.renderedRotation_ !== viewState.rotation) {\n      this.renderedRotation_ = viewState.rotation;\n      this.hitDetectionImageData_ = null;\n    }\n    return this.container;\n  }\n\n  /**\n   * Asynchronous layer level hit detection.\n   * @param {import(\"../../pixel.js\").Pixel} pixel Pixel.\n   * @return {Promise<Array<import(\"../../Feature\").default>>} Promise that resolves with an array of features.\n   */\n  getFeatures(pixel) {\n    return new Promise(\n      function (resolve, reject) {\n        if (!this.hitDetectionImageData_ && !this.animatingOrInteracting_) {\n          const size = [this.context.canvas.width, this.context.canvas.height];\n          apply(this.pixelTransform, size);\n          const center = this.renderedCenter_;\n          const resolution = this.renderedResolution_;\n          const rotation = this.renderedRotation_;\n          const projection = this.renderedProjection_;\n          const extent = this.renderedExtent_;\n          const layer = this.getLayer();\n          const transforms = [];\n          const width = size[0] / 2;\n          const height = size[1] / 2;\n          transforms.push(\n            this.getRenderTransform(\n              center,\n              resolution,\n              rotation,\n              0.5,\n              width,\n              height,\n              0\n            ).slice()\n          );\n          const source = layer.getSource();\n          const projectionExtent = projection.getExtent();\n          if (\n            source.getWrapX() &&\n            projection.canWrapX() &&\n            !containsExtent(projectionExtent, extent)\n          ) {\n            let startX = extent[0];\n            const worldWidth = getWidth(projectionExtent);\n            let world = 0;\n            let offsetX;\n            while (startX < projectionExtent[0]) {\n              --world;\n              offsetX = worldWidth * world;\n              transforms.push(\n                this.getRenderTransform(\n                  center,\n                  resolution,\n                  rotation,\n                  0.5,\n                  width,\n                  height,\n                  offsetX\n                ).slice()\n              );\n              startX += worldWidth;\n            }\n            world = 0;\n            startX = extent[2];\n            while (startX > projectionExtent[2]) {\n              ++world;\n              offsetX = worldWidth * world;\n              transforms.push(\n                this.getRenderTransform(\n                  center,\n                  resolution,\n                  rotation,\n                  0.5,\n                  width,\n                  height,\n                  offsetX\n                ).slice()\n              );\n              startX -= worldWidth;\n            }\n          }\n\n          this.hitDetectionImageData_ = createHitDetectionImageData(\n            size,\n            transforms,\n            this.renderedFeatures_,\n            layer.getStyleFunction(),\n            extent,\n            resolution,\n            rotation\n          );\n        }\n        resolve(\n          hitDetect(pixel, this.renderedFeatures_, this.hitDetectionImageData_)\n        );\n      }.bind(this)\n    );\n  }\n\n  /**\n   * @param {import(\"../../coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @param {number} hitTolerance Hit tolerance in pixels.\n   * @param {function(import(\"../../Feature.js\").FeatureLike, import(\"../../layer/Layer.js\").default): T} callback Feature callback.\n   * @param {Array<import(\"../../Feature.js\").FeatureLike>} declutteredFeatures Decluttered features.\n   * @return {T|void} Callback result.\n   * @template T\n   */\n  forEachFeatureAtCoordinate(\n    coordinate,\n    frameState,\n    hitTolerance,\n    callback,\n    declutteredFeatures\n  ) {\n    if (!this.replayGroup_) {\n      return undefined;\n    } else {\n      const resolution = frameState.viewState.resolution;\n      const rotation = frameState.viewState.rotation;\n      const layer = this.getLayer();\n      /** @type {!Object<string, boolean>} */\n      const features = {};\n\n      const result = this.replayGroup_.forEachFeatureAtCoordinate(\n        coordinate,\n        resolution,\n        rotation,\n        hitTolerance,\n        /**\n         * @param {import(\"../../Feature.js\").FeatureLike} feature Feature.\n         * @return {?} Callback result.\n         */\n        function (feature) {\n          const key = getUid(feature);\n          if (!(key in features)) {\n            features[key] = true;\n            return callback(feature, layer);\n          }\n        },\n        layer.getDeclutter() ? declutteredFeatures : null\n      );\n\n      return result;\n    }\n  }\n\n  /**\n   * Perform action necessary to get the layer rendered after new fonts have loaded\n   */\n  handleFontsChanged() {\n    const layer = this.getLayer();\n    if (layer.getVisible() && this.replayGroup_) {\n      layer.changed();\n    }\n  }\n\n  /**\n   * Handle changes in image style state.\n   * @param {import(\"../../events/Event.js\").default} event Image style change event.\n   * @private\n   */\n  handleStyleImageChange_(event) {\n    this.renderIfReadyAndVisible();\n  }\n\n  /**\n   * Determine whether render should be called.\n   * @param {import(\"../../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {boolean} Layer is ready to be rendered.\n   */\n  prepareFrame(frameState) {\n    const vectorLayer = this.getLayer();\n    const vectorSource = vectorLayer.getSource();\n    if (!vectorSource) {\n      return false;\n    }\n\n    const animating = frameState.viewHints[ViewHint.ANIMATING];\n    const interacting = frameState.viewHints[ViewHint.INTERACTING];\n    const updateWhileAnimating = vectorLayer.getUpdateWhileAnimating();\n    const updateWhileInteracting = vectorLayer.getUpdateWhileInteracting();\n\n    if (\n      (!this.dirty_ && !updateWhileAnimating && animating) ||\n      (!updateWhileInteracting && interacting)\n    ) {\n      this.animatingOrInteracting_ = true;\n      return true;\n    }\n    this.animatingOrInteracting_ = false;\n\n    const frameStateExtent = frameState.extent;\n    const viewState = frameState.viewState;\n    const projection = viewState.projection;\n    const resolution = viewState.resolution;\n    const pixelRatio = frameState.pixelRatio;\n    const vectorLayerRevision = vectorLayer.getRevision();\n    const vectorLayerRenderBuffer = vectorLayer.getRenderBuffer();\n    let vectorLayerRenderOrder = vectorLayer.getRenderOrder();\n\n    if (vectorLayerRenderOrder === undefined) {\n      vectorLayerRenderOrder = defaultRenderOrder;\n    }\n\n    const center = viewState.center.slice();\n    const extent = buffer(\n      frameStateExtent,\n      vectorLayerRenderBuffer * resolution\n    );\n    const loadExtents = [extent.slice()];\n    const projectionExtent = projection.getExtent();\n\n    if (\n      vectorSource.getWrapX() &&\n      projection.canWrapX() &&\n      !containsExtent(projectionExtent, frameState.extent)\n    ) {\n      // For the replay group, we need an extent that intersects the real world\n      // (-180° to +180°). To support geometries in a coordinate range from -540°\n      // to +540°, we add at least 1 world width on each side of the projection\n      // extent. If the viewport is wider than the world, we need to add half of\n      // the viewport width to make sure we cover the whole viewport.\n      const worldWidth = getWidth(projectionExtent);\n      const gutter = Math.max(getWidth(extent) / 2, worldWidth);\n      extent[0] = projectionExtent[0] - gutter;\n      extent[2] = projectionExtent[2] + gutter;\n      wrapCoordinateX(center, projection);\n      const loadExtent = wrapExtentX(loadExtents[0], projection);\n      // If the extent crosses the date line, we load data for both edges of the worlds\n      if (\n        loadExtent[0] < projectionExtent[0] &&\n        loadExtent[2] < projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] + worldWidth,\n          loadExtent[1],\n          loadExtent[2] + worldWidth,\n          loadExtent[3],\n        ]);\n      } else if (\n        loadExtent[0] > projectionExtent[0] &&\n        loadExtent[2] > projectionExtent[2]\n      ) {\n        loadExtents.push([\n          loadExtent[0] - worldWidth,\n          loadExtent[1],\n          loadExtent[2] - worldWidth,\n          loadExtent[3],\n        ]);\n      }\n    }\n\n    if (\n      !this.dirty_ &&\n      this.renderedResolution_ == resolution &&\n      this.renderedRevision_ == vectorLayerRevision &&\n      this.renderedRenderOrder_ == vectorLayerRenderOrder &&\n      containsExtent(this.renderedExtent_, extent)\n    ) {\n      this.replayGroupChanged = false;\n      return true;\n    }\n\n    this.replayGroup_ = null;\n\n    this.dirty_ = false;\n\n    const replayGroup = new CanvasBuilderGroup(\n      getRenderTolerance(resolution, pixelRatio),\n      extent,\n      resolution,\n      pixelRatio,\n      vectorLayer.getDeclutter()\n    );\n\n    const userProjection = getUserProjection();\n    let userTransform;\n    if (userProjection) {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(\n          toUserExtent(loadExtents[i], projection),\n          resolution,\n          userProjection\n        );\n      }\n      userTransform = getTransformFromProjections(userProjection, projection);\n    } else {\n      for (let i = 0, ii = loadExtents.length; i < ii; ++i) {\n        vectorSource.loadFeatures(loadExtents[i], resolution, projection);\n      }\n    }\n\n    const squaredTolerance = getSquaredRenderTolerance(resolution, pixelRatio);\n\n    /**\n     * @param {import(\"../../Feature.js\").default} feature Feature.\n     * @this {CanvasVectorLayerRenderer}\n     */\n    const render = function (feature) {\n      let styles;\n      const styleFunction =\n        feature.getStyleFunction() || vectorLayer.getStyleFunction();\n      if (styleFunction) {\n        styles = styleFunction(feature, resolution);\n      }\n      if (styles) {\n        const dirty = this.renderFeature(\n          feature,\n          squaredTolerance,\n          styles,\n          replayGroup,\n          userTransform\n        );\n        this.dirty_ = this.dirty_ || dirty;\n      }\n    }.bind(this);\n\n    const userExtent = toUserExtent(extent, projection);\n    /** @type {Array<import(\"../../Feature.js\").default>} */\n    const features = vectorSource.getFeaturesInExtent(userExtent);\n    if (vectorLayerRenderOrder) {\n      features.sort(vectorLayerRenderOrder);\n    }\n    for (let i = 0, ii = features.length; i < ii; ++i) {\n      render(features[i]);\n    }\n    this.renderedFeatures_ = features;\n\n    const replayGroupInstructions = replayGroup.finish();\n    const executorGroup = new ExecutorGroup(\n      extent,\n      resolution,\n      pixelRatio,\n      vectorSource.getOverlaps(),\n      replayGroupInstructions,\n      vectorLayer.getRenderBuffer()\n    );\n\n    this.renderedResolution_ = resolution;\n    this.renderedRevision_ = vectorLayerRevision;\n    this.renderedRenderOrder_ = vectorLayerRenderOrder;\n    this.renderedExtent_ = extent;\n    this.renderedCenter_ = center;\n    this.renderedProjection_ = projection;\n    this.replayGroup_ = executorGroup;\n    this.hitDetectionImageData_ = null;\n\n    this.replayGroupChanged = true;\n    return true;\n  }\n\n  /**\n   * @param {import(\"../../Feature.js\").default} feature Feature.\n   * @param {number} squaredTolerance Squared render tolerance.\n   * @param {import(\"../../style/Style.js\").default|Array<import(\"../../style/Style.js\").default>} styles The style or array of styles.\n   * @param {import(\"../../render/canvas/BuilderGroup.js\").default} builderGroup Builder group.\n   * @param {import(\"../../proj.js\").TransformFunction=} opt_transform Transform from user to view projection.\n   * @return {boolean} `true` if an image is loading.\n   */\n  renderFeature(\n    feature,\n    squaredTolerance,\n    styles,\n    builderGroup,\n    opt_transform\n  ) {\n    if (!styles) {\n      return false;\n    }\n    let loading = false;\n    if (Array.isArray(styles)) {\n      for (let i = 0, ii = styles.length; i < ii; ++i) {\n        loading =\n          renderFeature(\n            builderGroup,\n            feature,\n            styles[i],\n            squaredTolerance,\n            this.boundHandleStyleImageChange_,\n            opt_transform\n          ) || loading;\n      }\n    } else {\n      loading = renderFeature(\n        builderGroup,\n        feature,\n        styles,\n        squaredTolerance,\n        this.boundHandleStyleImageChange_,\n        opt_transform\n      );\n    }\n    return loading;\n  }\n}\n\nexport default CanvasVectorLayerRenderer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}