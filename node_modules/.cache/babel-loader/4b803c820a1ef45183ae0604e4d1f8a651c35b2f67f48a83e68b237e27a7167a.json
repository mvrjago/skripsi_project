{"ast":null,"code":"/**\n * @module ol/render/Feature\n */\nimport GeometryType from '../geom/GeometryType.js';\nimport { compose as composeTransform, create as createTransform } from '../transform.js';\nimport { createOrUpdateFromCoordinate, createOrUpdateFromFlatCoordinates, getCenter, getHeight } from '../extent.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray, getInteriorPointsOfMultiArray } from '../geom/flat/interiorpoint.js';\nimport { get as getProjection } from '../proj.js';\nimport { interpolatePoint } from '../geom/flat/interpolate.js';\nimport { linearRingss as linearRingssCenter } from '../geom/flat/center.js';\nimport { transform2D } from '../geom/flat/transform.js';\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nvar tmpTransform = createTransform();\n/**\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\n * structure, optimized for vector tile rendering and styling. Geometry access\n * through the API is limited to getting the type and extent of the geometry.\n */\nvar RenderFeature = /** @class */function () {\n  /**\n   * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\n   *     to be right-handed for polygons.\n   * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.\n   * @param {Object<string, *>} properties Properties.\n   * @param {number|string|undefined} id Feature id.\n   */\n  function RenderFeature(type, flatCoordinates, ends, properties, id) {\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.extent_;\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = id;\n    /**\n     * @private\n     * @type {import(\"../geom/GeometryType.js\").default}\n     */\n    this.type_ = type;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatCoordinates_ = flatCoordinates;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatInteriorPoints_ = null;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatMidpoints_ = null;\n    /**\n     * @private\n     * @type {Array<number>|Array<Array<number>>}\n     */\n    this.ends_ = ends;\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    this.properties_ = properties;\n  }\n  /**\n   * Get a feature property by its key.\n   * @param {string} key Key\n   * @return {*} Value for the requested key.\n   * @api\n   */\n  RenderFeature.prototype.get = function (key) {\n    return this.properties_[key];\n  };\n  /**\n   * Get the extent of this feature's geometry.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  RenderFeature.prototype.getExtent = function () {\n    if (!this.extent_) {\n      this.extent_ = this.type_ === GeometryType.POINT ? createOrUpdateFromCoordinate(this.flatCoordinates_) : createOrUpdateFromFlatCoordinates(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2);\n    }\n    return this.extent_;\n  };\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  RenderFeature.prototype.getFlatInteriorPoint = function () {\n    if (!this.flatInteriorPoints_) {\n      var flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoints_ = getInteriorPointOfArray(this.flatCoordinates_, 0, /** @type {Array<number>} */this.ends_, 2, flatCenter, 0);\n    }\n    return this.flatInteriorPoints_;\n  };\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  RenderFeature.prototype.getFlatInteriorPoints = function () {\n    if (!this.flatInteriorPoints_) {\n      var flatCenters = linearRingssCenter(this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */this.ends_, 2);\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(this.flatCoordinates_, 0, /** @type {Array<Array<number>>} */this.ends_, 2, flatCenters);\n    }\n    return this.flatInteriorPoints_;\n  };\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  RenderFeature.prototype.getFlatMidpoint = function () {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = interpolatePoint(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, 0.5);\n    }\n    return this.flatMidpoints_;\n  };\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  RenderFeature.prototype.getFlatMidpoints = function () {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = [];\n      var flatCoordinates = this.flatCoordinates_;\n      var offset = 0;\n      var ends = /** @type {Array<number>} */this.ends_;\n      for (var i = 0, ii = ends.length; i < ii; ++i) {\n        var end = ends[i];\n        var midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\n        extend(this.flatMidpoints_, midpoint);\n        offset = end;\n      }\n    }\n    return this.flatMidpoints_;\n  };\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is set when reading data from a remote source.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  RenderFeature.prototype.getId = function () {\n    return this.id_;\n  };\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  RenderFeature.prototype.getOrientedFlatCoordinates = function () {\n    return this.flatCoordinates_;\n  };\n  /**\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\n   * determining the geometry type in style function (see {@link #getType}).\n   * @return {RenderFeature} Feature.\n   * @api\n   */\n  RenderFeature.prototype.getGeometry = function () {\n    return this;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {RenderFeature} Simplified geometry.\n   */\n  RenderFeature.prototype.getSimplifiedGeometry = function (squaredTolerance) {\n    return this;\n  };\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n   * @return {RenderFeature} Simplified geometry.\n   */\n  RenderFeature.prototype.simplifyTransformed = function (squaredTolerance, opt_transform) {\n    return this;\n  };\n  /**\n   * Get the feature properties.\n   * @return {Object<string, *>} Feature properties.\n   * @api\n   */\n  RenderFeature.prototype.getProperties = function () {\n    return this.properties_;\n  };\n  /**\n   * @return {number} Stride.\n   */\n  RenderFeature.prototype.getStride = function () {\n    return 2;\n  };\n  /**\n   * @return {undefined}\n   */\n  RenderFeature.prototype.getStyleFunction = function () {\n    return undefined;\n  };\n  /**\n   * Get the type of this feature's geometry.\n   * @return {import(\"../geom/GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  RenderFeature.prototype.getType = function () {\n    return this.type_;\n  };\n  /**\n   * Transform geometry coordinates from tile pixel space to projected.\n   * The SRS of the source and destination are expected to be the same.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.\n   */\n  RenderFeature.prototype.transform = function (source, destination) {\n    source = getProjection(source);\n    var pixelExtent = source.getExtent();\n    var projectedExtent = source.getWorldExtent();\n    var scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n    composeTransform(tmpTransform, projectedExtent[0], projectedExtent[3], scale, -scale, 0, 0, 0);\n    transform2D(this.flatCoordinates_, 0, this.flatCoordinates_.length, 2, tmpTransform, this.flatCoordinates_);\n  };\n  /**\n   * @return {Array<number>|Array<Array<number>>} Ends or endss.\n   */\n  RenderFeature.prototype.getEnds = function () {\n    return this.ends_;\n  };\n  return RenderFeature;\n}();\nRenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;\n/**\n * @return {Array<number>} Flat coordinates.\n */\nRenderFeature.prototype.getFlatCoordinates = RenderFeature.prototype.getOrientedFlatCoordinates;\nexport default RenderFeature;","map":{"version":3,"names":["GeometryType","compose","composeTransform","create","createTransform","createOrUpdateFromCoordinate","createOrUpdateFromFlatCoordinates","getCenter","getHeight","extend","getInteriorPointOfArray","getInteriorPointsOfMultiArray","get","getProjection","interpolatePoint","linearRingss","linearRingssCenter","transform2D","tmpTransform","RenderFeature","type","flatCoordinates","ends","properties","id","extent_","id_","type_","flatCoordinates_","flatInteriorPoints_","flatMidpoints_","ends_","properties_","prototype","key","getExtent","POINT","length","getFlatInteriorPoint","flatCenter","getFlatInteriorPoints","flatCenters","getFlatMidpoint","getFlatMidpoints","offset","i","ii","end","midpoint","getId","getOrientedFlatCoordinates","getGeometry","getSimplifiedGeometry","squaredTolerance","simplifyTransformed","opt_transform","getProperties","getStride","getStyleFunction","undefined","getType","transform","source","destination","pixelExtent","projectedExtent","getWorldExtent","scale","getEnds","getEndss","getFlatCoordinates"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/render/Feature.js"],"sourcesContent":["/**\n * @module ol/render/Feature\n */\nimport GeometryType from '../geom/GeometryType.js';\nimport {\n  compose as composeTransform,\n  create as createTransform,\n} from '../transform.js';\nimport {\n  createOrUpdateFromCoordinate,\n  createOrUpdateFromFlatCoordinates,\n  getCenter,\n  getHeight,\n} from '../extent.js';\nimport {extend} from '../array.js';\nimport {\n  getInteriorPointOfArray,\n  getInteriorPointsOfMultiArray,\n} from '../geom/flat/interiorpoint.js';\nimport {get as getProjection} from '../proj.js';\nimport {interpolatePoint} from '../geom/flat/interpolate.js';\nimport {linearRingss as linearRingssCenter} from '../geom/flat/center.js';\nimport {transform2D} from '../geom/flat/transform.js';\n\n/**\n * @type {import(\"../transform.js\").Transform}\n */\nconst tmpTransform = createTransform();\n\n/**\n * Lightweight, read-only, {@link module:ol/Feature~Feature} and {@link module:ol/geom/Geometry~Geometry} like\n * structure, optimized for vector tile rendering and styling. Geometry access\n * through the API is limited to getting the type and extent of the geometry.\n */\nclass RenderFeature {\n  /**\n   * @param {import(\"../geom/GeometryType.js\").default} type Geometry type.\n   * @param {Array<number>} flatCoordinates Flat coordinates. These always need\n   *     to be right-handed for polygons.\n   * @param {Array<number>|Array<Array<number>>} ends Ends or Endss.\n   * @param {Object<string, *>} properties Properties.\n   * @param {number|string|undefined} id Feature id.\n   */\n  constructor(type, flatCoordinates, ends, properties, id) {\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent|undefined}\n     */\n    this.extent_;\n\n    /**\n     * @private\n     * @type {number|string|undefined}\n     */\n    this.id_ = id;\n\n    /**\n     * @private\n     * @type {import(\"../geom/GeometryType.js\").default}\n     */\n    this.type_ = type;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatCoordinates_ = flatCoordinates;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatInteriorPoints_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.flatMidpoints_ = null;\n\n    /**\n     * @private\n     * @type {Array<number>|Array<Array<number>>}\n     */\n    this.ends_ = ends;\n\n    /**\n     * @private\n     * @type {Object<string, *>}\n     */\n    this.properties_ = properties;\n  }\n\n  /**\n   * Get a feature property by its key.\n   * @param {string} key Key\n   * @return {*} Value for the requested key.\n   * @api\n   */\n  get(key) {\n    return this.properties_[key];\n  }\n\n  /**\n   * Get the extent of this feature's geometry.\n   * @return {import(\"../extent.js\").Extent} Extent.\n   * @api\n   */\n  getExtent() {\n    if (!this.extent_) {\n      this.extent_ =\n        this.type_ === GeometryType.POINT\n          ? createOrUpdateFromCoordinate(this.flatCoordinates_)\n          : createOrUpdateFromFlatCoordinates(\n              this.flatCoordinates_,\n              0,\n              this.flatCoordinates_.length,\n              2\n            );\n    }\n    return this.extent_;\n  }\n\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  getFlatInteriorPoint() {\n    if (!this.flatInteriorPoints_) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoints_ = getInteriorPointOfArray(\n        this.flatCoordinates_,\n        0,\n        /** @type {Array<number>} */ (this.ends_),\n        2,\n        flatCenter,\n        0\n      );\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\n   * @return {Array<number>} Flat interior points.\n   */\n  getFlatInteriorPoints() {\n    if (!this.flatInteriorPoints_) {\n      const flatCenters = linearRingssCenter(\n        this.flatCoordinates_,\n        0,\n        /** @type {Array<Array<number>>} */ (this.ends_),\n        2\n      );\n      this.flatInteriorPoints_ = getInteriorPointsOfMultiArray(\n        this.flatCoordinates_,\n        0,\n        /** @type {Array<Array<number>>} */ (this.ends_),\n        2,\n        flatCenters\n      );\n    }\n    return this.flatInteriorPoints_;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoint.\n   */\n  getFlatMidpoint() {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = interpolatePoint(\n        this.flatCoordinates_,\n        0,\n        this.flatCoordinates_.length,\n        2,\n        0.5\n      );\n    }\n    return this.flatMidpoints_;\n  }\n\n  /**\n   * @return {Array<number>} Flat midpoints.\n   */\n  getFlatMidpoints() {\n    if (!this.flatMidpoints_) {\n      this.flatMidpoints_ = [];\n      const flatCoordinates = this.flatCoordinates_;\n      let offset = 0;\n      const ends = /** @type {Array<number>} */ (this.ends_);\n      for (let i = 0, ii = ends.length; i < ii; ++i) {\n        const end = ends[i];\n        const midpoint = interpolatePoint(flatCoordinates, offset, end, 2, 0.5);\n        extend(this.flatMidpoints_, midpoint);\n        offset = end;\n      }\n    }\n    return this.flatMidpoints_;\n  }\n\n  /**\n   * Get the feature identifier.  This is a stable identifier for the feature and\n   * is set when reading data from a remote source.\n   * @return {number|string|undefined} Id.\n   * @api\n   */\n  getId() {\n    return this.id_;\n  }\n\n  /**\n   * @return {Array<number>} Flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    return this.flatCoordinates_;\n  }\n\n  /**\n   * For API compatibility with {@link module:ol/Feature~Feature}, this method is useful when\n   * determining the geometry type in style function (see {@link #getType}).\n   * @return {RenderFeature} Feature.\n   * @api\n   */\n  getGeometry() {\n    return this;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {RenderFeature} Simplified geometry.\n   */\n  getSimplifiedGeometry(squaredTolerance) {\n    return this;\n  }\n\n  /**\n   * Get a transformed and simplified version of the geometry.\n   * @abstract\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../proj.js\").TransformFunction} [opt_transform] Optional transform function.\n   * @return {RenderFeature} Simplified geometry.\n   */\n  simplifyTransformed(squaredTolerance, opt_transform) {\n    return this;\n  }\n\n  /**\n   * Get the feature properties.\n   * @return {Object<string, *>} Feature properties.\n   * @api\n   */\n  getProperties() {\n    return this.properties_;\n  }\n\n  /**\n   * @return {number} Stride.\n   */\n  getStride() {\n    return 2;\n  }\n\n  /**\n   * @return {undefined}\n   */\n  getStyleFunction() {\n    return undefined;\n  }\n\n  /**\n   * Get the type of this feature's geometry.\n   * @return {import(\"../geom/GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return this.type_;\n  }\n\n  /**\n   * Transform geometry coordinates from tile pixel space to projected.\n   * The SRS of the source and destination are expected to be the same.\n   *\n   * @param {import(\"../proj.js\").ProjectionLike} source The current projection\n   * @param {import(\"../proj.js\").ProjectionLike} destination The desired projection.\n   */\n  transform(source, destination) {\n    source = getProjection(source);\n    const pixelExtent = source.getExtent();\n    const projectedExtent = source.getWorldExtent();\n    const scale = getHeight(projectedExtent) / getHeight(pixelExtent);\n    composeTransform(\n      tmpTransform,\n      projectedExtent[0],\n      projectedExtent[3],\n      scale,\n      -scale,\n      0,\n      0,\n      0\n    );\n    transform2D(\n      this.flatCoordinates_,\n      0,\n      this.flatCoordinates_.length,\n      2,\n      tmpTransform,\n      this.flatCoordinates_\n    );\n  }\n  /**\n   * @return {Array<number>|Array<Array<number>>} Ends or endss.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n}\n\nRenderFeature.prototype.getEndss = RenderFeature.prototype.getEnds;\n\n/**\n * @return {Array<number>} Flat coordinates.\n */\nRenderFeature.prototype.getFlatCoordinates =\n  RenderFeature.prototype.getOrientedFlatCoordinates;\n\nexport default RenderFeature;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}