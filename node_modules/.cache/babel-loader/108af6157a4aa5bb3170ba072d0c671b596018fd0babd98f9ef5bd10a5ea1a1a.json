{"ast":null,"code":"/**\n * @module ol/style/Circle\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport RegularShape from './RegularShape.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n */\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nvar CircleStyle = /** @class */function (_super) {\n  __extends(CircleStyle, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function CircleStyle(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      displacement: options.displacement !== undefined ? options.displacement : [0, 0]\n    }) || this;\n    return _this;\n  }\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */\n  CircleStyle.prototype.clone = function () {\n    var style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      displacement: this.getDisplacement().slice()\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  };\n  /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */\n  CircleStyle.prototype.setRadius = function (radius) {\n    this.radius_ = radius;\n    this.render();\n  };\n  return CircleStyle;\n}(RegularShape);\nexport default CircleStyle;","map":{"version":3,"names":["RegularShape","CircleStyle","_super","__extends","opt_options","_this","options","call","points","Infinity","fill","radius","stroke","displacement","undefined","prototype","clone","style","getFill","getStroke","getRadius","getDisplacement","slice","setOpacity","getOpacity","setScale","getScale","setRadius","radius_","render"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/style/Circle.js"],"sourcesContent":["/**\n * @module ol/style/Circle\n */\n\nimport RegularShape from './RegularShape.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Fill.js\").default} [fill] Fill style.\n * @property {number} radius Circle radius.\n * @property {import(\"./Stroke.js\").default} [stroke] Stroke style.\n * @property {Array<number>} [displacement=[0,0]] displacement\n */\n\n/**\n * @classdesc\n * Set circle style for vector features.\n * @api\n */\nclass CircleStyle extends RegularShape {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      points: Infinity,\n      fill: options.fill,\n      radius: options.radius,\n      stroke: options.stroke,\n      displacement:\n        options.displacement !== undefined ? options.displacement : [0, 0],\n    });\n  }\n\n  /**\n   * Clones the style.\n   * @return {CircleStyle} The cloned style.\n   * @api\n   */\n  clone() {\n    const style = new CircleStyle({\n      fill: this.getFill() ? this.getFill().clone() : undefined,\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\n      radius: this.getRadius(),\n      displacement: this.getDisplacement().slice(),\n    });\n    style.setOpacity(this.getOpacity());\n    style.setScale(this.getScale());\n    return style;\n  }\n\n  /**\n   * Set the circle radius.\n   *\n   * @param {number} radius Circle radius.\n   * @api\n   */\n  setRadius(radius) {\n    this.radius_ = radius;\n    this.render();\n  }\n}\n\nexport default CircleStyle;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,YAAY,MAAM,mBAAmB;AAE5C;;;;;;;AAQA;;;;;AAKA,IAAAC,WAAA,0BAAAC,MAAA;EAA0BC,SAAA,CAAAF,WAAA,EAAAC,MAAA;EACxB;;;EAGA,SAAAD,YAAYG,WAAW;IAAvB,IAAAC,KAAA;IACE,IAAMC,OAAO,GAAGF,WAAW,GAAGA,WAAW,GAAG,EAAE;IAE9CC,KAAA,GAAAH,MAAA,CAAAK,IAAA,OAAM;MACJC,MAAM,EAAEC,QAAQ;MAChBC,IAAI,EAAEJ,OAAO,CAACI,IAAI;MAClBC,MAAM,EAAEL,OAAO,CAACK,MAAM;MACtBC,MAAM,EAAEN,OAAO,CAACM,MAAM;MACtBC,YAAY,EACVP,OAAO,CAACO,YAAY,KAAKC,SAAS,GAAGR,OAAO,CAACO,YAAY,GAAG,CAAC,CAAC,EAAE,CAAC;KACpE,CAAC;;EACJ;EAEA;;;;;EAKAZ,WAAA,CAAAc,SAAA,CAAAC,KAAK,GAAL;IACE,IAAMC,KAAK,GAAG,IAAIhB,WAAW,CAAC;MAC5BS,IAAI,EAAE,IAAI,CAACQ,OAAO,EAAE,GAAG,IAAI,CAACA,OAAO,EAAE,CAACF,KAAK,EAAE,GAAGF,SAAS;MACzDF,MAAM,EAAE,IAAI,CAACO,SAAS,EAAE,GAAG,IAAI,CAACA,SAAS,EAAE,CAACH,KAAK,EAAE,GAAGF,SAAS;MAC/DH,MAAM,EAAE,IAAI,CAACS,SAAS,EAAE;MACxBP,YAAY,EAAE,IAAI,CAACQ,eAAe,EAAE,CAACC,KAAK;KAC3C,CAAC;IACFL,KAAK,CAACM,UAAU,CAAC,IAAI,CAACC,UAAU,EAAE,CAAC;IACnCP,KAAK,CAACQ,QAAQ,CAAC,IAAI,CAACC,QAAQ,EAAE,CAAC;IAC/B,OAAOT,KAAK;EACd,CAAC;EAED;;;;;;EAMAhB,WAAA,CAAAc,SAAA,CAAAY,SAAS,GAAT,UAAUhB,MAAM;IACd,IAAI,CAACiB,OAAO,GAAGjB,MAAM;IACrB,IAAI,CAACkB,MAAM,EAAE;EACf,CAAC;EACH,OAAA5B,WAAC;AAAD,CAAC,CA5CyBD,YAAY;AA8CtC,eAAeC,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}