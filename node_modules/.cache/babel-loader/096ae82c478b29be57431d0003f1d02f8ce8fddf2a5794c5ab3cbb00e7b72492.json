{"ast":null,"code":"/**\n * @module ol/loadingstrategy\n */\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution) {\n      var z = tileGrid.getZForResolution(resolution);\n      var tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      var extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      var tileCoord = [z, 0, 0];\n      for (tileCoord[1] = tileRange.minX; tileCoord[1] <= tileRange.maxX; ++tileCoord[1]) {\n        for (tileCoord[2] = tileRange.minY; tileCoord[2] <= tileRange.maxY; ++tileCoord[2]) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n      return extents;\n    }\n  );\n}","map":{"version":3,"names":["all","extent","resolution","Infinity","bbox","tile","tileGrid","z","getZForResolution","tileRange","getTileRangeForExtentAndZ","extents","tileCoord","minX","maxX","minY","maxY","push","getTileCoordExtent"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/loadingstrategy.js"],"sourcesContent":["/**\n * @module ol/loadingstrategy\n */\n\n/**\n * Strategy function for loading all features with a single request.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function all(extent, resolution) {\n  return [[-Infinity, -Infinity, Infinity, Infinity]];\n}\n\n/**\n * Strategy function for loading features based on the view's extent and\n * resolution.\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {number} resolution Resolution.\n * @return {Array<import(\"./extent.js\").Extent>} Extents.\n * @api\n */\nexport function bbox(extent, resolution) {\n  return [extent];\n}\n\n/**\n * Creates a strategy function for loading features based on a tile grid.\n * @param {import(\"./tilegrid/TileGrid.js\").default} tileGrid Tile grid.\n * @return {function(import(\"./extent.js\").Extent, number): Array<import(\"./extent.js\").Extent>} Loading strategy.\n * @api\n */\nexport function tile(tileGrid) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @return {Array<import(\"./extent.js\").Extent>} Extents.\n     */\n    function (extent, resolution) {\n      const z = tileGrid.getZForResolution(resolution);\n      const tileRange = tileGrid.getTileRangeForExtentAndZ(extent, z);\n      /** @type {Array<import(\"./extent.js\").Extent>} */\n      const extents = [];\n      /** @type {import(\"./tilecoord.js\").TileCoord} */\n      const tileCoord = [z, 0, 0];\n      for (\n        tileCoord[1] = tileRange.minX;\n        tileCoord[1] <= tileRange.maxX;\n        ++tileCoord[1]\n      ) {\n        for (\n          tileCoord[2] = tileRange.minY;\n          tileCoord[2] <= tileRange.maxY;\n          ++tileCoord[2]\n        ) {\n          extents.push(tileGrid.getTileCoordExtent(tileCoord));\n        }\n      }\n      return extents;\n    }\n  );\n}\n"],"mappings":"AAAA;;;AAIA;;;;;;;AAOA,OAAM,SAAUA,GAAGA,CAACC,MAAM,EAAEC,UAAU;EACpC,OAAO,CAAC,CAAC,CAACC,QAAQ,EAAE,CAACA,QAAQ,EAAEA,QAAQ,EAAEA,QAAQ,CAAC,CAAC;AACrD;AAEA;;;;;;;;AAQA,OAAM,SAAUC,IAAIA,CAACH,MAAM,EAAEC,UAAU;EACrC,OAAO,CAACD,MAAM,CAAC;AACjB;AAEA;;;;;;AAMA,OAAM,SAAUI,IAAIA,CAACC,QAAQ;EAC3B;IACE;;;;;IAKA,UAAUL,MAAM,EAAEC,UAAU;MAC1B,IAAMK,CAAC,GAAGD,QAAQ,CAACE,iBAAiB,CAACN,UAAU,CAAC;MAChD,IAAMO,SAAS,GAAGH,QAAQ,CAACI,yBAAyB,CAACT,MAAM,EAAEM,CAAC,CAAC;MAC/D;MACA,IAAMI,OAAO,GAAG,EAAE;MAClB;MACA,IAAMC,SAAS,GAAG,CAACL,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MAC3B,KACEK,SAAS,CAAC,CAAC,CAAC,GAAGH,SAAS,CAACI,IAAI,EAC7BD,SAAS,CAAC,CAAC,CAAC,IAAIH,SAAS,CAACK,IAAI,EAC9B,EAAEF,SAAS,CAAC,CAAC,CAAC,EACd;QACA,KACEA,SAAS,CAAC,CAAC,CAAC,GAAGH,SAAS,CAACM,IAAI,EAC7BH,SAAS,CAAC,CAAC,CAAC,IAAIH,SAAS,CAACO,IAAI,EAC9B,EAAEJ,SAAS,CAAC,CAAC,CAAC,EACd;UACAD,OAAO,CAACM,IAAI,CAACX,QAAQ,CAACY,kBAAkB,CAACN,SAAS,CAAC,CAAC;;;MAGxD,OAAOD,OAAO;IAChB;EAAC;AAEL"},"metadata":{},"sourceType":"module","externalDependencies":[]}