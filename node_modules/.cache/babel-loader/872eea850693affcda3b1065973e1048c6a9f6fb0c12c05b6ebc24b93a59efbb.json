{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, { TileSourceEvent } from './Tile.js';\nimport TileState from '../TileState.js';\nimport { createFromTemplates, expandUrl } from '../tileurlfunction.js';\nimport { getKeyZXY } from '../tilecoord.js';\nimport { getUid } from '../util.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n * @property {number} [zDirection=0]\n */\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nvar UrlTile = /** @class */function (_super) {\n  __extends(UrlTile, _super);\n  /**\n   * @param {Options} options Image tile options.\n   */\n  function UrlTile(options) {\n    var _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection\n    }) || this;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.generateTileUrlFunction_ = _this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    _this.tileLoadFunction = options.tileLoadFunction;\n    if (options.tileUrlFunction) {\n      _this.tileUrlFunction = options.tileUrlFunction.bind(_this);\n    }\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    _this.urls = null;\n    if (options.urls) {\n      _this.setUrls(options.urls);\n    } else if (options.url) {\n      _this.setUrl(options.url);\n    }\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    _this.tileLoadingKeys_ = {};\n    return _this;\n  }\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  UrlTile.prototype.getTileLoadFunction = function () {\n    return this.tileLoadFunction;\n  };\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  UrlTile.prototype.getTileUrlFunction = function () {\n    return this.tileUrlFunction;\n  };\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  UrlTile.prototype.getUrls = function () {\n    return this.urls;\n  };\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  UrlTile.prototype.handleTileChange = function (event) {\n    var tile = /** @type {import(\"../Tile.js\").default} */event.target;\n    var uid = getUid(tile);\n    var tileState = tile.getState();\n    var type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type = tileState == TileState.ERROR ? TileEventType.TILELOADERROR : tileState == TileState.LOADED ? TileEventType.TILELOADEND : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  };\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  UrlTile.prototype.setTileLoadFunction = function (tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} key Optional new tile key for the source.\n   * @api\n   */\n  UrlTile.prototype.setTileUrlFunction = function (tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  UrlTile.prototype.setUrl = function (url) {\n    var urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  };\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  UrlTile.prototype.setUrls = function (urls) {\n    this.urls = urls;\n    var key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  UrlTile.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n    return undefined;\n  };\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  UrlTile.prototype.useTile = function (z, x, y) {\n    var tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  };\n  return UrlTile;\n}(TileSource);\nexport default UrlTile;","map":{"version":3,"names":["TileEventType","TileSource","TileSourceEvent","TileState","createFromTemplates","expandUrl","getKeyZXY","getUid","UrlTile","_super","__extends","options","_this","call","attributions","cacheSize","opaque","projection","state","tileGrid","tilePixelRatio","wrapX","transition","key","attributionsCollapsible","zDirection","generateTileUrlFunction_","tileUrlFunction","prototype","tileLoadFunction","bind","urls","setUrls","url","setUrl","tileLoadingKeys_","getTileLoadFunction","getTileUrlFunction","getUrls","handleTileChange","event","tile","target","uid","tileState","getState","type","LOADING","TILELOADSTART","ERROR","TILELOADERROR","LOADED","TILELOADEND","undefined","dispatchEvent","setTileLoadFunction","tileCache","clear","changed","setTileUrlFunction","pruneExceptNewestZ","setKey","join","tileCoord","pixelRatio","useTile","z","x","y","tileCoordKey","containsKey","get"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/UrlTile.js"],"sourcesContent":["/**\n * @module ol/source/UrlTile\n */\nimport TileEventType from './TileEventType.js';\nimport TileSource, {TileSourceEvent} from './Tile.js';\nimport TileState from '../TileState.js';\nimport {createFromTemplates, expandUrl} from '../tileurlfunction.js';\nimport {getKeyZXY} from '../tilecoord.js';\nimport {getUid} from '../util.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions]\n * @property {boolean} [attributionsCollapsible=true] Attributions are collapsible.\n * @property {number} [cacheSize]\n * @property {boolean} [opaque=false] Whether the layer is opaque.\n * @property {import(\"../proj.js\").ProjectionLike} [projection]\n * @property {import(\"./State.js\").default} [state]\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid]\n * @property {import(\"../Tile.js\").LoadFunction} tileLoadFunction\n * @property {number} [tilePixelRatio]\n * @property {import(\"../Tile.js\").UrlFunction} [tileUrlFunction]\n * @property {string} [url]\n * @property {Array<string>} [urls]\n * @property {boolean} [wrapX=true]\n * @property {number} [transition]\n * @property {string} [key]\n * @property {number} [zDirection=0]\n */\n\n/**\n * @classdesc\n * Base class for sources providing tiles divided into a tile grid over http.\n *\n * @fires import(\"./Tile.js\").TileSourceEvent\n */\nclass UrlTile extends TileSource {\n  /**\n   * @param {Options} options Image tile options.\n   */\n  constructor(options) {\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      opaque: options.opaque,\n      projection: options.projection,\n      state: options.state,\n      tileGrid: options.tileGrid,\n      tilePixelRatio: options.tilePixelRatio,\n      wrapX: options.wrapX,\n      transition: options.transition,\n      key: options.key,\n      attributionsCollapsible: options.attributionsCollapsible,\n      zDirection: options.zDirection,\n    });\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.generateTileUrlFunction_ =\n      this.tileUrlFunction === UrlTile.prototype.tileUrlFunction;\n\n    /**\n     * @protected\n     * @type {import(\"../Tile.js\").LoadFunction}\n     */\n    this.tileLoadFunction = options.tileLoadFunction;\n\n    if (options.tileUrlFunction) {\n      this.tileUrlFunction = options.tileUrlFunction.bind(this);\n    }\n\n    /**\n     * @protected\n     * @type {!Array<string>|null}\n     */\n    this.urls = null;\n\n    if (options.urls) {\n      this.setUrls(options.urls);\n    } else if (options.url) {\n      this.setUrl(options.url);\n    }\n\n    /**\n     * @private\n     * @type {!Object<string, boolean>}\n     */\n    this.tileLoadingKeys_ = {};\n  }\n\n  /**\n   * Return the tile load function of the source.\n   * @return {import(\"../Tile.js\").LoadFunction} TileLoadFunction\n   * @api\n   */\n  getTileLoadFunction() {\n    return this.tileLoadFunction;\n  }\n\n  /**\n   * Return the tile URL function of the source.\n   * @return {import(\"../Tile.js\").UrlFunction} TileUrlFunction\n   * @api\n   */\n  getTileUrlFunction() {\n    return this.tileUrlFunction;\n  }\n\n  /**\n   * Return the URLs used for this source.\n   * When a tileUrlFunction is used instead of url or urls,\n   * null will be returned.\n   * @return {!Array<string>|null} URLs.\n   * @api\n   */\n  getUrls() {\n    return this.urls;\n  }\n\n  /**\n   * Handle tile change events.\n   * @param {import(\"../events/Event.js\").default} event Event.\n   * @protected\n   */\n  handleTileChange(event) {\n    const tile = /** @type {import(\"../Tile.js\").default} */ (event.target);\n    const uid = getUid(tile);\n    const tileState = tile.getState();\n    let type;\n    if (tileState == TileState.LOADING) {\n      this.tileLoadingKeys_[uid] = true;\n      type = TileEventType.TILELOADSTART;\n    } else if (uid in this.tileLoadingKeys_) {\n      delete this.tileLoadingKeys_[uid];\n      type =\n        tileState == TileState.ERROR\n          ? TileEventType.TILELOADERROR\n          : tileState == TileState.LOADED\n          ? TileEventType.TILELOADEND\n          : undefined;\n    }\n    if (type != undefined) {\n      this.dispatchEvent(new TileSourceEvent(type, tile));\n    }\n  }\n\n  /**\n   * Set the tile load function of the source.\n   * @param {import(\"../Tile.js\").LoadFunction} tileLoadFunction Tile load function.\n   * @api\n   */\n  setTileLoadFunction(tileLoadFunction) {\n    this.tileCache.clear();\n    this.tileLoadFunction = tileLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the tile URL function of the source.\n   * @param {import(\"../Tile.js\").UrlFunction} tileUrlFunction Tile URL function.\n   * @param {string=} key Optional new tile key for the source.\n   * @api\n   */\n  setTileUrlFunction(tileUrlFunction, key) {\n    this.tileUrlFunction = tileUrlFunction;\n    this.tileCache.pruneExceptNewestZ();\n    if (typeof key !== 'undefined') {\n      this.setKey(key);\n    } else {\n      this.changed();\n    }\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string} url URL.\n   * @api\n   */\n  setUrl(url) {\n    const urls = expandUrl(url);\n    this.urls = urls;\n    this.setUrls(urls);\n  }\n\n  /**\n   * Set the URLs to use for requests.\n   * @param {Array<string>} urls URLs.\n   * @api\n   */\n  setUrls(urls) {\n    this.urls = urls;\n    const key = urls.join('\\n');\n    if (this.generateTileUrlFunction_) {\n      this.setTileUrlFunction(createFromTemplates(urls, this.tileGrid), key);\n    } else {\n      this.setKey(key);\n    }\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {string|undefined} Tile URL.\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    return undefined;\n  }\n\n  /**\n   * Marks a tile coord as being used, without triggering a load.\n   * @param {number} z Tile coordinate z.\n   * @param {number} x Tile coordinate x.\n   * @param {number} y Tile coordinate y.\n   */\n  useTile(z, x, y) {\n    const tileCoordKey = getKeyZXY(z, x, y);\n    if (this.tileCache.containsKey(tileCoordKey)) {\n      this.tileCache.get(tileCoordKey);\n    }\n  }\n}\n\nexport default UrlTile;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}