{"ast":null,"code":"var _jsxFileName = \"/Users/mariovicky/Skripsi_OpenLayers/src/containers/Map/OpenlayerMaps/Map.js\";\nimport React, { Component } from 'react';\nimport 'ol/ol.css';\nimport './Map.css';\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport { Stroke, Style, Icon, Fill } from 'ol/style.js';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer.js';\nimport OSM from 'ol/source/OSM.js';\nimport VectorSource from 'ol/source/Vector.js';\nimport Feature from 'ol/Feature.js';\nimport { fromLonLat } from 'ol/proj.js';\nimport LineString from 'ol/geom/LineString.js';\nimport { getVectorContext } from 'ol/render.js';\nimport { getWidth } from 'ol/extent.js';\nimport arc from 'arc';\nimport airplaneimg from './614.png';\nclass MapComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.handleCoordinateInput = event => {\n      this.setState({\n        coordinateInput: event.target.value\n      });\n    };\n    this.handleCoordinateSubmit = event => {\n      event.preventDefault();\n      const coordinates = this.state.coordinateInput.split(',');\n      if (coordinates.length === 2) {\n        const lon = parseFloat(coordinates[0]);\n        const lat = parseFloat(coordinates[1]);\n        this.panToCoordinates(lon, lat);\n      }\n    };\n    this.handleJsonUpdate = () => {\n      this.loadFlightsData(); // Memuat ulang data penerbangan\n    };\n    this.mapRef = /*#__PURE__*/React.createRef();\n    this.map = null;\n    this.flightsSource = null;\n    this.tileLayer = null;\n    this.flightsLayer = null;\n    this.style = null;\n    this.airplaneIcon = null;\n    this.pointsPerMs = 0.02;\n    this.state = {\n      coordinateInput: '',\n      lamin: null,\n      lomin: null,\n      lamax: null,\n      lomax: null\n    };\n  }\n  componentDidMount() {\n    this.initializeMap();\n  }\n  initializeMap() {\n    this.tileLayer = new TileLayer({\n      source: new OSM()\n    });\n    this.map = new Map({\n      layers: [this.tileLayer],\n      target: this.mapRef.current,\n      view: new View({\n        center: [-11000000, 4600000],\n        zoom: 2\n      })\n    });\n    this.flightsSource = new VectorSource({\n      loader: () => {\n        this.loadFlightsData(); // Load data penerbangan saat komponen dipasang\n        // Set interval untuk memuat data penerbangan setiap 10 detik (10000 milidetik)\n        setInterval(() => {\n          this.loadFlightsData();\n        }, 10000);\n      }\n    });\n    this.airplaneIcon = new Icon({\n      src: airplaneimg,\n      scale: 0.5\n    });\n    this.style = new Style({\n      stroke: new Stroke({\n        color: 'red',\n        width: 2\n      }),\n      image: this.airplaneIcon\n    });\n    this.flightsLayer = new VectorLayer({\n      source: this.flightsSource,\n      style: feature => {\n        if (feature.get('finished')) {\n          return this.style;\n        }\n        return null;\n      }\n    });\n    this.map.addLayer(this.flightsLayer);\n  }\n  loadFlightsData() {\n    const url = '/data/openflights/data_adsb.json';\n    fetch(url).then(response => {\n      if (!response.ok) {\n        throw new Error('Network response was not ok');\n      }\n      return response.json();\n    }).then(json => {\n      const flightsData = json.flights;\n\n      // Menghitung total batch yang diperlukan\n      const totalBatches = Math.ceil(flightsData.length / 1000);\n\n      // Memuat data dalam batch menggunakan setTimeout\n      let batchIndex = 0;\n      const loadNextBatch = () => {\n        const startIndex = batchIndex * 1000;\n        const endIndex = (batchIndex + 1) * 1000;\n        const batchFlights = flightsData.slice(startIndex, endIndex);\n        batchFlights.forEach(flight => {\n          this.addFlight(flight);\n        });\n        batchIndex++;\n\n        // Jika masih ada batch berikutnya, lanjutkan pemrosesan batch\n        if (batchIndex < totalBatches) {\n          setTimeout(loadNextBatch, 100);\n        }\n      };\n\n      // Memulai pemrosesan batch\n      loadNextBatch();\n    }).catch(error => {\n      console.error('Error fetching JSON:', error);\n      console.error('URL:', url);\n    });\n  }\n  addFlight(flight) {\n    const coordinates = [];\n    const line = new arc.GreatCircle({\n      x: flight.lomin,\n      y: flight.lamin\n    }, {\n      x: flight.lomax,\n      y: flight.lamax\n    });\n    const numOfPoints = Math.floor(line.geometries()[0].distance() / this.pointsPerMs);\n    for (let i = 0; i < numOfPoints; ++i) {\n      const point = line.interpolate(i / numOfPoints);\n      coordinates.push(fromLonLat([point.x, point.y]));\n    }\n    const feature = new Feature({\n      geometry: new LineString(coordinates)\n    });\n    this.flightsSource.addFeature(feature);\n  }\n  panToCoordinates(lon, lat) {\n    const view = this.map.getView();\n    view.animate({\n      center: fromLonLat([lon, lat]),\n      zoom: 10\n    });\n  }\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      id: \"map\",\n      ref: this.mapRef,\n      className: \"map\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      onSubmit: this.handleCoordinateSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 11\n      }\n    }, \"Masukkan koordinat (lon, lat):\", /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      value: this.state.coordinateInput,\n      onChange: this.handleCoordinateInput,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 11\n      }\n    }, \"Pindah\")), /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      onClick: this.handleJsonUpdate,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }\n    }, \"Perbarui JSON\"));\n  }\n}\nexport default MapComponent;","map":{"version":3,"names":["React","Component","Map","View","Stroke","Style","Icon","Fill","Tile","TileLayer","Vector","VectorLayer","OSM","VectorSource","Feature","fromLonLat","LineString","getVectorContext","getWidth","arc","airplaneimg","MapComponent","constructor","props","handleCoordinateInput","event","setState","coordinateInput","target","value","handleCoordinateSubmit","preventDefault","coordinates","state","split","length","lon","parseFloat","lat","panToCoordinates","handleJsonUpdate","loadFlightsData","mapRef","createRef","map","flightsSource","tileLayer","flightsLayer","style","airplaneIcon","pointsPerMs","lamin","lomin","lamax","lomax","componentDidMount","initializeMap","source","layers","current","view","center","zoom","loader","setInterval","src","scale","stroke","color","width","image","feature","get","addLayer","url","fetch","then","response","ok","Error","json","flightsData","flights","totalBatches","Math","ceil","batchIndex","loadNextBatch","startIndex","endIndex","batchFlights","slice","forEach","flight","addFlight","setTimeout","catch","error","console","line","GreatCircle","x","y","numOfPoints","floor","geometries","distance","i","point","interpolate","push","geometry","addFeature","getView","animate","render","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","id","ref","className","onSubmit","type","onChange","onClick"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/src/containers/Map/OpenlayerMaps/Map.js"],"sourcesContent":["import React, { Component } from 'react';\nimport 'ol/ol.css';\nimport './Map.css';\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport { Stroke, Style, Icon, Fill } from 'ol/style.js';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer.js';\nimport OSM from 'ol/source/OSM.js';\nimport VectorSource from 'ol/source/Vector.js';\nimport Feature from 'ol/Feature.js';\nimport { fromLonLat } from 'ol/proj.js';\nimport LineString from 'ol/geom/LineString.js';\nimport { getVectorContext } from 'ol/render.js';\nimport { getWidth } from 'ol/extent.js';\nimport arc from 'arc';\nimport airplaneimg from './614.png';\n\nclass MapComponent extends Component {\n  constructor(props) {\n    super(props);\n    this.mapRef = React.createRef();\n    this.map = null;\n    this.flightsSource = null;\n    this.tileLayer = null;\n    this.flightsLayer = null;\n    this.style = null;\n    this.airplaneIcon = null;\n    this.pointsPerMs = 0.02;\n    this.state = {\n      coordinateInput: '',\n      lamin: null,\n      lomin: null,\n      lamax: null,\n      lomax: null,\n    };\n  }\n\n  componentDidMount() {\n    this.initializeMap();\n  }\n\n  initializeMap() {\n    this.tileLayer = new TileLayer({\n      source: new OSM(),\n    });\n\n    this.map = new Map({\n      layers: [this.tileLayer],\n      target: this.mapRef.current,\n      view: new View({\n        center: [-11000000, 4600000],\n        zoom: 2,\n      }),\n    });\n\n    this.flightsSource = new VectorSource({\n      loader: () => {\n        this.loadFlightsData(); // Load data penerbangan saat komponen dipasang\n        // Set interval untuk memuat data penerbangan setiap 10 detik (10000 milidetik)\n        setInterval(() => {\n          this.loadFlightsData();\n        }, 10000);\n      },\n    });\n\n    this.airplaneIcon = new Icon({\n      src: airplaneimg,\n      scale: 0.5,\n    });\n\n    this.style = new Style({\n      stroke: new Stroke({\n        color: 'red',\n        width: 2,\n      }),\n      image: this.airplaneIcon\n    });\n\n    this.flightsLayer = new VectorLayer({\n      source: this.flightsSource,\n      style: (feature) => {\n        if (feature.get('finished')) {\n          return this.style;\n        }\n        return null;\n      },\n    });\n\n    this.map.addLayer(this.flightsLayer);\n  }\n\n  loadFlightsData() {\n    const url = '/data/openflights/data_adsb.json';\n    fetch(url)\n      .then((response) => {\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        return response.json();\n      })\n      .then((json) => {\n        const flightsData = json.flights;\n\n        // Menghitung total batch yang diperlukan\n        const totalBatches = Math.ceil(flightsData.length / 1000);\n\n        // Memuat data dalam batch menggunakan setTimeout\n        let batchIndex = 0;\n        const loadNextBatch = () => {\n          const startIndex = batchIndex * 1000;\n          const endIndex = (batchIndex + 1) * 1000;\n          const batchFlights = flightsData.slice(startIndex, endIndex);\n\n          batchFlights.forEach((flight) => {\n            this.addFlight(flight);\n          });\n\n          batchIndex++;\n\n          // Jika masih ada batch berikutnya, lanjutkan pemrosesan batch\n          if (batchIndex < totalBatches) {\n            setTimeout(loadNextBatch, 100);\n          }\n        };\n\n        // Memulai pemrosesan batch\n        loadNextBatch();\n      })\n      .catch((error) => {\n        console.error('Error fetching JSON:', error);\n        console.error('URL:', url);\n      });\n  }\n\n  addFlight(flight) {\n    const coordinates = [];\n    const line = new arc.GreatCircle(\n      { x: flight.lomin, y: flight.lamin },\n      { x: flight.lomax, y: flight.lamax }\n    );\n    const numOfPoints = Math.floor(\n      line.geometries()[0].distance() / this.pointsPerMs\n    );\n\n    for (let i = 0; i < numOfPoints; ++i) {\n      const point = line.interpolate(i / numOfPoints);\n      coordinates.push(fromLonLat([point.x, point.y]));\n    }\n\n    const feature = new Feature({\n      geometry: new LineString(coordinates),\n    });\n\n    this.flightsSource.addFeature(feature);\n  }\n\n  handleCoordinateInput = (event) => {\n    this.setState({ coordinateInput: event.target.value });\n  };\n\n  handleCoordinateSubmit = (event) => {\n    event.preventDefault();\n    const coordinates = this.state.coordinateInput.split(',');\n    if (coordinates.length === 2) {\n      const lon = parseFloat(coordinates[0]);\n      const lat = parseFloat(coordinates[1]);\n      this.panToCoordinates(lon, lat);\n    }\n  };\n\n  panToCoordinates(lon, lat) {\n    const view = this.map.getView();\n    view.animate({ center: fromLonLat([lon, lat]), zoom: 10 });\n  }\n\n  handleJsonUpdate = () => {\n    this.loadFlightsData(); // Memuat ulang data penerbangan\n  };\n\n  render() {\n    return (\n      <div>\n        <div id=\"map\" ref={this.mapRef} className=\"map\" />\n        <form onSubmit={this.handleCoordinateSubmit}>\n          <label>\n            Masukkan koordinat (lon, lat):\n            <input\n              type=\"text\"\n              value={this.state.coordinateInput}\n              onChange={this.handleCoordinateInput}\n            />\n          </label>\n          <button type=\"submit\">Pindah</button>\n        </form>\n        <button type=\"button\" onClick={this.handleJsonUpdate}>\n          Perbarui JSON\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default MapComponent;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}