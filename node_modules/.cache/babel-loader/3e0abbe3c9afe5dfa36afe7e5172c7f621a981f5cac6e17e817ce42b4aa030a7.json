{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/layer/Graticule\n */\nimport Collection from '../Collection.js';\nimport EventType from '../render/EventType.js';\nimport Feature from '../Feature.js';\nimport Fill from '../style/Fill.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Stroke from '../style/Stroke.js';\nimport Style from '../style/Style.js';\nimport Text from '../style/Text.js';\nimport VectorLayer from './Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport { applyTransform, approximatelyEquals, containsCoordinate, containsExtent, equals, getCenter, getHeight, getIntersection, getWidth, intersects, isEmpty, wrapX as wrapExtentX } from '../extent.js';\nimport { assign } from '../obj.js';\nimport { clamp } from '../math.js';\nimport { degreesToStringHDMS } from '../coordinate.js';\nimport { equivalent as equivalentProjection, get as getProjection, getTransform } from '../proj.js';\nimport { getVectorContext } from '../render.js';\nimport { meridian, parallel } from '../geom/flat/geodesic.js';\n/**\n * @type {Stroke}\n * @private\n * @const\n */\nvar DEFAULT_STROKE_STYLE = new Stroke({\n  color: 'rgba(0,0,0,0.2)'\n});\n/**\n * @type {Array<number>}\n * @private\n */\nvar INTERVALS = [90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001];\n/**\n * @typedef {Object} GraticuleLabelDataType\n * @property {Point} geom\n * @property {string} text\n */\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [maxLines=100] The maximum number of meridians and\n * parallels from the center of the map. The default value of 100 means that at\n * most 200 meridians and 200 parallels will be displayed. The default value is\n * appropriate for conformal projections like Spherical Mercator. If you\n * increase the value, more lines will be drawn and the drawing performance will\n * decrease.\n * @property {Stroke} [strokeStyle='rgba(0,0,0,0.2)'] The\n * stroke style to use for drawing the graticule. If not provided, a not fully\n * opaque black will be used.\n * @property {number} [targetSize=100] The target size of the graticule cells,\n * in pixels.\n * @property {boolean} [showLabels=false] Render a label with the respective\n * latitude/longitude for each graticule line.\n * @property {function(number):string} [lonLabelFormatter] Label formatter for\n * longitudes. This function is called with the longitude as argument, and\n * should return a formatted string representing the longitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {function(number):string} [latLabelFormatter] Label formatter for\n * latitudes. This function is called with the latitude as argument, and\n * should return a formatted string representing the latitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {number} [lonLabelPosition=0] Longitude label position in fractions\n * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the\n * top.\n * @property {number} [latLabelPosition=1] Latitude label position in fractions\n * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the\n * right.\n * @property {Text} [lonLabelStyle] Longitude label text\n * style. If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textBaseline: 'bottom',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: new Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textBaseline` configuration will not work well for\n * `lonLabelPosition` configurations that position labels close to the top of\n * the viewport.\n * @property {Text} [latLabelStyle] Latitude label text style.\n * If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textAlign: 'end',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textAlign` configuration will not work well for\n * `latLabelPosition` configurations that position labels close to the left of\n * the viewport.\n * @property {Array<number>} [intervals=[90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001]]\n * Intervals (in degrees) for the graticule. Example to limit graticules to 30 and 10 degrees intervals:\n * ```js\n * [30, 10]\n * ```\n * @property {boolean} [wrapX=true] Whether to repeat the graticule horizontally.\n */\n/**\n * @classdesc\n * Layer that renders a grid for a coordinate system (currently only EPSG:4326 is supported).\n * Note that the view projection must define both extent and worldExtent.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nvar Graticule = /** @class */function (_super) {\n  __extends(Graticule, _super);\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  function Graticule(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var baseOptions = assign({\n      updateWhileAnimating: true,\n      updateWhileInteracting: true,\n      renderBuffer: 0\n    }, options);\n    delete baseOptions.maxLines;\n    delete baseOptions.strokeStyle;\n    delete baseOptions.targetSize;\n    delete baseOptions.showLabels;\n    delete baseOptions.lonLabelFormatter;\n    delete baseOptions.latLabelFormatter;\n    delete baseOptions.lonLabelPosition;\n    delete baseOptions.latLabelPosition;\n    delete baseOptions.lonLabelStyle;\n    delete baseOptions.latLabelStyle;\n    delete baseOptions.intervals;\n    _this = _super.call(this, baseOptions) || this;\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    _this.projection_ = null;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.maxLat_ = Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.maxLon_ = Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.minLat_ = -Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.minLon_ = -Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.maxX_ = Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.maxY_ = Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.minX_ = -Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.minY_ = -Infinity;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.targetSize_ = options.targetSize !== undefined ? options.targetSize : 100;\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n    _this.meridians_ = [];\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n    _this.parallels_ = [];\n    /**\n     * @type {Stroke}\n     * @private\n     */\n    _this.strokeStyle_ = options.strokeStyle !== undefined ? options.strokeStyle : DEFAULT_STROKE_STYLE;\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n    _this.fromLonLatTransform_ = undefined;\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n    _this.toLonLatTransform_ = undefined;\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    _this.projectionCenterLonLat_ = null;\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    _this.bottomLeft_ = null;\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    _this.bottomRight_ = null;\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    _this.topLeft_ = null;\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    _this.topRight_ = null;\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n    _this.meridiansLabels_ = null;\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n    _this.parallelsLabels_ = null;\n    if (options.showLabels) {\n      /**\n       * @type {null|function(number):string}\n       * @private\n       */\n      _this.lonLabelFormatter_ = options.lonLabelFormatter == undefined ? degreesToStringHDMS.bind(_this, 'EW') : options.lonLabelFormatter;\n      /**\n       * @type {function(number):string}\n       * @private\n       */\n      _this.latLabelFormatter_ = options.latLabelFormatter == undefined ? degreesToStringHDMS.bind(_this, 'NS') : options.latLabelFormatter;\n      /**\n       * Longitude label position in fractions (0..1) of view extent. 0 means\n       * bottom, 1 means top.\n       * @type {number}\n       * @private\n       */\n      _this.lonLabelPosition_ = options.lonLabelPosition == undefined ? 0 : options.lonLabelPosition;\n      /**\n       * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1\n       * means right.\n       * @type {number}\n       * @private\n       */\n      _this.latLabelPosition_ = options.latLabelPosition == undefined ? 1 : options.latLabelPosition;\n      /**\n       * @type {Style}\n       * @private\n       */\n      _this.lonLabelStyleBase_ = new Style({\n        text: options.lonLabelStyle !== undefined ? options.lonLabelStyle.clone() : new Text({\n          font: '12px Calibri,sans-serif',\n          textBaseline: 'bottom',\n          fill: new Fill({\n            color: 'rgba(0,0,0,1)'\n          }),\n          stroke: new Stroke({\n            color: 'rgba(255,255,255,1)',\n            width: 3\n          })\n        })\n      });\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n      _this.lonLabelStyle_ = function (feature) {\n        var label = feature.get('graticule_label');\n        this.lonLabelStyleBase_.getText().setText(label);\n        return this.lonLabelStyleBase_;\n      }.bind(_this);\n      /**\n       * @type {Style}\n       * @private\n       */\n      _this.latLabelStyleBase_ = new Style({\n        text: options.latLabelStyle !== undefined ? options.latLabelStyle.clone() : new Text({\n          font: '12px Calibri,sans-serif',\n          textAlign: 'right',\n          fill: new Fill({\n            color: 'rgba(0,0,0,1)'\n          }),\n          stroke: new Stroke({\n            color: 'rgba(255,255,255,1)',\n            width: 3\n          })\n        })\n      });\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n      _this.latLabelStyle_ = function (feature) {\n        var label = feature.get('graticule_label');\n        this.latLabelStyleBase_.getText().setText(label);\n        return this.latLabelStyleBase_;\n      }.bind(_this);\n      _this.meridiansLabels_ = [];\n      _this.parallelsLabels_ = [];\n      _this.addEventListener(EventType.POSTRENDER, _this.drawLabels_.bind(_this));\n    }\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    _this.intervals_ = options.intervals !== undefined ? options.intervals : INTERVALS;\n    // use a source with a custom loader for lines & text\n    _this.setSource(new VectorSource({\n      loader: _this.loaderFunction.bind(_this),\n      strategy: _this.strategyFunction.bind(_this),\n      features: new Collection(),\n      overlaps: false,\n      useSpatialIndex: false,\n      wrapX: options.wrapX\n    }));\n    /**\n     * feature pool to use when updating graticule\n     * @type {Array<Feature>}\n     * @private\n     */\n    _this.featurePool_ = [];\n    /**\n     * @type {Style}\n     * @private\n     */\n    _this.lineStyle_ = new Style({\n      stroke: _this.strokeStyle_\n    });\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     * @private\n     */\n    _this.loadedExtent_ = null;\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     */\n    _this.renderedExtent_ = null;\n    _this.setRenderOrder(null);\n    return _this;\n  }\n  /**\n   * Strategy function for loading features based on the view's extent and\n   * resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<import(\"../extent.js\").Extent>} Extents.\n   */\n  Graticule.prototype.strategyFunction = function (extent, resolution) {\n    // extents may be passed in different worlds, to avoid endless loop we use only one\n    var realWorldExtent = extent.slice();\n    if (this.projection_ && this.getSource().getWrapX()) {\n      wrapExtentX(realWorldExtent, this.projection_);\n    }\n    if (this.loadedExtent_) {\n      if (approximatelyEquals(this.loadedExtent_, realWorldExtent, resolution)) {\n        // make sure result is exactly equal to previous extent\n        realWorldExtent = this.loadedExtent_.slice();\n      } else {\n        // we should not keep track of loaded extents\n        this.getSource().removeLoadedExtent(this.loadedExtent_);\n      }\n    }\n    return [realWorldExtent];\n  };\n  /**\n   * Update geometries in the source based on current view\n   * @param {import(\"../extent\").Extent} extent Extent\n   * @param {number} resolution Resolution\n   * @param {import(\"../proj/Projection.js\").default} projection Projection\n   */\n  Graticule.prototype.loaderFunction = function (extent, resolution, projection) {\n    this.loadedExtent_ = extent;\n    var source = this.getSource();\n    // only consider the intersection between our own extent & the requested one\n    var layerExtent = this.getExtent() || [-Infinity, -Infinity, Infinity, Infinity];\n    var renderExtent = getIntersection(layerExtent, extent);\n    if (this.renderedExtent_ && equals(this.renderedExtent_, renderExtent)) {\n      return;\n    }\n    this.renderedExtent_ = renderExtent;\n    // bail out if nothing to render\n    if (isEmpty(renderExtent)) {\n      return;\n    }\n    // update projection info\n    var center = getCenter(renderExtent);\n    var squaredTolerance = resolution * resolution / 4;\n    var updateProjectionInfo = !this.projection_ || !equivalentProjection(this.projection_, projection);\n    if (updateProjectionInfo) {\n      this.updateProjectionInfo_(projection);\n    }\n    this.createGraticule_(renderExtent, center, resolution, squaredTolerance);\n    // first make sure we have enough features in the pool\n    var featureCount = this.meridians_.length + this.parallels_.length;\n    if (this.meridiansLabels_) {\n      featureCount += this.meridians_.length;\n    }\n    if (this.parallelsLabels_) {\n      featureCount += this.parallels_.length;\n    }\n    var feature;\n    while (featureCount > this.featurePool_.length) {\n      feature = new Feature();\n      this.featurePool_.push(feature);\n    }\n    var featuresColl = source.getFeaturesCollection();\n    featuresColl.clear();\n    var poolIndex = 0;\n    // add features for the lines & labels\n    var i, l;\n    for (i = 0, l = this.meridians_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.meridians_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n    for (i = 0, l = this.parallels_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.parallels_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n  };\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n  Graticule.prototype.addMeridian_ = function (lon, minLat, maxLat, squaredTolerance, extent, index) {\n    var lineString = this.getMeridian_(lon, minLat, maxLat, squaredTolerance, index);\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.meridiansLabels_) {\n        var text = this.lonLabelFormatter_(lon);\n        if (index in this.meridiansLabels_) {\n          this.meridiansLabels_[index].text = text;\n        } else {\n          this.meridiansLabels_[index] = {\n            geom: new Point([]),\n            text: text\n          };\n        }\n      }\n      this.meridians_[index++] = lineString;\n    }\n    return index;\n  };\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n  Graticule.prototype.addParallel_ = function (lat, minLon, maxLon, squaredTolerance, extent, index) {\n    var lineString = this.getParallel_(lat, minLon, maxLon, squaredTolerance, index);\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.parallelsLabels_) {\n        var text = this.latLabelFormatter_(lat);\n        if (index in this.parallelsLabels_) {\n          this.parallelsLabels_[index].text = text;\n        } else {\n          this.parallelsLabels_[index] = {\n            geom: new Point([]),\n            text: text\n          };\n        }\n      }\n      this.parallels_[index++] = lineString;\n    }\n    return index;\n  };\n  /**\n   * @param {import(\"../render/Event.js\").default} event Render event.\n   * @private\n   */\n  Graticule.prototype.drawLabels_ = function (event) {\n    var rotation = event.frameState.viewState.rotation;\n    var extent = event.frameState.extent;\n    var rotationCenter = getCenter(extent);\n    var rotationExtent = extent;\n    if (rotation) {\n      var width = getWidth(extent);\n      var height = getHeight(extent);\n      var cr = Math.abs(Math.cos(rotation));\n      var sr = Math.abs(Math.sin(rotation));\n      var unrotatedWidth = (sr * height - cr * width) / (sr * sr - cr * cr);\n      var unrotatedHeight = (sr * width - cr * height) / (sr * sr - cr * cr);\n      rotationExtent = [rotationCenter[0] - unrotatedWidth / 2, rotationCenter[1] - unrotatedHeight / 2, rotationCenter[0] + unrotatedWidth / 2, rotationCenter[1] + unrotatedHeight / 2];\n    }\n    var startWorld = 0;\n    var endWorld = 0;\n    var labelsAtStart = this.latLabelPosition_ < 0.5;\n    var projectionExtent = this.projection_.getExtent();\n    var worldWidth = getWidth(projectionExtent);\n    if (this.getSource().getWrapX() && this.projection_.canWrapX() && !containsExtent(projectionExtent, extent)) {\n      startWorld = Math.floor((extent[0] - projectionExtent[0]) / worldWidth);\n      endWorld = Math.ceil((extent[2] - projectionExtent[2]) / worldWidth);\n      var inverted = Math.abs(rotation) > Math.PI / 2;\n      labelsAtStart = labelsAtStart !== inverted;\n    }\n    var vectorContext = getVectorContext(event);\n    for (var world = startWorld; world <= endWorld; ++world) {\n      var poolIndex = this.meridians_.length + this.parallels_.length;\n      var feature = void 0,\n        index = void 0,\n        l = void 0,\n        textPoint = void 0;\n      if (this.meridiansLabels_) {\n        for (index = 0, l = this.meridiansLabels_.length; index < l; ++index) {\n          var lineString = this.meridians_[index];\n          if (!rotation && world === 0) {\n            textPoint = this.getMeridianPoint_(lineString, extent, index);\n          } else {\n            var clone = lineString.clone();\n            clone.translate(world * worldWidth, 0);\n            clone.rotate(-rotation, rotationCenter);\n            textPoint = this.getMeridianPoint_(clone, rotationExtent, index);\n            textPoint.rotate(rotation, rotationCenter);\n          }\n          feature = this.featurePool_[poolIndex++];\n          feature.setGeometry(textPoint);\n          feature.set('graticule_label', this.meridiansLabels_[index].text);\n          vectorContext.drawFeature(feature, this.lonLabelStyle_(feature));\n        }\n      }\n      if (this.parallelsLabels_) {\n        if (world === startWorld && labelsAtStart || world === endWorld && !labelsAtStart) {\n          for (index = 0, l = this.parallels_.length; index < l; ++index) {\n            var lineString = this.parallels_[index];\n            if (!rotation && world === 0) {\n              textPoint = this.getParallelPoint_(lineString, extent, index);\n            } else {\n              var clone = lineString.clone();\n              clone.translate(world * worldWidth, 0);\n              clone.rotate(-rotation, rotationCenter);\n              textPoint = this.getParallelPoint_(clone, rotationExtent, index);\n              textPoint.rotate(rotation, rotationCenter);\n            }\n            feature = this.featurePool_[poolIndex++];\n            feature.setGeometry(textPoint);\n            feature.set('graticule_label', this.parallelsLabels_[index].text);\n            vectorContext.drawFeature(feature, this.latLabelStyle_(feature));\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @private\n   */\n  Graticule.prototype.createGraticule_ = function (extent, center, resolution, squaredTolerance) {\n    var interval = this.getInterval_(resolution);\n    if (interval == -1) {\n      this.meridians_.length = 0;\n      this.parallels_.length = 0;\n      if (this.meridiansLabels_) {\n        this.meridiansLabels_.length = 0;\n      }\n      if (this.parallelsLabels_) {\n        this.parallelsLabels_.length = 0;\n      }\n      return;\n    }\n    var wrapX = false;\n    var projectionExtent = this.projection_.getExtent();\n    var worldWidth = getWidth(projectionExtent);\n    if (this.getSource().getWrapX() && this.projection_.canWrapX() && !containsExtent(projectionExtent, extent)) {\n      if (getWidth(extent) >= worldWidth) {\n        extent[0] = projectionExtent[0];\n        extent[2] = projectionExtent[2];\n      } else {\n        wrapX = true;\n      }\n    }\n    // Constrain the center to fit into the extent available to the graticule\n    var validCenterP = [clamp(center[0], this.minX_, this.maxX_), clamp(center[1], this.minY_, this.maxY_)];\n    // Transform the center to lon lat\n    // Some projections may have a void area at the poles\n    // so replace any NaN latitudes with the min or max value closest to a pole\n    var centerLonLat = this.toLonLatTransform_(validCenterP);\n    if (isNaN(centerLonLat[1])) {\n      centerLonLat[1] = Math.abs(this.maxLat_) >= Math.abs(this.minLat_) ? this.maxLat_ : this.minLat_;\n    }\n    var centerLon = clamp(centerLonLat[0], this.minLon_, this.maxLon_);\n    var centerLat = clamp(centerLonLat[1], this.minLat_, this.maxLat_);\n    var maxLines = this.maxLines_;\n    var cnt, idx, lat, lon;\n    // Limit the extent to fit into the extent available to the graticule\n    var validExtentP = extent;\n    if (!wrapX) {\n      validExtentP = [clamp(extent[0], this.minX_, this.maxX_), clamp(extent[1], this.minY_, this.maxY_), clamp(extent[2], this.minX_, this.maxX_), clamp(extent[3], this.minY_, this.maxY_)];\n    }\n    // Transform the extent to get the lon lat ranges for the edges of the extent\n    var validExtent = applyTransform(validExtentP, this.toLonLatTransform_, undefined, 8);\n    var maxLat = validExtent[3];\n    var maxLon = validExtent[2];\n    var minLat = validExtent[1];\n    var minLon = validExtent[0];\n    if (!wrapX) {\n      // Check if extremities of the world extent lie inside the extent\n      // (for example the pole in a polar projection)\n      // and extend the extent as appropriate\n      if (containsCoordinate(validExtentP, this.bottomLeft_)) {\n        minLon = this.minLon_;\n        minLat = this.minLat_;\n      }\n      if (containsCoordinate(validExtentP, this.bottomRight_)) {\n        maxLon = this.maxLon_;\n        minLat = this.minLat_;\n      }\n      if (containsCoordinate(validExtentP, this.topLeft_)) {\n        minLon = this.minLon_;\n        maxLat = this.maxLat_;\n      }\n      if (containsCoordinate(validExtentP, this.topRight_)) {\n        maxLon = this.maxLon_;\n        maxLat = this.maxLat_;\n      }\n      // The transformed center may also extend the lon lat ranges used for rendering\n      maxLat = clamp(maxLat, centerLat, this.maxLat_);\n      maxLon = clamp(maxLon, centerLon, this.maxLon_);\n      minLat = clamp(minLat, this.minLat_, centerLat);\n      minLon = clamp(minLon, this.minLon_, centerLon);\n    }\n    // Create meridians\n    centerLon = Math.floor(centerLon / interval) * interval;\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n    idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);\n    cnt = 0;\n    if (wrapX) {\n      while ((lon -= interval) >= minLon && cnt++ < maxLines) {\n        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n      }\n    } else {\n      while (lon != this.minLon_ && cnt++ < maxLines) {\n        lon = Math.max(lon - interval, this.minLon_);\n        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n      }\n    }\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n    cnt = 0;\n    if (wrapX) {\n      while ((lon += interval) <= maxLon && cnt++ < maxLines) {\n        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n      }\n    } else {\n      while (lon != this.maxLon_ && cnt++ < maxLines) {\n        lon = Math.min(lon + interval, this.maxLon_);\n        idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, idx);\n      }\n    }\n    this.meridians_.length = idx;\n    if (this.meridiansLabels_) {\n      this.meridiansLabels_.length = idx;\n    }\n    // Create parallels\n    centerLat = Math.floor(centerLat / interval) * interval;\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n    idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);\n    cnt = 0;\n    while (lat != this.minLat_ && cnt++ < maxLines) {\n      lat = Math.max(lat - interval, this.minLat_);\n      idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);\n    }\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n    cnt = 0;\n    while (lat != this.maxLat_ && cnt++ < maxLines) {\n      lat = Math.min(lat + interval, this.maxLat_);\n      idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, idx);\n    }\n    this.parallels_.length = idx;\n    if (this.parallelsLabels_) {\n      this.parallelsLabels_.length = idx;\n    }\n  };\n  /**\n   * @param {number} resolution Resolution.\n   * @return {number} The interval in degrees.\n   * @private\n   */\n  Graticule.prototype.getInterval_ = function (resolution) {\n    var centerLon = this.projectionCenterLonLat_[0];\n    var centerLat = this.projectionCenterLonLat_[1];\n    var interval = -1;\n    var target = Math.pow(this.targetSize_ * resolution, 2);\n    /** @type {Array<number>} **/\n    var p1 = [];\n    /** @type {Array<number>} **/\n    var p2 = [];\n    for (var i = 0, ii = this.intervals_.length; i < ii; ++i) {\n      var delta = clamp(this.intervals_[i] / 2, 0, 90);\n      // Don't attempt to transform latitudes beyond the poles!\n      var clampedLat = clamp(centerLat, -90 + delta, 90 - delta);\n      p1[0] = centerLon - delta;\n      p1[1] = clampedLat - delta;\n      p2[0] = centerLon + delta;\n      p2[1] = clampedLat + delta;\n      this.fromLonLatTransform_(p1, p1);\n      this.fromLonLatTransform_(p2, p2);\n      var dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);\n      if (dist <= target) {\n        break;\n      }\n      interval = this.intervals_[i];\n    }\n    return interval;\n  };\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The meridian line string.\n   * @param {number} index Index.\n   * @private\n   */\n  Graticule.prototype.getMeridian_ = function (lon, minLat, maxLat, squaredTolerance, index) {\n    var flatCoordinates = meridian(lon, minLat, maxLat, this.projection_, squaredTolerance);\n    var lineString = this.meridians_[index];\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, GeometryLayout.XY);\n      this.meridians_[index] = lineString;\n    } else {\n      lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n      lineString.changed();\n    }\n    return lineString;\n  };\n  /**\n   * @param {LineString} lineString Meridian\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Meridian point.\n   * @private\n   */\n  Graticule.prototype.getMeridianPoint_ = function (lineString, extent, index) {\n    var flatCoordinates = lineString.getFlatCoordinates();\n    var bottom = 1;\n    var top = flatCoordinates.length - 1;\n    if (flatCoordinates[bottom] > flatCoordinates[top]) {\n      bottom = top;\n      top = 1;\n    }\n    var clampedBottom = Math.max(extent[1], flatCoordinates[bottom]);\n    var clampedTop = Math.min(extent[3], flatCoordinates[top]);\n    var lat = clamp(extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_, clampedBottom, clampedTop);\n    var coordinate0 = flatCoordinates[bottom - 1] + (flatCoordinates[top - 1] - flatCoordinates[bottom - 1]) * (lat - flatCoordinates[bottom]) / (flatCoordinates[top] - flatCoordinates[bottom]);\n    var coordinate = [coordinate0, lat];\n    var point = this.meridiansLabels_[index].geom;\n    point.setCoordinates(coordinate);\n    return point;\n  };\n  /**\n   * Get the list of meridians.  Meridians are lines of equal longitude.\n   * @return {Array<LineString>} The meridians.\n   * @api\n   */\n  Graticule.prototype.getMeridians = function () {\n    return this.meridians_;\n  };\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The parallel line string.\n   * @param {number} index Index.\n   * @private\n   */\n  Graticule.prototype.getParallel_ = function (lat, minLon, maxLon, squaredTolerance, index) {\n    var flatCoordinates = parallel(lat, minLon, maxLon, this.projection_, squaredTolerance);\n    var lineString = this.parallels_[index];\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, GeometryLayout.XY);\n    } else {\n      lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n      lineString.changed();\n    }\n    return lineString;\n  };\n  /**\n   * @param {LineString} lineString Parallels.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Parallel point.\n   * @private\n   */\n  Graticule.prototype.getParallelPoint_ = function (lineString, extent, index) {\n    var flatCoordinates = lineString.getFlatCoordinates();\n    var left = 0;\n    var right = flatCoordinates.length - 2;\n    if (flatCoordinates[left] > flatCoordinates[right]) {\n      left = right;\n      right = 0;\n    }\n    var clampedLeft = Math.max(extent[0], flatCoordinates[left]);\n    var clampedRight = Math.min(extent[2], flatCoordinates[right]);\n    var lon = clamp(extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_, clampedLeft, clampedRight);\n    var coordinate1 = flatCoordinates[left + 1] + (flatCoordinates[right + 1] - flatCoordinates[left + 1]) * (lon - flatCoordinates[left]) / (flatCoordinates[right] - flatCoordinates[left]);\n    var coordinate = [lon, coordinate1];\n    var point = this.parallelsLabels_[index].geom;\n    point.setCoordinates(coordinate);\n    return point;\n  };\n  /**\n   * Get the list of parallels.  Parallels are lines of equal latitude.\n   * @return {Array<LineString>} The parallels.\n   * @api\n   */\n  Graticule.prototype.getParallels = function () {\n    return this.parallels_;\n  };\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n  Graticule.prototype.updateProjectionInfo_ = function (projection) {\n    var epsg4326Projection = getProjection('EPSG:4326');\n    var worldExtent = projection.getWorldExtent();\n    this.maxLat_ = worldExtent[3];\n    this.maxLon_ = worldExtent[2];\n    this.minLat_ = worldExtent[1];\n    this.minLon_ = worldExtent[0];\n    // If the world extent crosses the dateline define a custom transform to\n    // return longitudes which wrap the dateline\n    var toLonLatTransform = getTransform(projection, epsg4326Projection);\n    if (this.minLon_ < this.maxLon_) {\n      this.toLonLatTransform_ = toLonLatTransform;\n    } else {\n      var split_1 = this.minLon_ + this.maxLon_ / 2;\n      this.maxLon_ += 360;\n      this.toLonLatTransform_ = function (coordinates, opt_output, opt_dimension) {\n        var dimension = opt_dimension || 2;\n        var lonLatCoordinates = toLonLatTransform(coordinates, opt_output, dimension);\n        for (var i = 0, l = lonLatCoordinates.length; i < l; i += dimension) {\n          if (lonLatCoordinates[i] < split_1) {\n            lonLatCoordinates[i] += 360;\n          }\n        }\n        return lonLatCoordinates;\n      };\n    }\n    // Transform the extent to get the limits of the view projection extent\n    // which should be available to the graticule\n    this.fromLonLatTransform_ = getTransform(epsg4326Projection, projection);\n    var worldExtentP = applyTransform([this.minLon_, this.minLat_, this.maxLon_, this.maxLat_], this.fromLonLatTransform_, undefined, 8);\n    this.minX_ = worldExtentP[0];\n    this.maxX_ = worldExtentP[2];\n    this.minY_ = worldExtentP[1];\n    this.maxY_ = worldExtentP[3];\n    // Determine the view projection coordinates of the extremities of the world extent\n    // as these may lie inside a view extent (for example the pole in a polar projection)\n    this.bottomLeft_ = this.fromLonLatTransform_([this.minLon_, this.minLat_]);\n    this.bottomRight_ = this.fromLonLatTransform_([this.maxLon_, this.minLat_]);\n    this.topLeft_ = this.fromLonLatTransform_([this.minLon_, this.maxLat_]);\n    this.topRight_ = this.fromLonLatTransform_([this.maxLon_, this.maxLat_]);\n    // Transform the projection center to lon lat\n    // Some projections may have a void area at the poles\n    // so replace any NaN latitudes with the min or max value closest to a pole\n    this.projectionCenterLonLat_ = this.toLonLatTransform_(getCenter(projection.getExtent()));\n    if (isNaN(this.projectionCenterLonLat_[1])) {\n      this.projectionCenterLonLat_[1] = Math.abs(this.maxLat_) >= Math.abs(this.minLat_) ? this.maxLat_ : this.minLat_;\n    }\n    this.projection_ = projection;\n  };\n  return Graticule;\n}(VectorLayer);\nexport default Graticule;","map":{"version":3,"names":["Collection","EventType","Feature","Fill","GeometryLayout","LineString","Point","Stroke","Style","Text","VectorLayer","VectorSource","applyTransform","approximatelyEquals","containsCoordinate","containsExtent","equals","getCenter","getHeight","getIntersection","getWidth","intersects","isEmpty","wrapX","wrapExtentX","assign","clamp","degreesToStringHDMS","equivalent","equivalentProjection","get","getProjection","getTransform","getVectorContext","meridian","parallel","DEFAULT_STROKE_STYLE","color","INTERVALS","Graticule","_super","__extends","opt_options","_this","options","baseOptions","updateWhileAnimating","updateWhileInteracting","renderBuffer","maxLines","strokeStyle","targetSize","showLabels","lonLabelFormatter","latLabelFormatter","lonLabelPosition","latLabelPosition","lonLabelStyle","latLabelStyle","intervals","call","projection_","maxLat_","Infinity","maxLon_","minLat_","minLon_","maxX_","maxY_","minX_","minY_","targetSize_","undefined","maxLines_","meridians_","parallels_","strokeStyle_","fromLonLatTransform_","toLonLatTransform_","projectionCenterLonLat_","bottomLeft_","bottomRight_","topLeft_","topRight_","meridiansLabels_","parallelsLabels_","lonLabelFormatter_","bind","latLabelFormatter_","lonLabelPosition_","latLabelPosition_","lonLabelStyleBase_","text","clone","font","textBaseline","fill","stroke","width","lonLabelStyle_","feature","label","getText","setText","latLabelStyleBase_","textAlign","latLabelStyle_","addEventListener","POSTRENDER","drawLabels_","intervals_","setSource","loader","loaderFunction","strategy","strategyFunction","features","overlaps","useSpatialIndex","featurePool_","lineStyle_","loadedExtent_","renderedExtent_","setRenderOrder","prototype","extent","resolution","realWorldExtent","slice","getSource","getWrapX","removeLoadedExtent","projection","source","layerExtent","getExtent","renderExtent","center","squaredTolerance","updateProjectionInfo","updateProjectionInfo_","createGraticule_","featureCount","length","push","featuresColl","getFeaturesCollection","clear","poolIndex","i","l","setGeometry","setStyle","addMeridian_","lon","minLat","maxLat","index","lineString","getMeridian_","geom","addParallel_","lat","minLon","maxLon","getParallel_","event","rotation","frameState","viewState","rotationCenter","rotationExtent","height","cr","Math","abs","cos","sr","sin","unrotatedWidth","unrotatedHeight","startWorld","endWorld","labelsAtStart","projectionExtent","worldWidth","canWrapX","floor","ceil","inverted","PI","vectorContext","world","textPoint","getMeridianPoint_","translate","rotate","set","drawFeature","getParallelPoint_","interval","getInterval_","validCenterP","centerLonLat","isNaN","centerLon","centerLat","cnt","idx","validExtentP","validExtent","max","min","target","pow","p1","p2","ii","delta","clampedLat","dist","flatCoordinates","XY","setFlatCoordinates","changed","getFlatCoordinates","bottom","top","clampedBottom","clampedTop","coordinate0","coordinate","point","setCoordinates","getMeridians","left","right","clampedLeft","clampedRight","coordinate1","getParallels","epsg4326Projection","worldExtent","getWorldExtent","toLonLatTransform","split_1","coordinates","opt_output","opt_dimension","dimension","lonLatCoordinates","worldExtentP"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/layer/Graticule.js"],"sourcesContent":["/**\n * @module ol/layer/Graticule\n */\nimport Collection from '../Collection.js';\nimport EventType from '../render/EventType.js';\nimport Feature from '../Feature.js';\nimport Fill from '../style/Fill.js';\nimport GeometryLayout from '../geom/GeometryLayout.js';\nimport LineString from '../geom/LineString.js';\nimport Point from '../geom/Point.js';\nimport Stroke from '../style/Stroke.js';\nimport Style from '../style/Style.js';\nimport Text from '../style/Text.js';\nimport VectorLayer from './Vector.js';\nimport VectorSource from '../source/Vector.js';\nimport {\n  applyTransform,\n  approximatelyEquals,\n  containsCoordinate,\n  containsExtent,\n  equals,\n  getCenter,\n  getHeight,\n  getIntersection,\n  getWidth,\n  intersects,\n  isEmpty,\n  wrapX as wrapExtentX,\n} from '../extent.js';\nimport {assign} from '../obj.js';\nimport {clamp} from '../math.js';\nimport {degreesToStringHDMS} from '../coordinate.js';\nimport {\n  equivalent as equivalentProjection,\n  get as getProjection,\n  getTransform,\n} from '../proj.js';\nimport {getVectorContext} from '../render.js';\nimport {meridian, parallel} from '../geom/flat/geodesic.js';\n\n/**\n * @type {Stroke}\n * @private\n * @const\n */\nconst DEFAULT_STROKE_STYLE = new Stroke({\n  color: 'rgba(0,0,0,0.2)',\n});\n\n/**\n * @type {Array<number>}\n * @private\n */\nconst INTERVALS = [\n  90,\n  45,\n  30,\n  20,\n  10,\n  5,\n  2,\n  1,\n  0.5,\n  0.2,\n  0.1,\n  0.05,\n  0.01,\n  0.005,\n  0.002,\n  0.001,\n];\n\n/**\n * @typedef {Object} GraticuleLabelDataType\n * @property {Point} geom\n * @property {string} text\n */\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-layer'] A CSS class name to set to the layer element.\n * @property {number} [opacity=1] Opacity (0, 1).\n * @property {boolean} [visible=true] Visibility.\n * @property {import(\"../extent.js\").Extent} [extent] The bounding extent for layer rendering.  The layer will not be\n * rendered outside of this extent.\n * @property {number} [zIndex] The z-index for layer rendering.  At rendering time, the layers\n * will be ordered, first by Z-index and then by position. When `undefined`, a `zIndex` of 0 is assumed\n * for layers that are added to the map's `layers` collection, or `Infinity` when the layer's `setMap()`\n * method was used.\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\n * visible.\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\n * be visible.\n * @property {number} [minZoom] The minimum view zoom level (exclusive) above which this layer will be\n * visible.\n * @property {number} [maxZoom] The maximum view zoom level (inclusive) at which this layer will\n * be visible.\n * @property {number} [maxLines=100] The maximum number of meridians and\n * parallels from the center of the map. The default value of 100 means that at\n * most 200 meridians and 200 parallels will be displayed. The default value is\n * appropriate for conformal projections like Spherical Mercator. If you\n * increase the value, more lines will be drawn and the drawing performance will\n * decrease.\n * @property {Stroke} [strokeStyle='rgba(0,0,0,0.2)'] The\n * stroke style to use for drawing the graticule. If not provided, a not fully\n * opaque black will be used.\n * @property {number} [targetSize=100] The target size of the graticule cells,\n * in pixels.\n * @property {boolean} [showLabels=false] Render a label with the respective\n * latitude/longitude for each graticule line.\n * @property {function(number):string} [lonLabelFormatter] Label formatter for\n * longitudes. This function is called with the longitude as argument, and\n * should return a formatted string representing the longitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {function(number):string} [latLabelFormatter] Label formatter for\n * latitudes. This function is called with the latitude as argument, and\n * should return a formatted string representing the latitude. By default,\n * labels are formatted as degrees, minutes, seconds and hemisphere.\n * @property {number} [lonLabelPosition=0] Longitude label position in fractions\n * (0..1) of view extent. 0 means at the bottom of the viewport, 1 means at the\n * top.\n * @property {number} [latLabelPosition=1] Latitude label position in fractions\n * (0..1) of view extent. 0 means at the left of the viewport, 1 means at the\n * right.\n * @property {Text} [lonLabelStyle] Longitude label text\n * style. If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textBaseline: 'bottom',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: new Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textBaseline` configuration will not work well for\n * `lonLabelPosition` configurations that position labels close to the top of\n * the viewport.\n * @property {Text} [latLabelStyle] Latitude label text style.\n * If not provided, the following style will be used:\n * ```js\n * new Text({\n *   font: '12px Calibri,sans-serif',\n *   textAlign: 'end',\n *   fill: new Fill({\n *     color: 'rgba(0,0,0,1)'\n *   }),\n *   stroke: Stroke({\n *     color: 'rgba(255,255,255,1)',\n *     width: 3\n *   })\n * });\n * ```\n * Note that the default's `textAlign` configuration will not work well for\n * `latLabelPosition` configurations that position labels close to the left of\n * the viewport.\n * @property {Array<number>} [intervals=[90, 45, 30, 20, 10, 5, 2, 1, 0.5, 0.2, 0.1, 0.05, 0.01, 0.005, 0.002, 0.001]]\n * Intervals (in degrees) for the graticule. Example to limit graticules to 30 and 10 degrees intervals:\n * ```js\n * [30, 10]\n * ```\n * @property {boolean} [wrapX=true] Whether to repeat the graticule horizontally.\n */\n\n/**\n * @classdesc\n * Layer that renders a grid for a coordinate system (currently only EPSG:4326 is supported).\n * Note that the view projection must define both extent and worldExtent.\n *\n * @fires import(\"../render/Event.js\").RenderEvent\n * @api\n */\nclass Graticule extends VectorLayer {\n  /**\n   * @param {Options=} opt_options Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const baseOptions = assign(\n      {\n        updateWhileAnimating: true,\n        updateWhileInteracting: true,\n        renderBuffer: 0,\n      },\n      options\n    );\n\n    delete baseOptions.maxLines;\n    delete baseOptions.strokeStyle;\n    delete baseOptions.targetSize;\n    delete baseOptions.showLabels;\n    delete baseOptions.lonLabelFormatter;\n    delete baseOptions.latLabelFormatter;\n    delete baseOptions.lonLabelPosition;\n    delete baseOptions.latLabelPosition;\n    delete baseOptions.lonLabelStyle;\n    delete baseOptions.latLabelStyle;\n    delete baseOptions.intervals;\n    super(baseOptions);\n\n    /**\n     * @type {import(\"../proj/Projection.js\").default}\n     */\n    this.projection_ = null;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxLat_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxLon_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minLat_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minLon_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxX_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxY_ = Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minX_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.minY_ = -Infinity;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.targetSize_ =\n      options.targetSize !== undefined ? options.targetSize : 100;\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxLines_ = options.maxLines !== undefined ? options.maxLines : 100;\n\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n    this.meridians_ = [];\n\n    /**\n     * @type {Array<LineString>}\n     * @private\n     */\n    this.parallels_ = [];\n\n    /**\n     * @type {Stroke}\n     * @private\n     */\n    this.strokeStyle_ =\n      options.strokeStyle !== undefined\n        ? options.strokeStyle\n        : DEFAULT_STROKE_STYLE;\n\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n    this.fromLonLatTransform_ = undefined;\n\n    /**\n     * @type {import(\"../proj.js\").TransformFunction|undefined}\n     * @private\n     */\n    this.toLonLatTransform_ = undefined;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.projectionCenterLonLat_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.bottomLeft_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.bottomRight_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.topLeft_ = null;\n\n    /**\n     * @type {import(\"../coordinate.js\").Coordinate}\n     * @private\n     */\n    this.topRight_ = null;\n\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n    this.meridiansLabels_ = null;\n\n    /**\n     * @type {Array<GraticuleLabelDataType>}\n     * @private\n     */\n    this.parallelsLabels_ = null;\n\n    if (options.showLabels) {\n      /**\n       * @type {null|function(number):string}\n       * @private\n       */\n      this.lonLabelFormatter_ =\n        options.lonLabelFormatter == undefined\n          ? degreesToStringHDMS.bind(this, 'EW')\n          : options.lonLabelFormatter;\n\n      /**\n       * @type {function(number):string}\n       * @private\n       */\n      this.latLabelFormatter_ =\n        options.latLabelFormatter == undefined\n          ? degreesToStringHDMS.bind(this, 'NS')\n          : options.latLabelFormatter;\n\n      /**\n       * Longitude label position in fractions (0..1) of view extent. 0 means\n       * bottom, 1 means top.\n       * @type {number}\n       * @private\n       */\n      this.lonLabelPosition_ =\n        options.lonLabelPosition == undefined ? 0 : options.lonLabelPosition;\n\n      /**\n       * Latitude Label position in fractions (0..1) of view extent. 0 means left, 1\n       * means right.\n       * @type {number}\n       * @private\n       */\n      this.latLabelPosition_ =\n        options.latLabelPosition == undefined ? 1 : options.latLabelPosition;\n\n      /**\n       * @type {Style}\n       * @private\n       */\n      this.lonLabelStyleBase_ = new Style({\n        text:\n          options.lonLabelStyle !== undefined\n            ? options.lonLabelStyle.clone()\n            : new Text({\n                font: '12px Calibri,sans-serif',\n                textBaseline: 'bottom',\n                fill: new Fill({\n                  color: 'rgba(0,0,0,1)',\n                }),\n                stroke: new Stroke({\n                  color: 'rgba(255,255,255,1)',\n                  width: 3,\n                }),\n              }),\n      });\n\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n      this.lonLabelStyle_ = function (feature) {\n        const label = feature.get('graticule_label');\n        this.lonLabelStyleBase_.getText().setText(label);\n        return this.lonLabelStyleBase_;\n      }.bind(this);\n\n      /**\n       * @type {Style}\n       * @private\n       */\n      this.latLabelStyleBase_ = new Style({\n        text:\n          options.latLabelStyle !== undefined\n            ? options.latLabelStyle.clone()\n            : new Text({\n                font: '12px Calibri,sans-serif',\n                textAlign: 'right',\n                fill: new Fill({\n                  color: 'rgba(0,0,0,1)',\n                }),\n                stroke: new Stroke({\n                  color: 'rgba(255,255,255,1)',\n                  width: 3,\n                }),\n              }),\n      });\n\n      /**\n       * @private\n       * @param {import(\"../Feature\").default} feature Feature\n       * @return {Style} style\n       */\n      this.latLabelStyle_ = function (feature) {\n        const label = feature.get('graticule_label');\n        this.latLabelStyleBase_.getText().setText(label);\n        return this.latLabelStyleBase_;\n      }.bind(this);\n\n      this.meridiansLabels_ = [];\n      this.parallelsLabels_ = [];\n\n      this.addEventListener(EventType.POSTRENDER, this.drawLabels_.bind(this));\n    }\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.intervals_ =\n      options.intervals !== undefined ? options.intervals : INTERVALS;\n\n    // use a source with a custom loader for lines & text\n    this.setSource(\n      new VectorSource({\n        loader: this.loaderFunction.bind(this),\n        strategy: this.strategyFunction.bind(this),\n        features: new Collection(),\n        overlaps: false,\n        useSpatialIndex: false,\n        wrapX: options.wrapX,\n      })\n    );\n\n    /**\n     * feature pool to use when updating graticule\n     * @type {Array<Feature>}\n     * @private\n     */\n    this.featurePool_ = [];\n\n    /**\n     * @type {Style}\n     * @private\n     */\n    this.lineStyle_ = new Style({\n      stroke: this.strokeStyle_,\n    });\n\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     * @private\n     */\n    this.loadedExtent_ = null;\n\n    /**\n     * @type {?import(\"../extent.js\").Extent}\n     */\n    this.renderedExtent_ = null;\n\n    this.setRenderOrder(null);\n  }\n\n  /**\n   * Strategy function for loading features based on the view's extent and\n   * resolution.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @return {Array<import(\"../extent.js\").Extent>} Extents.\n   */\n  strategyFunction(extent, resolution) {\n    // extents may be passed in different worlds, to avoid endless loop we use only one\n    let realWorldExtent = extent.slice();\n    if (this.projection_ && this.getSource().getWrapX()) {\n      wrapExtentX(realWorldExtent, this.projection_);\n    }\n    if (this.loadedExtent_) {\n      if (\n        approximatelyEquals(this.loadedExtent_, realWorldExtent, resolution)\n      ) {\n        // make sure result is exactly equal to previous extent\n        realWorldExtent = this.loadedExtent_.slice();\n      } else {\n        // we should not keep track of loaded extents\n        this.getSource().removeLoadedExtent(this.loadedExtent_);\n      }\n    }\n    return [realWorldExtent];\n  }\n\n  /**\n   * Update geometries in the source based on current view\n   * @param {import(\"../extent\").Extent} extent Extent\n   * @param {number} resolution Resolution\n   * @param {import(\"../proj/Projection.js\").default} projection Projection\n   */\n  loaderFunction(extent, resolution, projection) {\n    this.loadedExtent_ = extent;\n    const source = this.getSource();\n\n    // only consider the intersection between our own extent & the requested one\n    const layerExtent = this.getExtent() || [\n      -Infinity,\n      -Infinity,\n      Infinity,\n      Infinity,\n    ];\n    const renderExtent = getIntersection(layerExtent, extent);\n\n    if (this.renderedExtent_ && equals(this.renderedExtent_, renderExtent)) {\n      return;\n    }\n    this.renderedExtent_ = renderExtent;\n\n    // bail out if nothing to render\n    if (isEmpty(renderExtent)) {\n      return;\n    }\n\n    // update projection info\n    const center = getCenter(renderExtent);\n    const squaredTolerance = (resolution * resolution) / 4;\n\n    const updateProjectionInfo =\n      !this.projection_ || !equivalentProjection(this.projection_, projection);\n\n    if (updateProjectionInfo) {\n      this.updateProjectionInfo_(projection);\n    }\n\n    this.createGraticule_(renderExtent, center, resolution, squaredTolerance);\n\n    // first make sure we have enough features in the pool\n    let featureCount = this.meridians_.length + this.parallels_.length;\n    if (this.meridiansLabels_) {\n      featureCount += this.meridians_.length;\n    }\n    if (this.parallelsLabels_) {\n      featureCount += this.parallels_.length;\n    }\n\n    let feature;\n    while (featureCount > this.featurePool_.length) {\n      feature = new Feature();\n      this.featurePool_.push(feature);\n    }\n\n    const featuresColl = source.getFeaturesCollection();\n    featuresColl.clear();\n    let poolIndex = 0;\n\n    // add features for the lines & labels\n    let i, l;\n    for (i = 0, l = this.meridians_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.meridians_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n    for (i = 0, l = this.parallels_.length; i < l; ++i) {\n      feature = this.featurePool_[poolIndex++];\n      feature.setGeometry(this.parallels_[i]);\n      feature.setStyle(this.lineStyle_);\n      featuresColl.push(feature);\n    }\n  }\n\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n  addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, index) {\n    const lineString = this.getMeridian_(\n      lon,\n      minLat,\n      maxLat,\n      squaredTolerance,\n      index\n    );\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.meridiansLabels_) {\n        const text = this.lonLabelFormatter_(lon);\n        if (index in this.meridiansLabels_) {\n          this.meridiansLabels_[index].text = text;\n        } else {\n          this.meridiansLabels_[index] = {\n            geom: new Point([]),\n            text: text,\n          };\n        }\n      }\n      this.meridians_[index++] = lineString;\n    }\n    return index;\n  }\n\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {number} Index.\n   * @private\n   */\n  addParallel_(lat, minLon, maxLon, squaredTolerance, extent, index) {\n    const lineString = this.getParallel_(\n      lat,\n      minLon,\n      maxLon,\n      squaredTolerance,\n      index\n    );\n    if (intersects(lineString.getExtent(), extent)) {\n      if (this.parallelsLabels_) {\n        const text = this.latLabelFormatter_(lat);\n        if (index in this.parallelsLabels_) {\n          this.parallelsLabels_[index].text = text;\n        } else {\n          this.parallelsLabels_[index] = {\n            geom: new Point([]),\n            text: text,\n          };\n        }\n      }\n      this.parallels_[index++] = lineString;\n    }\n    return index;\n  }\n\n  /**\n   * @param {import(\"../render/Event.js\").default} event Render event.\n   * @private\n   */\n  drawLabels_(event) {\n    const rotation = event.frameState.viewState.rotation;\n    const extent = event.frameState.extent;\n    const rotationCenter = getCenter(extent);\n    let rotationExtent = extent;\n    if (rotation) {\n      const width = getWidth(extent);\n      const height = getHeight(extent);\n      const cr = Math.abs(Math.cos(rotation));\n      const sr = Math.abs(Math.sin(rotation));\n      const unrotatedWidth = (sr * height - cr * width) / (sr * sr - cr * cr);\n      const unrotatedHeight = (sr * width - cr * height) / (sr * sr - cr * cr);\n      rotationExtent = [\n        rotationCenter[0] - unrotatedWidth / 2,\n        rotationCenter[1] - unrotatedHeight / 2,\n        rotationCenter[0] + unrotatedWidth / 2,\n        rotationCenter[1] + unrotatedHeight / 2,\n      ];\n    }\n\n    let startWorld = 0;\n    let endWorld = 0;\n    let labelsAtStart = this.latLabelPosition_ < 0.5;\n    const projectionExtent = this.projection_.getExtent();\n    const worldWidth = getWidth(projectionExtent);\n    if (\n      this.getSource().getWrapX() &&\n      this.projection_.canWrapX() &&\n      !containsExtent(projectionExtent, extent)\n    ) {\n      startWorld = Math.floor((extent[0] - projectionExtent[0]) / worldWidth);\n      endWorld = Math.ceil((extent[2] - projectionExtent[2]) / worldWidth);\n      const inverted = Math.abs(rotation) > Math.PI / 2;\n      labelsAtStart = labelsAtStart !== inverted;\n    }\n    const vectorContext = getVectorContext(event);\n\n    for (let world = startWorld; world <= endWorld; ++world) {\n      let poolIndex = this.meridians_.length + this.parallels_.length;\n      let feature, index, l, textPoint;\n\n      if (this.meridiansLabels_) {\n        for (index = 0, l = this.meridiansLabels_.length; index < l; ++index) {\n          const lineString = this.meridians_[index];\n          if (!rotation && world === 0) {\n            textPoint = this.getMeridianPoint_(lineString, extent, index);\n          } else {\n            const clone = lineString.clone();\n            clone.translate(world * worldWidth, 0);\n            clone.rotate(-rotation, rotationCenter);\n            textPoint = this.getMeridianPoint_(clone, rotationExtent, index);\n            textPoint.rotate(rotation, rotationCenter);\n          }\n          feature = this.featurePool_[poolIndex++];\n          feature.setGeometry(textPoint);\n          feature.set('graticule_label', this.meridiansLabels_[index].text);\n          vectorContext.drawFeature(feature, this.lonLabelStyle_(feature));\n        }\n      }\n      if (this.parallelsLabels_) {\n        if (\n          (world === startWorld && labelsAtStart) ||\n          (world === endWorld && !labelsAtStart)\n        ) {\n          for (index = 0, l = this.parallels_.length; index < l; ++index) {\n            const lineString = this.parallels_[index];\n            if (!rotation && world === 0) {\n              textPoint = this.getParallelPoint_(lineString, extent, index);\n            } else {\n              const clone = lineString.clone();\n              clone.translate(world * worldWidth, 0);\n              clone.rotate(-rotation, rotationCenter);\n              textPoint = this.getParallelPoint_(clone, rotationExtent, index);\n              textPoint.rotate(rotation, rotationCenter);\n            }\n            feature = this.featurePool_[poolIndex++];\n            feature.setGeometry(textPoint);\n            feature.set('graticule_label', this.parallelsLabels_[index].text);\n            vectorContext.drawFeature(feature, this.latLabelStyle_(feature));\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../coordinate.js\").Coordinate} center Center.\n   * @param {number} resolution Resolution.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @private\n   */\n  createGraticule_(extent, center, resolution, squaredTolerance) {\n    const interval = this.getInterval_(resolution);\n    if (interval == -1) {\n      this.meridians_.length = 0;\n      this.parallels_.length = 0;\n      if (this.meridiansLabels_) {\n        this.meridiansLabels_.length = 0;\n      }\n      if (this.parallelsLabels_) {\n        this.parallelsLabels_.length = 0;\n      }\n      return;\n    }\n\n    let wrapX = false;\n    const projectionExtent = this.projection_.getExtent();\n    const worldWidth = getWidth(projectionExtent);\n    if (\n      this.getSource().getWrapX() &&\n      this.projection_.canWrapX() &&\n      !containsExtent(projectionExtent, extent)\n    ) {\n      if (getWidth(extent) >= worldWidth) {\n        extent[0] = projectionExtent[0];\n        extent[2] = projectionExtent[2];\n      } else {\n        wrapX = true;\n      }\n    }\n\n    // Constrain the center to fit into the extent available to the graticule\n\n    const validCenterP = [\n      clamp(center[0], this.minX_, this.maxX_),\n      clamp(center[1], this.minY_, this.maxY_),\n    ];\n\n    // Transform the center to lon lat\n    // Some projections may have a void area at the poles\n    // so replace any NaN latitudes with the min or max value closest to a pole\n\n    const centerLonLat = this.toLonLatTransform_(validCenterP);\n    if (isNaN(centerLonLat[1])) {\n      centerLonLat[1] =\n        Math.abs(this.maxLat_) >= Math.abs(this.minLat_)\n          ? this.maxLat_\n          : this.minLat_;\n    }\n    let centerLon = clamp(centerLonLat[0], this.minLon_, this.maxLon_);\n    let centerLat = clamp(centerLonLat[1], this.minLat_, this.maxLat_);\n    const maxLines = this.maxLines_;\n    let cnt, idx, lat, lon;\n\n    // Limit the extent to fit into the extent available to the graticule\n\n    let validExtentP = extent;\n    if (!wrapX) {\n      validExtentP = [\n        clamp(extent[0], this.minX_, this.maxX_),\n        clamp(extent[1], this.minY_, this.maxY_),\n        clamp(extent[2], this.minX_, this.maxX_),\n        clamp(extent[3], this.minY_, this.maxY_),\n      ];\n    }\n\n    // Transform the extent to get the lon lat ranges for the edges of the extent\n\n    const validExtent = applyTransform(\n      validExtentP,\n      this.toLonLatTransform_,\n      undefined,\n      8\n    );\n\n    let maxLat = validExtent[3];\n    let maxLon = validExtent[2];\n    let minLat = validExtent[1];\n    let minLon = validExtent[0];\n\n    if (!wrapX) {\n      // Check if extremities of the world extent lie inside the extent\n      // (for example the pole in a polar projection)\n      // and extend the extent as appropriate\n\n      if (containsCoordinate(validExtentP, this.bottomLeft_)) {\n        minLon = this.minLon_;\n        minLat = this.minLat_;\n      }\n      if (containsCoordinate(validExtentP, this.bottomRight_)) {\n        maxLon = this.maxLon_;\n        minLat = this.minLat_;\n      }\n      if (containsCoordinate(validExtentP, this.topLeft_)) {\n        minLon = this.minLon_;\n        maxLat = this.maxLat_;\n      }\n      if (containsCoordinate(validExtentP, this.topRight_)) {\n        maxLon = this.maxLon_;\n        maxLat = this.maxLat_;\n      }\n\n      // The transformed center may also extend the lon lat ranges used for rendering\n\n      maxLat = clamp(maxLat, centerLat, this.maxLat_);\n      maxLon = clamp(maxLon, centerLon, this.maxLon_);\n      minLat = clamp(minLat, this.minLat_, centerLat);\n      minLon = clamp(minLon, this.minLon_, centerLon);\n    }\n\n    // Create meridians\n\n    centerLon = Math.floor(centerLon / interval) * interval;\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n\n    idx = this.addMeridian_(lon, minLat, maxLat, squaredTolerance, extent, 0);\n\n    cnt = 0;\n    if (wrapX) {\n      while ((lon -= interval) >= minLon && cnt++ < maxLines) {\n        idx = this.addMeridian_(\n          lon,\n          minLat,\n          maxLat,\n          squaredTolerance,\n          extent,\n          idx\n        );\n      }\n    } else {\n      while (lon != this.minLon_ && cnt++ < maxLines) {\n        lon = Math.max(lon - interval, this.minLon_);\n        idx = this.addMeridian_(\n          lon,\n          minLat,\n          maxLat,\n          squaredTolerance,\n          extent,\n          idx\n        );\n      }\n    }\n\n    lon = clamp(centerLon, this.minLon_, this.maxLon_);\n\n    cnt = 0;\n    if (wrapX) {\n      while ((lon += interval) <= maxLon && cnt++ < maxLines) {\n        idx = this.addMeridian_(\n          lon,\n          minLat,\n          maxLat,\n          squaredTolerance,\n          extent,\n          idx\n        );\n      }\n    } else {\n      while (lon != this.maxLon_ && cnt++ < maxLines) {\n        lon = Math.min(lon + interval, this.maxLon_);\n        idx = this.addMeridian_(\n          lon,\n          minLat,\n          maxLat,\n          squaredTolerance,\n          extent,\n          idx\n        );\n      }\n    }\n\n    this.meridians_.length = idx;\n    if (this.meridiansLabels_) {\n      this.meridiansLabels_.length = idx;\n    }\n\n    // Create parallels\n\n    centerLat = Math.floor(centerLat / interval) * interval;\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n\n    idx = this.addParallel_(lat, minLon, maxLon, squaredTolerance, extent, 0);\n\n    cnt = 0;\n    while (lat != this.minLat_ && cnt++ < maxLines) {\n      lat = Math.max(lat - interval, this.minLat_);\n      idx = this.addParallel_(\n        lat,\n        minLon,\n        maxLon,\n        squaredTolerance,\n        extent,\n        idx\n      );\n    }\n\n    lat = clamp(centerLat, this.minLat_, this.maxLat_);\n\n    cnt = 0;\n    while (lat != this.maxLat_ && cnt++ < maxLines) {\n      lat = Math.min(lat + interval, this.maxLat_);\n      idx = this.addParallel_(\n        lat,\n        minLon,\n        maxLon,\n        squaredTolerance,\n        extent,\n        idx\n      );\n    }\n\n    this.parallels_.length = idx;\n    if (this.parallelsLabels_) {\n      this.parallelsLabels_.length = idx;\n    }\n  }\n\n  /**\n   * @param {number} resolution Resolution.\n   * @return {number} The interval in degrees.\n   * @private\n   */\n  getInterval_(resolution) {\n    const centerLon = this.projectionCenterLonLat_[0];\n    const centerLat = this.projectionCenterLonLat_[1];\n    let interval = -1;\n    const target = Math.pow(this.targetSize_ * resolution, 2);\n    /** @type {Array<number>} **/\n    const p1 = [];\n    /** @type {Array<number>} **/\n    const p2 = [];\n    for (let i = 0, ii = this.intervals_.length; i < ii; ++i) {\n      const delta = clamp(this.intervals_[i] / 2, 0, 90);\n      // Don't attempt to transform latitudes beyond the poles!\n      const clampedLat = clamp(centerLat, -90 + delta, 90 - delta);\n      p1[0] = centerLon - delta;\n      p1[1] = clampedLat - delta;\n      p2[0] = centerLon + delta;\n      p2[1] = clampedLat + delta;\n      this.fromLonLatTransform_(p1, p1);\n      this.fromLonLatTransform_(p2, p2);\n      const dist = Math.pow(p2[0] - p1[0], 2) + Math.pow(p2[1] - p1[1], 2);\n      if (dist <= target) {\n        break;\n      }\n      interval = this.intervals_[i];\n    }\n    return interval;\n  }\n\n  /**\n   * @param {number} lon Longitude.\n   * @param {number} minLat Minimal latitude.\n   * @param {number} maxLat Maximal latitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The meridian line string.\n   * @param {number} index Index.\n   * @private\n   */\n  getMeridian_(lon, minLat, maxLat, squaredTolerance, index) {\n    const flatCoordinates = meridian(\n      lon,\n      minLat,\n      maxLat,\n      this.projection_,\n      squaredTolerance\n    );\n    let lineString = this.meridians_[index];\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, GeometryLayout.XY);\n      this.meridians_[index] = lineString;\n    } else {\n      lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n      lineString.changed();\n    }\n    return lineString;\n  }\n\n  /**\n   * @param {LineString} lineString Meridian\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Meridian point.\n   * @private\n   */\n  getMeridianPoint_(lineString, extent, index) {\n    const flatCoordinates = lineString.getFlatCoordinates();\n    let bottom = 1;\n    let top = flatCoordinates.length - 1;\n    if (flatCoordinates[bottom] > flatCoordinates[top]) {\n      bottom = top;\n      top = 1;\n    }\n    const clampedBottom = Math.max(extent[1], flatCoordinates[bottom]);\n    const clampedTop = Math.min(extent[3], flatCoordinates[top]);\n    const lat = clamp(\n      extent[1] + Math.abs(extent[1] - extent[3]) * this.lonLabelPosition_,\n      clampedBottom,\n      clampedTop\n    );\n    const coordinate0 =\n      flatCoordinates[bottom - 1] +\n      ((flatCoordinates[top - 1] - flatCoordinates[bottom - 1]) *\n        (lat - flatCoordinates[bottom])) /\n        (flatCoordinates[top] - flatCoordinates[bottom]);\n    const coordinate = [coordinate0, lat];\n    const point = this.meridiansLabels_[index].geom;\n    point.setCoordinates(coordinate);\n    return point;\n  }\n\n  /**\n   * Get the list of meridians.  Meridians are lines of equal longitude.\n   * @return {Array<LineString>} The meridians.\n   * @api\n   */\n  getMeridians() {\n    return this.meridians_;\n  }\n\n  /**\n   * @param {number} lat Latitude.\n   * @param {number} minLon Minimal longitude.\n   * @param {number} maxLon Maximal longitude.\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {LineString} The parallel line string.\n   * @param {number} index Index.\n   * @private\n   */\n  getParallel_(lat, minLon, maxLon, squaredTolerance, index) {\n    const flatCoordinates = parallel(\n      lat,\n      minLon,\n      maxLon,\n      this.projection_,\n      squaredTolerance\n    );\n    let lineString = this.parallels_[index];\n    if (!lineString) {\n      lineString = new LineString(flatCoordinates, GeometryLayout.XY);\n    } else {\n      lineString.setFlatCoordinates(GeometryLayout.XY, flatCoordinates);\n      lineString.changed();\n    }\n    return lineString;\n  }\n\n  /**\n   * @param {LineString} lineString Parallels.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} index Index.\n   * @return {Point} Parallel point.\n   * @private\n   */\n  getParallelPoint_(lineString, extent, index) {\n    const flatCoordinates = lineString.getFlatCoordinates();\n    let left = 0;\n    let right = flatCoordinates.length - 2;\n    if (flatCoordinates[left] > flatCoordinates[right]) {\n      left = right;\n      right = 0;\n    }\n    const clampedLeft = Math.max(extent[0], flatCoordinates[left]);\n    const clampedRight = Math.min(extent[2], flatCoordinates[right]);\n    const lon = clamp(\n      extent[0] + Math.abs(extent[0] - extent[2]) * this.latLabelPosition_,\n      clampedLeft,\n      clampedRight\n    );\n    const coordinate1 =\n      flatCoordinates[left + 1] +\n      ((flatCoordinates[right + 1] - flatCoordinates[left + 1]) *\n        (lon - flatCoordinates[left])) /\n        (flatCoordinates[right] - flatCoordinates[left]);\n    const coordinate = [lon, coordinate1];\n    const point = this.parallelsLabels_[index].geom;\n    point.setCoordinates(coordinate);\n    return point;\n  }\n\n  /**\n   * Get the list of parallels.  Parallels are lines of equal latitude.\n   * @return {Array<LineString>} The parallels.\n   * @api\n   */\n  getParallels() {\n    return this.parallels_;\n  }\n\n  /**\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @private\n   */\n  updateProjectionInfo_(projection) {\n    const epsg4326Projection = getProjection('EPSG:4326');\n\n    const worldExtent = projection.getWorldExtent();\n\n    this.maxLat_ = worldExtent[3];\n    this.maxLon_ = worldExtent[2];\n    this.minLat_ = worldExtent[1];\n    this.minLon_ = worldExtent[0];\n\n    // If the world extent crosses the dateline define a custom transform to\n    // return longitudes which wrap the dateline\n\n    const toLonLatTransform = getTransform(projection, epsg4326Projection);\n    if (this.minLon_ < this.maxLon_) {\n      this.toLonLatTransform_ = toLonLatTransform;\n    } else {\n      const split = this.minLon_ + this.maxLon_ / 2;\n      this.maxLon_ += 360;\n      this.toLonLatTransform_ = function (\n        coordinates,\n        opt_output,\n        opt_dimension\n      ) {\n        const dimension = opt_dimension || 2;\n        const lonLatCoordinates = toLonLatTransform(\n          coordinates,\n          opt_output,\n          dimension\n        );\n        for (let i = 0, l = lonLatCoordinates.length; i < l; i += dimension) {\n          if (lonLatCoordinates[i] < split) {\n            lonLatCoordinates[i] += 360;\n          }\n        }\n        return lonLatCoordinates;\n      };\n    }\n\n    // Transform the extent to get the limits of the view projection extent\n    // which should be available to the graticule\n\n    this.fromLonLatTransform_ = getTransform(epsg4326Projection, projection);\n    const worldExtentP = applyTransform(\n      [this.minLon_, this.minLat_, this.maxLon_, this.maxLat_],\n      this.fromLonLatTransform_,\n      undefined,\n      8\n    );\n\n    this.minX_ = worldExtentP[0];\n    this.maxX_ = worldExtentP[2];\n    this.minY_ = worldExtentP[1];\n    this.maxY_ = worldExtentP[3];\n\n    // Determine the view projection coordinates of the extremities of the world extent\n    // as these may lie inside a view extent (for example the pole in a polar projection)\n\n    this.bottomLeft_ = this.fromLonLatTransform_([this.minLon_, this.minLat_]);\n    this.bottomRight_ = this.fromLonLatTransform_([this.maxLon_, this.minLat_]);\n    this.topLeft_ = this.fromLonLatTransform_([this.minLon_, this.maxLat_]);\n    this.topRight_ = this.fromLonLatTransform_([this.maxLon_, this.maxLat_]);\n\n    // Transform the projection center to lon lat\n    // Some projections may have a void area at the poles\n    // so replace any NaN latitudes with the min or max value closest to a pole\n\n    this.projectionCenterLonLat_ = this.toLonLatTransform_(\n      getCenter(projection.getExtent())\n    );\n    if (isNaN(this.projectionCenterLonLat_[1])) {\n      this.projectionCenterLonLat_[1] =\n        Math.abs(this.maxLat_) >= Math.abs(this.minLat_)\n          ? this.maxLat_\n          : this.minLat_;\n    }\n\n    this.projection_ = projection;\n  }\n}\n\nexport default Graticule;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}