{"ast":null,"code":"'use strict';\n\n// Load modules\n\n// Declare internals\nconst internals = {};\nexports.errors = {\n  root: 'value',\n  key: '\"{{!label}}\" ',\n  messages: {\n    wrapArrays: true\n  },\n  any: {\n    unknown: 'is not allowed',\n    invalid: 'contains an invalid value',\n    empty: 'is not allowed to be empty',\n    required: 'is required',\n    allowOnly: 'must be one of {{valids}}',\n    default: 'threw an error when running default method'\n  },\n  alternatives: {\n    base: 'not matching any of the allowed alternatives',\n    child: null\n  },\n  array: {\n    base: 'must be an array',\n    includes: 'at position {{pos}} does not match any of the allowed types',\n    includesSingle: 'single value of \"{{!label}}\" does not match any of the allowed types',\n    includesOne: 'at position {{pos}} fails because {{reason}}',\n    includesOneSingle: 'single value of \"{{!label}}\" fails because {{reason}}',\n    includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',\n    includesRequiredKnowns: 'does not contain {{knownMisses}}',\n    includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',\n    excludes: 'at position {{pos}} contains an excluded value',\n    excludesSingle: 'single value of \"{{!label}}\" contains an excluded value',\n    min: 'must contain at least {{limit}} items',\n    max: 'must contain less than or equal to {{limit}} items',\n    length: 'must contain {{limit}} items',\n    ordered: 'at position {{pos}} fails because {{reason}}',\n    orderedLength: 'at position {{pos}} fails because array must contain at most {{limit}} items',\n    ref: 'references \"{{ref}}\" which is not a positive integer',\n    sparse: 'must not be a sparse array',\n    unique: 'position {{pos}} contains a duplicate value'\n  },\n  boolean: {\n    base: 'must be a boolean'\n  },\n  binary: {\n    base: 'must be a buffer or a string',\n    min: 'must be at least {{limit}} bytes',\n    max: 'must be less than or equal to {{limit}} bytes',\n    length: 'must be {{limit}} bytes'\n  },\n  date: {\n    base: 'must be a number of milliseconds or valid date string',\n    format: 'must be a string with one of the following formats {{format}}',\n    strict: 'must be a valid date',\n    min: 'must be larger than or equal to \"{{limit}}\"',\n    max: 'must be less than or equal to \"{{limit}}\"',\n    less: 'must be less than \"{{limit}}\"',\n    greater: 'must be greater than \"{{limit}}\"',\n    isoDate: 'must be a valid ISO 8601 date',\n    timestamp: {\n      javascript: 'must be a valid timestamp or number of milliseconds',\n      unix: 'must be a valid timestamp or number of seconds'\n    },\n    ref: 'references \"{{ref}}\" which is not a date'\n  },\n  function: {\n    base: 'must be a Function',\n    arity: 'must have an arity of {{n}}',\n    minArity: 'must have an arity greater or equal to {{n}}',\n    maxArity: 'must have an arity lesser or equal to {{n}}',\n    ref: 'must be a Joi reference',\n    class: 'must be a class'\n  },\n  lazy: {\n    base: '!!schema error: lazy schema must be set',\n    schema: '!!schema error: lazy schema function must return a schema'\n  },\n  object: {\n    base: 'must be an object',\n    child: '!!child \"{{!child}}\" fails because {{reason}}',\n    min: 'must have at least {{limit}} children',\n    max: 'must have less than or equal to {{limit}} children',\n    length: 'must have {{limit}} children',\n    allowUnknown: '!!\"{{!child}}\" is not allowed',\n    with: '!!\"{{mainWithLabel}}\" missing required peer \"{{peerWithLabel}}\"',\n    without: '!!\"{{mainWithLabel}}\" conflict with forbidden peer \"{{peerWithLabel}}\"',\n    missing: 'must contain at least one of {{peersWithLabels}}',\n    xor: 'contains a conflict between exclusive peers {{peersWithLabels}}',\n    or: 'must contain at least one of {{peersWithLabels}}',\n    and: 'contains {{presentWithLabels}} without its required peers {{missingWithLabels}}',\n    nand: '!!\"{{mainWithLabel}}\" must not exist simultaneously with {{peersWithLabels}}',\n    assert: '!!\"{{ref}}\" validation failed because \"{{ref}}\" failed to {{message}}',\n    rename: {\n      multiple: 'cannot rename child \"{{from}}\" because multiple renames are disabled and another key was already renamed to \"{{to}}\"',\n      override: 'cannot rename child \"{{from}}\" because override is disabled and target \"{{to}}\" exists',\n      regex: {\n        multiple: 'cannot rename children {{from}} because multiple renames are disabled and another key was already renamed to \"{{to}}\"',\n        override: 'cannot rename children {{from}} because override is disabled and target \"{{to}}\" exists'\n      }\n    },\n    type: 'must be an instance of \"{{type}}\"',\n    schema: 'must be a Joi instance'\n  },\n  number: {\n    base: 'must be a number',\n    min: 'must be larger than or equal to {{limit}}',\n    max: 'must be less than or equal to {{limit}}',\n    less: 'must be less than {{limit}}',\n    greater: 'must be greater than {{limit}}',\n    float: 'must be a float or double',\n    integer: 'must be an integer',\n    negative: 'must be a negative number',\n    positive: 'must be a positive number',\n    precision: 'must have no more than {{limit}} decimal places',\n    ref: 'references \"{{ref}}\" which is not a number',\n    multiple: 'must be a multiple of {{multiple}}',\n    port: 'must be a valid port'\n  },\n  string: {\n    base: 'must be a string',\n    min: 'length must be at least {{limit}} characters long',\n    max: 'length must be less than or equal to {{limit}} characters long',\n    length: 'length must be {{limit}} characters long',\n    alphanum: 'must only contain alpha-numeric characters',\n    token: 'must only contain alpha-numeric and underscore characters',\n    regex: {\n      base: 'with value \"{{!value}}\" fails to match the required pattern: {{pattern}}',\n      name: 'with value \"{{!value}}\" fails to match the {{name}} pattern',\n      invert: {\n        base: 'with value \"{{!value}}\" matches the inverted pattern: {{pattern}}',\n        name: 'with value \"{{!value}}\" matches the inverted {{name}} pattern'\n      }\n    },\n    email: 'must be a valid email',\n    uri: 'must be a valid uri',\n    uriRelativeOnly: 'must be a valid relative uri',\n    uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',\n    isoDate: 'must be a valid ISO 8601 date',\n    guid: 'must be a valid GUID',\n    hex: 'must only contain hexadecimal characters',\n    hexAlign: 'hex decoded representation must be byte aligned',\n    base64: 'must be a valid base64 string',\n    dataUri: 'must be a valid dataUri string',\n    hostname: 'must be a valid hostname',\n    normalize: 'must be unicode normalized in the {{form}} form',\n    lowercase: 'must only contain lowercase characters',\n    uppercase: 'must only contain uppercase characters',\n    trim: 'must not have leading or trailing whitespace',\n    creditCard: 'must be a credit card',\n    ref: 'references \"{{ref}}\" which is not a number',\n    ip: 'must be a valid ip address with a {{cidr}} CIDR',\n    ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'\n  },\n  symbol: {\n    base: 'must be a symbol',\n    map: 'must be one of {{map}}'\n  }\n};","map":{"version":3,"names":["internals","exports","errors","root","key","messages","wrapArrays","any","unknown","invalid","empty","required","allowOnly","default","alternatives","base","child","array","includes","includesSingle","includesOne","includesOneSingle","includesRequiredUnknowns","includesRequiredKnowns","includesRequiredBoth","excludes","excludesSingle","min","max","length","ordered","orderedLength","ref","sparse","unique","boolean","binary","date","format","strict","less","greater","isoDate","timestamp","javascript","unix","function","arity","minArity","maxArity","class","lazy","schema","object","allowUnknown","with","without","missing","xor","or","and","nand","assert","rename","multiple","override","regex","type","number","float","integer","negative","positive","precision","port","string","alphanum","token","name","invert","email","uri","uriRelativeOnly","uriCustomScheme","guid","hex","hexAlign","base64","dataUri","hostname","normalize","lowercase","uppercase","trim","creditCard","ip","ipVersion","symbol","map"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/joi/lib/language.js"],"sourcesContent":["'use strict';\n\n// Load modules\n\n\n// Declare internals\n\nconst internals = {};\n\n\nexports.errors = {\n    root: 'value',\n    key: '\"{{!label}}\" ',\n    messages: {\n        wrapArrays: true\n    },\n    any: {\n        unknown: 'is not allowed',\n        invalid: 'contains an invalid value',\n        empty: 'is not allowed to be empty',\n        required: 'is required',\n        allowOnly: 'must be one of {{valids}}',\n        default: 'threw an error when running default method'\n    },\n    alternatives: {\n        base: 'not matching any of the allowed alternatives',\n        child: null\n    },\n    array: {\n        base: 'must be an array',\n        includes: 'at position {{pos}} does not match any of the allowed types',\n        includesSingle: 'single value of \"{{!label}}\" does not match any of the allowed types',\n        includesOne: 'at position {{pos}} fails because {{reason}}',\n        includesOneSingle: 'single value of \"{{!label}}\" fails because {{reason}}',\n        includesRequiredUnknowns: 'does not contain {{unknownMisses}} required value(s)',\n        includesRequiredKnowns: 'does not contain {{knownMisses}}',\n        includesRequiredBoth: 'does not contain {{knownMisses}} and {{unknownMisses}} other required value(s)',\n        excludes: 'at position {{pos}} contains an excluded value',\n        excludesSingle: 'single value of \"{{!label}}\" contains an excluded value',\n        min: 'must contain at least {{limit}} items',\n        max: 'must contain less than or equal to {{limit}} items',\n        length: 'must contain {{limit}} items',\n        ordered: 'at position {{pos}} fails because {{reason}}',\n        orderedLength: 'at position {{pos}} fails because array must contain at most {{limit}} items',\n        ref: 'references \"{{ref}}\" which is not a positive integer',\n        sparse: 'must not be a sparse array',\n        unique: 'position {{pos}} contains a duplicate value'\n    },\n    boolean: {\n        base: 'must be a boolean'\n    },\n    binary: {\n        base: 'must be a buffer or a string',\n        min: 'must be at least {{limit}} bytes',\n        max: 'must be less than or equal to {{limit}} bytes',\n        length: 'must be {{limit}} bytes'\n    },\n    date: {\n        base: 'must be a number of milliseconds or valid date string',\n        format: 'must be a string with one of the following formats {{format}}',\n        strict: 'must be a valid date',\n        min: 'must be larger than or equal to \"{{limit}}\"',\n        max: 'must be less than or equal to \"{{limit}}\"',\n        less: 'must be less than \"{{limit}}\"',\n        greater: 'must be greater than \"{{limit}}\"',\n        isoDate: 'must be a valid ISO 8601 date',\n        timestamp: {\n            javascript: 'must be a valid timestamp or number of milliseconds',\n            unix: 'must be a valid timestamp or number of seconds'\n        },\n        ref: 'references \"{{ref}}\" which is not a date'\n    },\n    function: {\n        base: 'must be a Function',\n        arity: 'must have an arity of {{n}}',\n        minArity: 'must have an arity greater or equal to {{n}}',\n        maxArity: 'must have an arity lesser or equal to {{n}}',\n        ref: 'must be a Joi reference',\n        class: 'must be a class'\n    },\n    lazy: {\n        base: '!!schema error: lazy schema must be set',\n        schema: '!!schema error: lazy schema function must return a schema'\n    },\n    object: {\n        base: 'must be an object',\n        child: '!!child \"{{!child}}\" fails because {{reason}}',\n        min: 'must have at least {{limit}} children',\n        max: 'must have less than or equal to {{limit}} children',\n        length: 'must have {{limit}} children',\n        allowUnknown: '!!\"{{!child}}\" is not allowed',\n        with: '!!\"{{mainWithLabel}}\" missing required peer \"{{peerWithLabel}}\"',\n        without: '!!\"{{mainWithLabel}}\" conflict with forbidden peer \"{{peerWithLabel}}\"',\n        missing: 'must contain at least one of {{peersWithLabels}}',\n        xor: 'contains a conflict between exclusive peers {{peersWithLabels}}',\n        or: 'must contain at least one of {{peersWithLabels}}',\n        and: 'contains {{presentWithLabels}} without its required peers {{missingWithLabels}}',\n        nand: '!!\"{{mainWithLabel}}\" must not exist simultaneously with {{peersWithLabels}}',\n        assert: '!!\"{{ref}}\" validation failed because \"{{ref}}\" failed to {{message}}',\n        rename: {\n            multiple: 'cannot rename child \"{{from}}\" because multiple renames are disabled and another key was already renamed to \"{{to}}\"',\n            override: 'cannot rename child \"{{from}}\" because override is disabled and target \"{{to}}\" exists',\n            regex: {\n                multiple: 'cannot rename children {{from}} because multiple renames are disabled and another key was already renamed to \"{{to}}\"',\n                override: 'cannot rename children {{from}} because override is disabled and target \"{{to}}\" exists'\n            }\n        },\n        type: 'must be an instance of \"{{type}}\"',\n        schema: 'must be a Joi instance'\n    },\n    number: {\n        base: 'must be a number',\n        min: 'must be larger than or equal to {{limit}}',\n        max: 'must be less than or equal to {{limit}}',\n        less: 'must be less than {{limit}}',\n        greater: 'must be greater than {{limit}}',\n        float: 'must be a float or double',\n        integer: 'must be an integer',\n        negative: 'must be a negative number',\n        positive: 'must be a positive number',\n        precision: 'must have no more than {{limit}} decimal places',\n        ref: 'references \"{{ref}}\" which is not a number',\n        multiple: 'must be a multiple of {{multiple}}',\n        port: 'must be a valid port'\n    },\n    string: {\n        base: 'must be a string',\n        min: 'length must be at least {{limit}} characters long',\n        max: 'length must be less than or equal to {{limit}} characters long',\n        length: 'length must be {{limit}} characters long',\n        alphanum: 'must only contain alpha-numeric characters',\n        token: 'must only contain alpha-numeric and underscore characters',\n        regex: {\n            base: 'with value \"{{!value}}\" fails to match the required pattern: {{pattern}}',\n            name: 'with value \"{{!value}}\" fails to match the {{name}} pattern',\n            invert: {\n                base: 'with value \"{{!value}}\" matches the inverted pattern: {{pattern}}',\n                name: 'with value \"{{!value}}\" matches the inverted {{name}} pattern'\n            }\n        },\n        email: 'must be a valid email',\n        uri: 'must be a valid uri',\n        uriRelativeOnly: 'must be a valid relative uri',\n        uriCustomScheme: 'must be a valid uri with a scheme matching the {{scheme}} pattern',\n        isoDate: 'must be a valid ISO 8601 date',\n        guid: 'must be a valid GUID',\n        hex: 'must only contain hexadecimal characters',\n        hexAlign: 'hex decoded representation must be byte aligned',\n        base64: 'must be a valid base64 string',\n        dataUri: 'must be a valid dataUri string',\n        hostname: 'must be a valid hostname',\n        normalize: 'must be unicode normalized in the {{form}} form',\n        lowercase: 'must only contain lowercase characters',\n        uppercase: 'must only contain uppercase characters',\n        trim: 'must not have leading or trailing whitespace',\n        creditCard: 'must be a credit card',\n        ref: 'references \"{{ref}}\" which is not a number',\n        ip: 'must be a valid ip address with a {{cidr}} CIDR',\n        ipVersion: 'must be a valid ip address of one of the following versions {{version}} with a {{cidr}} CIDR'\n    },\n    symbol: {\n        base: 'must be a symbol',\n        map: 'must be one of {{map}}'\n    }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}