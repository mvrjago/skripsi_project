{"ast":null,"code":"/**\n * @module ol/source/ImageCanvas\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageSource from './Image.js';\nimport { containsExtent, getHeight, getWidth, scaleFromCenter } from '../extent.js';\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the device pixel ratio, {@link module:ol/size~Size} the image size, and\n * {@link module:ol/proj/Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: `{import(\"../extent.js\").Extent}` the\n * image extent, `{number}` the image resolution, `{number}` the device pixel\n * ratio, `{import(\"../size.js\").Size}` the image size, and `{import(\"../proj/Projection.js\").Projection}` the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./State.js\").default} [state] Source state.\n */\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\nvar ImageCanvasSource = /** @class */function (_super) {\n  __extends(ImageCanvasSource, _super);\n  /**\n   * @param {Options=} opt_options ImageCanvas options.\n   */\n  function ImageCanvasSource(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state\n    }) || this;\n    /**\n     * @private\n     * @type {FunctionType}\n     */\n    _this.canvasFunction_ = options.canvasFunction;\n    /**\n     * @private\n     * @type {import(\"../ImageCanvas.js\").default}\n     */\n    _this.canvas_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n  ImageCanvasSource.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n    var canvas = this.canvas_;\n    if (canvas && this.renderedRevision_ == this.getRevision() && canvas.getResolution() == resolution && canvas.getPixelRatio() == pixelRatio && containsExtent(canvas.getExtent(), extent)) {\n      return canvas;\n    }\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n    var width = getWidth(extent) / resolution;\n    var height = getHeight(extent) / resolution;\n    var size = [width * pixelRatio, height * pixelRatio];\n    var canvasElement = this.canvasFunction_.call(this, extent, resolution, pixelRatio, size, projection);\n    if (canvasElement) {\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n    }\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n    return canvas;\n  };\n  return ImageCanvasSource;\n}(ImageSource);\nexport default ImageCanvasSource;","map":{"version":3,"names":["ImageCanvas","ImageSource","containsExtent","getHeight","getWidth","scaleFromCenter","ImageCanvasSource","_super","__extends","opt_options","_this","options","call","attributions","imageSmoothing","projection","resolutions","state","canvasFunction_","canvasFunction","canvas_","renderedRevision_","ratio_","ratio","undefined","prototype","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","canvas","getRevision","getResolution","getPixelRatio","getExtent","slice","width","height","size","canvasElement"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/ImageCanvas.js"],"sourcesContent":["/**\n * @module ol/source/ImageCanvas\n */\n\nimport ImageCanvas from '../ImageCanvas.js';\nimport ImageSource from './Image.js';\nimport {\n  containsExtent,\n  getHeight,\n  getWidth,\n  scaleFromCenter,\n} from '../extent.js';\n\n/**\n * A function returning the canvas element (`{HTMLCanvasElement}`)\n * used by the source as an image. The arguments passed to the function are:\n * {@link module:ol/extent~Extent} the image extent, `{number}` the image resolution,\n * `{number}` the device pixel ratio, {@link module:ol/size~Size} the image size, and\n * {@link module:ol/proj/Projection} the image projection. The canvas returned by\n * this function is cached by the source. The this keyword inside the function\n * references the {@link module:ol/source/ImageCanvas}.\n *\n * @typedef {function(this:import(\"../ImageCanvas.js\").default, import(\"../extent.js\").Extent, number,\n *     number, import(\"../size.js\").Size, import(\"../proj/Projection.js\").default): HTMLCanvasElement} FunctionType\n */\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {FunctionType} [canvasFunction] Canvas function.\n * The function returning the canvas element used by the source\n * as an image. The arguments passed to the function are: `{import(\"../extent.js\").Extent}` the\n * image extent, `{number}` the image resolution, `{number}` the device pixel\n * ratio, `{import(\"../size.js\").Size}` the image size, and `{import(\"../proj/Projection.js\").Projection}` the image\n * projection. The canvas returned by this function is cached by the source. If\n * the value returned by the function is later changed then\n * `changed` should be called on the source for the source to\n * invalidate the current cached image. See: {@link module:ol/Observable~Observable#changed}\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. 1 means canvases are the size of the map viewport, 2 means twice the\n * width and height of the map viewport, and so on. Must be `1` or higher.\n * @property {Array<number>} [resolutions] Resolutions.\n * If specified, new canvases will be created for these resolutions\n * @property {import(\"./State.js\").default} [state] Source state.\n */\n\n/**\n * @classdesc\n * Base class for image sources where a canvas element is the image.\n * @api\n */\nclass ImageCanvasSource extends ImageSource {\n  /**\n   * @param {Options=} opt_options ImageCanvas options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions,\n      state: options.state,\n    });\n\n    /**\n     * @private\n     * @type {FunctionType}\n     */\n    this.canvasFunction_ = options.canvasFunction;\n\n    /**\n     * @private\n     * @type {import(\"../ImageCanvas.js\").default}\n     */\n    this.canvas_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../ImageCanvas.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    resolution = this.findNearestResolution(resolution);\n\n    let canvas = this.canvas_;\n    if (\n      canvas &&\n      this.renderedRevision_ == this.getRevision() &&\n      canvas.getResolution() == resolution &&\n      canvas.getPixelRatio() == pixelRatio &&\n      containsExtent(canvas.getExtent(), extent)\n    ) {\n      return canvas;\n    }\n\n    extent = extent.slice();\n    scaleFromCenter(extent, this.ratio_);\n    const width = getWidth(extent) / resolution;\n    const height = getHeight(extent) / resolution;\n    const size = [width * pixelRatio, height * pixelRatio];\n\n    const canvasElement = this.canvasFunction_.call(\n      this,\n      extent,\n      resolution,\n      pixelRatio,\n      size,\n      projection\n    );\n    if (canvasElement) {\n      canvas = new ImageCanvas(extent, resolution, pixelRatio, canvasElement);\n    }\n    this.canvas_ = canvas;\n    this.renderedRevision_ = this.getRevision();\n\n    return canvas;\n  }\n}\n\nexport default ImageCanvasSource;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,WAAW,MAAM,mBAAmB;AAC3C,OAAOC,WAAW,MAAM,YAAY;AACpC,SACEC,cAAc,EACdC,SAAS,EACTC,QAAQ,EACRC,eAAe,QACV,cAAc;AAErB;;;;;;;;;;;;AAaA;;;;;;;;;;;;;;;;;;;;AAqBA;;;;;AAKA,IAAAC,iBAAA,0BAAAC,MAAA;EAAgCC,SAAA,CAAAF,iBAAA,EAAAC,MAAA;EAC9B;;;EAGA,SAAAD,kBAAYG,WAAW;IAAvB,IAAAC,KAAA;IACE,IAAMC,OAAO,GAAGF,WAAW,GAAGA,WAAW,GAAG,EAAE;IAE9CC,KAAA,GAAAH,MAAA,CAAAK,IAAA,OAAM;MACJC,YAAY,EAAEF,OAAO,CAACE,YAAY;MAClCC,cAAc,EAAEH,OAAO,CAACG,cAAc;MACtCC,UAAU,EAAEJ,OAAO,CAACI,UAAU;MAC9BC,WAAW,EAAEL,OAAO,CAACK,WAAW;MAChCC,KAAK,EAAEN,OAAO,CAACM;KAChB,CAAC;IAEF;;;;IAIAP,KAAI,CAACQ,eAAe,GAAGP,OAAO,CAACQ,cAAc;IAE7C;;;;IAIAT,KAAI,CAACU,OAAO,GAAG,IAAI;IAEnB;;;;IAIAV,KAAI,CAACW,iBAAiB,GAAG,CAAC;IAE1B;;;;IAIAX,KAAI,CAACY,MAAM,GAAGX,OAAO,CAACY,KAAK,KAAKC,SAAS,GAAGb,OAAO,CAACY,KAAK,GAAG,GAAG;;EACjE;EAEA;;;;;;;EAOAjB,iBAAA,CAAAmB,SAAA,CAAAC,gBAAgB,GAAhB,UAAiBC,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEd,UAAU;IACzDa,UAAU,GAAG,IAAI,CAACE,qBAAqB,CAACF,UAAU,CAAC;IAEnD,IAAIG,MAAM,GAAG,IAAI,CAACX,OAAO;IACzB,IACEW,MAAM,IACN,IAAI,CAACV,iBAAiB,IAAI,IAAI,CAACW,WAAW,EAAE,IAC5CD,MAAM,CAACE,aAAa,EAAE,IAAIL,UAAU,IACpCG,MAAM,CAACG,aAAa,EAAE,IAAIL,UAAU,IACpC3B,cAAc,CAAC6B,MAAM,CAACI,SAAS,EAAE,EAAER,MAAM,CAAC,EAC1C;MACA,OAAOI,MAAM;;IAGfJ,MAAM,GAAGA,MAAM,CAACS,KAAK,EAAE;IACvB/B,eAAe,CAACsB,MAAM,EAAE,IAAI,CAACL,MAAM,CAAC;IACpC,IAAMe,KAAK,GAAGjC,QAAQ,CAACuB,MAAM,CAAC,GAAGC,UAAU;IAC3C,IAAMU,MAAM,GAAGnC,SAAS,CAACwB,MAAM,CAAC,GAAGC,UAAU;IAC7C,IAAMW,IAAI,GAAG,CAACF,KAAK,GAAGR,UAAU,EAAES,MAAM,GAAGT,UAAU,CAAC;IAEtD,IAAMW,aAAa,GAAG,IAAI,CAACtB,eAAe,CAACN,IAAI,CAC7C,IAAI,EACJe,MAAM,EACNC,UAAU,EACVC,UAAU,EACVU,IAAI,EACJxB,UAAU,CACX;IACD,IAAIyB,aAAa,EAAE;MACjBT,MAAM,GAAG,IAAI/B,WAAW,CAAC2B,MAAM,EAAEC,UAAU,EAAEC,UAAU,EAAEW,aAAa,CAAC;;IAEzE,IAAI,CAACpB,OAAO,GAAGW,MAAM;IACrB,IAAI,CAACV,iBAAiB,GAAG,IAAI,CAACW,WAAW,EAAE;IAE3C,OAAOD,MAAM;EACf,CAAC;EACH,OAAAzB,iBAAC;AAAD,CAAC,CAnF+BL,WAAW;AAqF3C,eAAeK,iBAAiB"},"metadata":{},"sourceType":"module","externalDependencies":[]}