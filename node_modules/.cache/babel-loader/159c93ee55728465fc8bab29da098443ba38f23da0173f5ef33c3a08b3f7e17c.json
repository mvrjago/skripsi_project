{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/geom/Polygon\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport { arrayMaxSquaredDelta, assignClosestArrayPoint } from './flat/closest.js';\nimport { closestSquaredDistanceXY, getCenter } from '../extent.js';\nimport { deflateCoordinatesArray } from './flat/deflate.js';\nimport { extend } from '../array.js';\nimport { getInteriorPointOfArray } from './flat/interiorpoint.js';\nimport { inflateCoordinatesArray } from './flat/inflate.js';\nimport { intersectsLinearRingArray } from './flat/intersectsextent.js';\nimport { linearRingsAreOriented, orientLinearRings } from './flat/orient.js';\nimport { linearRings as linearRingsArea } from './flat/area.js';\nimport { linearRingsContainsXY } from './flat/contains.js';\nimport { modulo } from '../math.js';\nimport { quantizeArray } from './flat/simplify.js';\nimport { offset as sphereOffset } from '../sphere.js';\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nvar Polygon = /** @class */function (_super) {\n  __extends(Polygon, _super);\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `opt_layout` and `opt_ends` are also accepted.)\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).\n   */\n  function Polygon(coordinates, opt_layout, opt_ends) {\n    var _this = _super.call(this) || this;\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    _this.ends_ = [];\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.flatInteriorPointRevision_ = -1;\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    _this.flatInteriorPoint_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDelta_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.maxDeltaRevision_ = -1;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.orientedRevision_ = -1;\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.orientedFlatCoordinates_ = null;\n    if (opt_layout !== undefined && opt_ends) {\n      _this.setFlatCoordinates(opt_layout, /** @type {Array<number>} */coordinates);\n      _this.ends_ = opt_ends;\n    } else {\n      _this.setCoordinates( /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */coordinates, opt_layout);\n    }\n    return _this;\n  }\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  Polygon.prototype.appendLinearRing = function (linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  };\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  Polygon.prototype.clone = function () {\n    return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  Polygon.prototype.closestPointXY = function (x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(this.flatCoordinates, 0, this.ends_, this.stride, 0));\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(this.flatCoordinates, 0, this.ends_, this.stride, this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\n  };\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  Polygon.prototype.containsXY = function (x, y) {\n    return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\n  };\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  Polygon.prototype.getArea = function () {\n    return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\n  };\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean=} opt_right Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  Polygon.prototype.getCoordinates = function (opt_right) {\n    var flatCoordinates;\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  };\n  /**\n   * @return {Array<number>} Ends.\n   */\n  Polygon.prototype.getEnds = function () {\n    return this.ends_;\n  };\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  Polygon.prototype.getFlatInteriorPoint = function () {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      var flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, flatCenter, 0);\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  };\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  Polygon.prototype.getInteriorPoint = function () {\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n  };\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  Polygon.prototype.getLinearRingCount = function () {\n    return this.ends_.length;\n  };\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing} Linear ring.\n   * @api\n   */\n  Polygon.prototype.getLinearRing = function (index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(this.flatCoordinates.slice(index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\n  };\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  Polygon.prototype.getLinearRings = function () {\n    var layout = this.layout;\n    var flatCoordinates = this.flatCoordinates;\n    var ends = this.ends_;\n    var linearRings = [];\n    var offset = 0;\n    for (var i = 0, ii = ends.length; i < ii; ++i) {\n      var end = ends[i];\n      var linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  };\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  Polygon.prototype.getOrientedFlatCoordinates = function () {\n    if (this.orientedRevision_ != this.getRevision()) {\n      var flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  };\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  Polygon.prototype.getSimplifiedGeometryInternal = function (squaredTolerance) {\n    var simplifiedFlatCoordinates = [];\n    var simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(this.flatCoordinates, 0, this.ends_, this.stride, Math.sqrt(squaredTolerance), simplifiedFlatCoordinates, 0, simplifiedEnds);\n    return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\n  };\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  Polygon.prototype.getType = function () {\n    return GeometryType.POLYGON;\n  };\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  Polygon.prototype.intersectsExtent = function (extent) {\n    return intersectsLinearRingArray(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\n  };\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @api\n   */\n  Polygon.prototype.setCoordinates = function (coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    var ends = deflateCoordinatesArray(this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  };\n  return Polygon;\n}(SimpleGeometry);\nexport default Polygon;\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices.\n * @param {number=} opt_n Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n  var n = opt_n ? opt_n : 32;\n  /** @type {Array<number>} */\n  var flatCoordinates = [];\n  for (var i = 0; i < n; ++i) {\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  var minX = extent[0];\n  var minY = extent[1];\n  var maxX = extent[2];\n  var maxY = extent[3];\n  var flatCoordinates = [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\n}\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, opt_sides, opt_angle) {\n  var sides = opt_sides ? opt_sides : 32;\n  var stride = circle.getStride();\n  var layout = circle.getLayout();\n  var center = circle.getCenter();\n  var arrayLength = stride * (sides + 1);\n  var flatCoordinates = new Array(arrayLength);\n  for (var i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (var j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  var ends = [flatCoordinates.length];\n  var polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\n  return polygon;\n}\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, opt_angle) {\n  var flatCoordinates = polygon.getFlatCoordinates();\n  var stride = polygon.getStride();\n  var sides = flatCoordinates.length / stride - 1;\n  var startAngle = opt_angle ? opt_angle : 0;\n  for (var i = 0; i <= sides; ++i) {\n    var offset = i * stride;\n    var angle = startAngle + modulo(i, sides) * 2 * Math.PI / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}","map":{"version":3,"names":["GeometryLayout","GeometryType","LinearRing","Point","SimpleGeometry","arrayMaxSquaredDelta","assignClosestArrayPoint","closestSquaredDistanceXY","getCenter","deflateCoordinatesArray","extend","getInteriorPointOfArray","inflateCoordinatesArray","intersectsLinearRingArray","linearRingsAreOriented","orientLinearRings","linearRings","linearRingsArea","linearRingsContainsXY","modulo","quantizeArray","offset","sphereOffset","Polygon","_super","__extends","coordinates","opt_layout","opt_ends","_this","call","ends_","flatInteriorPointRevision_","flatInteriorPoint_","maxDelta_","maxDeltaRevision_","orientedRevision_","orientedFlatCoordinates_","undefined","setFlatCoordinates","setCoordinates","prototype","appendLinearRing","linearRing","flatCoordinates","getFlatCoordinates","slice","push","length","changed","clone","layout","closestPointXY","x","y","closestPoint","minSquaredDistance","getExtent","getRevision","Math","sqrt","stride","containsXY","getOrientedFlatCoordinates","getArea","getCoordinates","opt_right","getEnds","getFlatInteriorPoint","flatCenter","getInteriorPoint","XYM","getLinearRingCount","getLinearRing","index","getLinearRings","ends","i","ii","end","getSimplifiedGeometryInternal","squaredTolerance","simplifiedFlatCoordinates","simplifiedEnds","XY","getType","POLYGON","intersectsExtent","extent","setLayout","circular","center","radius","opt_n","opt_sphereRadius","n","PI","fromExtent","minX","minY","maxX","maxY","fromCircle","circle","opt_sides","opt_angle","sides","getStride","getLayout","arrayLength","Array","j","polygon","makeRegular","getRadius","startAngle","angle","cos","sin"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/geom/Polygon.js"],"sourcesContent":["/**\n * @module ol/geom/Polygon\n */\nimport GeometryLayout from './GeometryLayout.js';\nimport GeometryType from './GeometryType.js';\nimport LinearRing from './LinearRing.js';\nimport Point from './Point.js';\nimport SimpleGeometry from './SimpleGeometry.js';\nimport {arrayMaxSquaredDelta, assignClosestArrayPoint} from './flat/closest.js';\nimport {closestSquaredDistanceXY, getCenter} from '../extent.js';\nimport {deflateCoordinatesArray} from './flat/deflate.js';\nimport {extend} from '../array.js';\nimport {getInteriorPointOfArray} from './flat/interiorpoint.js';\nimport {inflateCoordinatesArray} from './flat/inflate.js';\nimport {intersectsLinearRingArray} from './flat/intersectsextent.js';\nimport {linearRingsAreOriented, orientLinearRings} from './flat/orient.js';\nimport {linearRings as linearRingsArea} from './flat/area.js';\nimport {linearRingsContainsXY} from './flat/contains.js';\nimport {modulo} from '../math.js';\nimport {quantizeArray} from './flat/simplify.js';\nimport {offset as sphereOffset} from '../sphere.js';\n\n/**\n * @classdesc\n * Polygon geometry.\n *\n * @api\n */\nclass Polygon extends SimpleGeometry {\n  /**\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>|!Array<number>} coordinates\n   *     Array of linear rings that define the polygon. The first linear ring of the\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\n   *     an array of vertices' coordinates where the first coordinate and the last are\n   *     equivalent. (For internal use, flat coordinates in combination with\n   *     `opt_layout` and `opt_ends` are also accepted.)\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @param {Array<number>=} opt_ends Ends (for internal use with flat coordinates).\n   */\n  constructor(coordinates, opt_layout, opt_ends) {\n    super();\n\n    /**\n     * @type {Array<number>}\n     * @private\n     */\n    this.ends_ = [];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.flatInteriorPointRevision_ = -1;\n\n    /**\n     * @private\n     * @type {import(\"../coordinate.js\").Coordinate}\n     */\n    this.flatInteriorPoint_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDelta_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxDeltaRevision_ = -1;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.orientedRevision_ = -1;\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.orientedFlatCoordinates_ = null;\n\n    if (opt_layout !== undefined && opt_ends) {\n      this.setFlatCoordinates(\n        opt_layout,\n        /** @type {Array<number>} */ (coordinates)\n      );\n      this.ends_ = opt_ends;\n    } else {\n      this.setCoordinates(\n        /** @type {Array<Array<import(\"../coordinate.js\").Coordinate>>} */ (coordinates),\n        opt_layout\n      );\n    }\n  }\n\n  /**\n   * Append the passed linear ring to this polygon.\n   * @param {LinearRing} linearRing Linear ring.\n   * @api\n   */\n  appendLinearRing(linearRing) {\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\n    } else {\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\n    }\n    this.ends_.push(this.flatCoordinates.length);\n    this.changed();\n  }\n\n  /**\n   * Make a complete copy of the geometry.\n   * @return {!Polygon} Clone.\n   * @api\n   */\n  clone() {\n    return new Polygon(\n      this.flatCoordinates.slice(),\n      this.layout,\n      this.ends_.slice()\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @param {import(\"../coordinate.js\").Coordinate} closestPoint Closest point.\n   * @param {number} minSquaredDistance Minimum squared distance.\n   * @return {number} Minimum squared distance.\n   */\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\n      return minSquaredDistance;\n    }\n    if (this.maxDeltaRevision_ != this.getRevision()) {\n      this.maxDelta_ = Math.sqrt(\n        arrayMaxSquaredDelta(\n          this.flatCoordinates,\n          0,\n          this.ends_,\n          this.stride,\n          0\n        )\n      );\n      this.maxDeltaRevision_ = this.getRevision();\n    }\n    return assignClosestArrayPoint(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      this.maxDelta_,\n      true,\n      x,\n      y,\n      closestPoint,\n      minSquaredDistance\n    );\n  }\n\n  /**\n   * @param {number} x X.\n   * @param {number} y Y.\n   * @return {boolean} Contains (x, y).\n   */\n  containsXY(x, y) {\n    return linearRingsContainsXY(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      x,\n      y\n    );\n  }\n\n  /**\n   * Return the area of the polygon on projected plane.\n   * @return {number} Area (on projected plane).\n   * @api\n   */\n  getArea() {\n    return linearRingsArea(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride\n    );\n  }\n\n  /**\n   * Get the coordinate array for this geometry.  This array has the structure\n   * of a GeoJSON coordinate array for polygons.\n   *\n   * @param {boolean=} opt_right Orient coordinates according to the right-hand\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\n   *     If `false`, coordinates will be oriented according to the left-hand rule\n   *     (clockwise for exterior and counter-clockwise for interior rings).\n   *     By default, coordinate orientation will depend on how the geometry was\n   *     constructed.\n   * @return {Array<Array<import(\"../coordinate.js\").Coordinate>>} Coordinates.\n   * @api\n   */\n  getCoordinates(opt_right) {\n    let flatCoordinates;\n    if (opt_right !== undefined) {\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\n      orientLinearRings(flatCoordinates, 0, this.ends_, this.stride, opt_right);\n    } else {\n      flatCoordinates = this.flatCoordinates;\n    }\n\n    return inflateCoordinatesArray(flatCoordinates, 0, this.ends_, this.stride);\n  }\n\n  /**\n   * @return {Array<number>} Ends.\n   */\n  getEnds() {\n    return this.ends_;\n  }\n\n  /**\n   * @return {Array<number>} Interior point.\n   */\n  getFlatInteriorPoint() {\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\n      const flatCenter = getCenter(this.getExtent());\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\n        this.getOrientedFlatCoordinates(),\n        0,\n        this.ends_,\n        this.stride,\n        flatCenter,\n        0\n      );\n      this.flatInteriorPointRevision_ = this.getRevision();\n    }\n    return this.flatInteriorPoint_;\n  }\n\n  /**\n   * Return an interior point of the polygon.\n   * @return {Point} Interior point as XYM coordinate, where M is the\n   * length of the horizontal intersection that the point belongs to.\n   * @api\n   */\n  getInteriorPoint() {\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\n  }\n\n  /**\n   * Return the number of rings of the polygon,  this includes the exterior\n   * ring and any interior rings.\n   *\n   * @return {number} Number of rings.\n   * @api\n   */\n  getLinearRingCount() {\n    return this.ends_.length;\n  }\n\n  /**\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\n   * given index is out of range.\n   * The exterior linear ring is available at index `0` and the interior rings\n   * at index `1` and beyond.\n   *\n   * @param {number} index Index.\n   * @return {LinearRing} Linear ring.\n   * @api\n   */\n  getLinearRing(index) {\n    if (index < 0 || this.ends_.length <= index) {\n      return null;\n    }\n    return new LinearRing(\n      this.flatCoordinates.slice(\n        index === 0 ? 0 : this.ends_[index - 1],\n        this.ends_[index]\n      ),\n      this.layout\n    );\n  }\n\n  /**\n   * Return the linear rings of the polygon.\n   * @return {Array<LinearRing>} Linear rings.\n   * @api\n   */\n  getLinearRings() {\n    const layout = this.layout;\n    const flatCoordinates = this.flatCoordinates;\n    const ends = this.ends_;\n    const linearRings = [];\n    let offset = 0;\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\n      const end = ends[i];\n      const linearRing = new LinearRing(\n        flatCoordinates.slice(offset, end),\n        layout\n      );\n      linearRings.push(linearRing);\n      offset = end;\n    }\n    return linearRings;\n  }\n\n  /**\n   * @return {Array<number>} Oriented flat coordinates.\n   */\n  getOrientedFlatCoordinates() {\n    if (this.orientedRevision_ != this.getRevision()) {\n      const flatCoordinates = this.flatCoordinates;\n      if (linearRingsAreOriented(flatCoordinates, 0, this.ends_, this.stride)) {\n        this.orientedFlatCoordinates_ = flatCoordinates;\n      } else {\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\n        this.orientedFlatCoordinates_.length = orientLinearRings(\n          this.orientedFlatCoordinates_,\n          0,\n          this.ends_,\n          this.stride\n        );\n      }\n      this.orientedRevision_ = this.getRevision();\n    }\n    return this.orientedFlatCoordinates_;\n  }\n\n  /**\n   * @param {number} squaredTolerance Squared tolerance.\n   * @return {Polygon} Simplified Polygon.\n   * @protected\n   */\n  getSimplifiedGeometryInternal(squaredTolerance) {\n    const simplifiedFlatCoordinates = [];\n    const simplifiedEnds = [];\n    simplifiedFlatCoordinates.length = quantizeArray(\n      this.flatCoordinates,\n      0,\n      this.ends_,\n      this.stride,\n      Math.sqrt(squaredTolerance),\n      simplifiedFlatCoordinates,\n      0,\n      simplifiedEnds\n    );\n    return new Polygon(\n      simplifiedFlatCoordinates,\n      GeometryLayout.XY,\n      simplifiedEnds\n    );\n  }\n\n  /**\n   * Get the type of this geometry.\n   * @return {import(\"./GeometryType.js\").default} Geometry type.\n   * @api\n   */\n  getType() {\n    return GeometryType.POLYGON;\n  }\n\n  /**\n   * Test if the geometry and the passed extent intersect.\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @return {boolean} `true` if the geometry and the extent intersect.\n   * @api\n   */\n  intersectsExtent(extent) {\n    return intersectsLinearRingArray(\n      this.getOrientedFlatCoordinates(),\n      0,\n      this.ends_,\n      this.stride,\n      extent\n    );\n  }\n\n  /**\n   * Set the coordinates of the polygon.\n   * @param {!Array<Array<import(\"../coordinate.js\").Coordinate>>} coordinates Coordinates.\n   * @param {import(\"./GeometryLayout.js\").default=} opt_layout Layout.\n   * @api\n   */\n  setCoordinates(coordinates, opt_layout) {\n    this.setLayout(opt_layout, coordinates, 2);\n    if (!this.flatCoordinates) {\n      this.flatCoordinates = [];\n    }\n    const ends = deflateCoordinatesArray(\n      this.flatCoordinates,\n      0,\n      coordinates,\n      this.stride,\n      this.ends_\n    );\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\n    this.changed();\n  }\n}\n\nexport default Polygon;\n\n/**\n * Create an approximation of a circle on the surface of a sphere.\n * @param {import(\"../coordinate.js\").Coordinate} center Center (`[lon, lat]` in degrees).\n * @param {number} radius The great-circle distance from the center to\n *     the polygon vertices.\n * @param {number=} opt_n Optional number of vertices for the resulting\n *     polygon. Default is `32`.\n * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to\n *     the Earth's mean radius using the WGS84 ellipsoid).\n * @return {Polygon} The \"circular\" polygon.\n * @api\n */\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\n  const n = opt_n ? opt_n : 32;\n  /** @type {Array<number>} */\n  const flatCoordinates = [];\n  for (let i = 0; i < n; ++i) {\n    extend(\n      flatCoordinates,\n      sphereOffset(center, radius, (2 * Math.PI * i) / n, opt_sphereRadius)\n    );\n  }\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [\n    flatCoordinates.length,\n  ]);\n}\n\n/**\n * Create a polygon from an extent. The layout used is `XY`.\n * @param {import(\"../extent.js\").Extent} extent The extent.\n * @return {Polygon} The polygon.\n * @api\n */\nexport function fromExtent(extent) {\n  const minX = extent[0];\n  const minY = extent[1];\n  const maxX = extent[2];\n  const maxY = extent[3];\n  const flatCoordinates = [\n    minX,\n    minY,\n    minX,\n    maxY,\n    maxX,\n    maxY,\n    maxX,\n    minY,\n    minX,\n    minY,\n  ];\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [\n    flatCoordinates.length,\n  ]);\n}\n\n/**\n * Create a regular polygon from a circle.\n * @param {import(\"./Circle.js\").default} circle Circle geometry.\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n * @return {Polygon} Polygon geometry.\n * @api\n */\nexport function fromCircle(circle, opt_sides, opt_angle) {\n  const sides = opt_sides ? opt_sides : 32;\n  const stride = circle.getStride();\n  const layout = circle.getLayout();\n  const center = circle.getCenter();\n  const arrayLength = stride * (sides + 1);\n  const flatCoordinates = new Array(arrayLength);\n  for (let i = 0; i < arrayLength; i += stride) {\n    flatCoordinates[i] = 0;\n    flatCoordinates[i + 1] = 0;\n    for (let j = 2; j < stride; j++) {\n      flatCoordinates[i + j] = center[j];\n    }\n  }\n  const ends = [flatCoordinates.length];\n  const polygon = new Polygon(flatCoordinates, layout, ends);\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\n  return polygon;\n}\n\n/**\n * Modify the coordinates of a polygon to make it a regular polygon.\n * @param {Polygon} polygon Polygon geometry.\n * @param {import(\"../coordinate.js\").Coordinate} center Center of the regular polygon.\n * @param {number} radius Radius of the regular polygon.\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\n *     radians. Default is 0.\n */\nexport function makeRegular(polygon, center, radius, opt_angle) {\n  const flatCoordinates = polygon.getFlatCoordinates();\n  const stride = polygon.getStride();\n  const sides = flatCoordinates.length / stride - 1;\n  const startAngle = opt_angle ? opt_angle : 0;\n  for (let i = 0; i <= sides; ++i) {\n    const offset = i * stride;\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI) / sides;\n    flatCoordinates[offset] = center[0] + radius * Math.cos(angle);\n    flatCoordinates[offset + 1] = center[1] + radius * Math.sin(angle);\n  }\n  polygon.changed();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}