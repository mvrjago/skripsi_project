{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport GeometryType from './geom/GeometryType.js';\nimport Units from './proj/Units.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport { DEFAULT_TILE_SIZE } from './tilegrid/common.js';\nimport { METERS_PER_UNIT, createProjection, fromUserCoordinate, fromUserExtent, getUserProjection, toUserCoordinate, toUserExtent } from './proj.js';\nimport { VOID } from './functions.js';\nimport { add as addCoordinate, equals as coordinatesEqual, rotate as rotateCoordinate } from './coordinate.js';\nimport { assert } from './asserts.js';\nimport { assign } from './obj.js';\nimport { none as centerNone, createExtent } from './centerconstraint.js';\nimport { clamp, modulo } from './math.js';\nimport { createMinMaxResolution } from './resolutionconstraint.js';\nimport { createSnapToN, createSnapToZero, disable, none as rotationNone } from './rotationconstraint.js';\nimport { createSnapToPower, createSnapToResolutions } from './resolutionconstraint.js';\nimport { easeOut } from './easing.js';\nimport { equals } from './coordinate.js';\nimport { getCenter, getForViewAndSize, getHeight, getWidth, isEmpty } from './extent.js';\nimport { inAndOut } from './easing.js';\nimport { linearFindNearest } from './array.js';\nimport { fromExtent as polygonFromExtent } from './geom/Polygon.js';\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter]\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter]\n * @property {number} [sourceResolution]\n * @property {number} [targetResolution]\n * @property {number} [sourceRotation]\n * @property {number} [targetRotation]\n * @property {import(\"./coordinate.js\").Coordinate} [anchor]\n * @property {number} start\n * @property {number} duration\n * @property {boolean} complete\n * @property {function(number):number} easing\n * @property {function(boolean):void} callback\n */\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center\n * @property {import(\"./resolutionconstraint.js\").Type} resolution\n * @property {import(\"./rotationconstraint.js\").Type} rotation\n */\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions to determine the\n * resolution constraint. If set the `maxResolution`, `minResolution`,\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n */\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center\n * @property {import(\"./proj/Projection.js\").default} projection\n * @property {number} resolution\n * @property {number} rotation\n * @property {number} zoom\n */\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nvar DEFAULT_MIN_ZOOM = 0;\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `opt_anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nvar View = /** @class */function (_super) {\n  __extends(View, _super);\n  /**\n   * @param {ViewOptions=} opt_options View options.\n   */\n  function View(opt_options) {\n    var _this = _super.call(this) || this;\n    var options = assign({}, opt_options);\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    _this.hints_ = [0, 0];\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    _this.animations_ = [];\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.updateAnimationKey_;\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    _this.projection_ = createProjection(options.projection, 'EPSG:3857');\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    _this.viewportSize_ = [100, 100];\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    _this.targetCenter_ = null;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.targetResolution_;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.targetRotation_;\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    _this.cancelAnchor_ = undefined;\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, _this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, _this.projection_);\n    }\n    _this.applyOptions_(options);\n    return _this;\n  }\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  View.prototype.applyOptions_ = function (options) {\n    /**\n     * @type {Object<string, *>}\n     */\n    var properties = {};\n    var resolutionConstraintInfo = createResolutionConstraint(options);\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n    var centerConstraint = createCenterConstraint(options);\n    var resolutionConstraint = resolutionConstraintInfo.constraint;\n    var rotationConstraint = createRotationConstraint(options);\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint\n    };\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(options.center !== undefined ? options.center : null);\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n    this.setProperties(properties);\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n    this.options_ = options;\n  };\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  View.prototype.getUpdatedOptions_ = function (newOptions) {\n    var options = assign({}, this.options_);\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n    // preserve center\n    options.center = this.getCenterInternal();\n    // preserve rotation\n    options.rotation = this.getRotation();\n    return assign({}, options, newOptions);\n  };\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  View.prototype.animate = function (var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    var args = new Array(arguments.length);\n    for (var i = 0; i < args.length; ++i) {\n      var options = arguments[i];\n      if (options.center) {\n        options = assign({}, options);\n        options.center = fromUserCoordinate(options.center, this.getProjection());\n      }\n      if (options.anchor) {\n        options = assign({}, options);\n        options.anchor = fromUserCoordinate(options.anchor, this.getProjection());\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  };\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  View.prototype.animateInternal = function (var_args) {\n    var animationCount = arguments.length;\n    var callback;\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      var state = arguments[animationCount - 1];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    var start = Date.now();\n    var center = this.targetCenter_.slice();\n    var resolution = this.targetResolution_;\n    var rotation = this.targetRotation_;\n    var series = [];\n    for (var i = 0; i < animationCount; ++i) {\n      var options = /** @type {AnimationOptions} */arguments[i];\n      var animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback\n      };\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        var delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  };\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  View.prototype.getAnimating = function () {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  };\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  View.prototype.getInteracting = function () {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  };\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  View.prototype.cancelAnimations = function () {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    var anchor;\n    for (var i = 0, ii = this.animations_.length; i < ii; ++i) {\n      var series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (var j = 0, jj = series.length; j < jj; ++j) {\n          var animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n  };\n  /**\n   * Update all animations.\n   */\n  View.prototype.updateAnimations_ = function () {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    var now = Date.now();\n    var more = false;\n    for (var i = this.animations_.length - 1; i >= 0; --i) {\n      var series = this.animations_[i];\n      var seriesComplete = true;\n      for (var j = 0, jj = series.length; j < jj; ++j) {\n        var animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        var elapsed = now - animation.start;\n        var fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        var progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          var x0 = animation.sourceCenter[0];\n          var y0 = animation.sourceCenter[1];\n          var x1 = animation.targetCenter[0];\n          var y1 = animation.targetCenter[1];\n          var x = x0 + progress * (x1 - x0);\n          var y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          var resolution = progress === 1 ? animation.targetResolution : animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            var size = this.getViewportSize_(this.getRotation());\n            var constrainedResolution = this.constraints_.resolution(resolution, 0, size, true);\n            this.targetCenter_ = this.calculateCenterZoom(constrainedResolution, animation.anchor);\n          }\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\n          var rotation = progress === 1 ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI : animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            var constrainedRotation = this.constraints_.rotation(rotation, true);\n            this.targetCenter_ = this.calculateCenterRotate(constrainedRotation, animation.anchor);\n          }\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        var callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_.bind(this));\n    }\n  };\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  View.prototype.calculateCenterRotate = function (rotation, anchor) {\n    var center;\n    var currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  };\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  View.prototype.calculateCenterZoom = function (resolution, anchor) {\n    var center;\n    var currentCenter = this.getCenterInternal();\n    var currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      var x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\n      var y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  };\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number=} opt_rotation Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  View.prototype.getViewportSize_ = function (opt_rotation) {\n    var size = this.viewportSize_;\n    if (opt_rotation) {\n      var w = size[0];\n      var h = size[1];\n      return [Math.abs(w * Math.cos(opt_rotation)) + Math.abs(h * Math.sin(opt_rotation)), Math.abs(w * Math.sin(opt_rotation)) + Math.abs(h * Math.cos(opt_rotation))];\n    } else {\n      return size;\n    }\n  };\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size=} opt_size Viewport size; if undefined, [100, 100] is assumed\n   */\n  View.prototype.setViewportSize = function (opt_size) {\n    this.viewportSize_ = Array.isArray(opt_size) ? opt_size.slice() : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  };\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.getCenter = function () {\n    var center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  };\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  View.prototype.getCenterInternal = function () {\n    return (/** @type {import(\"./coordinate.js\").Coordinate|undefined} */this.get(ViewProperty.CENTER)\n    );\n  };\n  /**\n   * @return {Constraints} Constraints.\n   */\n  View.prototype.getConstraints = function () {\n    return this.constraints_;\n  };\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  View.prototype.getConstrainResolution = function () {\n    return this.options_.constrainResolution;\n  };\n  /**\n   * @param {Array<number>=} opt_hints Destination array.\n   * @return {Array<number>} Hint.\n   */\n  View.prototype.getHints = function (opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  };\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  View.prototype.calculateExtent = function (opt_size) {\n    var extent = this.calculateExtentInternal(opt_size);\n    return toUserExtent(extent, this.getProjection());\n  };\n  /**\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size of the\n   * first map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  View.prototype.calculateExtentInternal = function (opt_size) {\n    var size = opt_size || this.getViewportSize_();\n    var center = /** @type {!import(\"./coordinate.js\").Coordinate} */this.getCenterInternal();\n    assert(center, 1); // The view center is not defined\n    var resolution = /** @type {!number} */this.getResolution();\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    var rotation = /** @type {!number} */this.getRotation();\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n    return getForViewAndSize(center, resolution, rotation, size);\n  };\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  View.prototype.getMaxResolution = function () {\n    return this.maxResolution_;\n  };\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  View.prototype.getMinResolution = function () {\n    return this.minResolution_;\n  };\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  View.prototype.getMaxZoom = function () {\n    return (/** @type {number} */this.getZoomForResolution(this.minResolution_)\n    );\n  };\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  View.prototype.setMaxZoom = function (zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      maxZoom: zoom\n    }));\n  };\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  View.prototype.getMinZoom = function () {\n    return (/** @type {number} */this.getZoomForResolution(this.maxResolution_)\n    );\n  };\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  View.prototype.setMinZoom = function (zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      minZoom: zoom\n    }));\n  };\n  /**\n   * Set whether the view shoud allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  View.prototype.setConstrainResolution = function (enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({\n      constrainResolution: enabled\n    }));\n  };\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  View.prototype.getProjection = function () {\n    return this.projection_;\n  };\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.getResolution = function () {\n    return (/** @type {number|undefined} */this.get(ViewProperty.RESOLUTION)\n    );\n  };\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  View.prototype.getResolutions = function () {\n    return this.resolutions_;\n  };\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  View.prototype.getResolutionForExtent = function (extent, opt_size) {\n    return this.getResolutionForExtentInternal(fromUserExtent(extent, this.getProjection()), opt_size);\n  };\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  View.prototype.getResolutionForExtentInternal = function (extent, opt_size) {\n    var size = opt_size || this.getViewportSize_();\n    var xResolution = getWidth(extent) / size[0];\n    var yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  };\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  View.prototype.getResolutionForValueFunction = function (opt_power) {\n    var power = opt_power || 2;\n    var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        var resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  };\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  View.prototype.getRotation = function () {\n    return (/** @type {number} */this.get(ViewProperty.ROTATION)\n    );\n  };\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  View.prototype.getValueForResolutionFunction = function (opt_power) {\n    var logPower = Math.log(opt_power || 2);\n    var maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    var minResolution = this.minResolution_;\n    var max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        var value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  };\n  /**\n   * @return {State} View state.\n   */\n  View.prototype.getState = function () {\n    var center = /** @type {import(\"./coordinate.js\").Coordinate} */this.getCenterInternal();\n    var projection = this.getProjection();\n    var resolution = /** @type {number} */this.getResolution();\n    var rotation = this.getRotation();\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      rotation: rotation,\n      zoom: this.getZoom()\n    };\n  };\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  View.prototype.getZoom = function () {\n    var zoom;\n    var resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  };\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  View.prototype.getZoomForResolution = function (resolution) {\n    var offset = this.minZoom_ || 0;\n    var max, zoomFactor;\n    if (this.resolutions_) {\n      var nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  };\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  View.prototype.getResolutionForZoom = function (zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n      var baseLevel = clamp(Math.floor(zoom), 0, this.resolutions_.length - 2);\n      var zoomFactor = this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return this.resolutions_[baseLevel] / Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1));\n    } else {\n      return this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_);\n    }\n  };\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions=} opt_options Options.\n   * @api\n   */\n  View.prototype.fit = function (geometryOrExtent, opt_options) {\n    var options = assign({\n      size: this.getViewportSize_()\n    }, opt_options || {});\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    var geometry;\n    assert(Array.isArray(geometryOrExtent) || typeof /** @type {?} */geometryOrExtent.getSimplifiedGeometry === 'function', 24); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n      var extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      var extent = fromUserExtent(geometryOrExtent.getExtent(), this.getProjection());\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      var userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */geometryOrExtent.clone().transform(userProjection, this.getProjection());\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n    this.fitInternal(geometry, options);\n  };\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions=} opt_options Options.\n   */\n  View.prototype.fitInternal = function (geometry, opt_options) {\n    var options = opt_options || {};\n    var size = options.size;\n    if (!size) {\n      size = this.getViewportSize_();\n    }\n    var padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    var nearest = options.nearest !== undefined ? options.nearest : false;\n    var minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n    var coords = geometry.getFlatCoordinates();\n    // calculate rotated extent\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var minRotX = +Infinity;\n    var minRotY = +Infinity;\n    var maxRotX = -Infinity;\n    var maxRotY = -Infinity;\n    var stride = geometry.getStride();\n    for (var i = 0, ii = coords.length; i < ii; i += stride) {\n      var rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      var rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n    // calculate resolution\n    var resolution = this.getResolutionForExtentInternal([minRotX, minRotY, maxRotX, maxRotY], [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\n    resolution = isNaN(resolution) ? minResolution : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n    // calculate center\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerRotX = (minRotX + maxRotX) / 2;\n    var centerRotY = (minRotY + maxRotY) / 2;\n    centerRotX += (padding[1] - padding[3]) / 2 * resolution;\n    centerRotY += (padding[0] - padding[2]) / 2 * resolution;\n    var centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n    var centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n    var center = [centerX, centerY];\n    var callback = options.callback ? options.callback : VOID;\n    if (options.duration !== undefined) {\n      this.animateInternal({\n        resolution: resolution,\n        center: this.getConstrainedCenter(center, resolution),\n        duration: options.duration,\n        easing: options.easing\n      }, callback);\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  };\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  View.prototype.centerOn = function (coordinate, size, position) {\n    this.centerOnInternal(fromUserCoordinate(coordinate, this.getProjection()), size, position);\n  };\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  View.prototype.centerOnInternal = function (coordinate, size, position) {\n    // calculate rotated position\n    var rotation = this.getRotation();\n    var cosAngle = Math.cos(-rotation);\n    var sinAngle = Math.sin(-rotation);\n    var rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    var rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    var resolution = this.getResolution();\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    var centerX = rotX * cosAngle - rotY * sinAngle;\n    var centerY = rotY * cosAngle + rotX * sinAngle;\n    this.setCenterInternal([centerX, centerY]);\n  };\n  /**\n   * @return {boolean} Is defined.\n   */\n  View.prototype.isDef = function () {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  };\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  View.prototype.adjustCenter = function (deltaCoordinates) {\n    var center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n  };\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  View.prototype.adjustCenterInternal = function (deltaCoordinates) {\n    var center = this.targetCenter_;\n    this.setCenterInternal([center[0] + deltaCoordinates[0], center[1] + deltaCoordinates[1]]);\n  };\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   * @api\n   */\n  View.prototype.adjustResolution = function (ratio, opt_anchor) {\n    var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  };\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   */\n  View.prototype.adjustResolutionInternal = function (ratio, opt_anchor) {\n    var isMoving = this.getAnimating() || this.getInteracting();\n    var size = this.getViewportSize_(this.getRotation());\n    var newResolution = this.constraints_.resolution(this.targetResolution_ * ratio, 0, size, isMoving);\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);\n    }\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  };\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   * @api\n   */\n  View.prototype.adjustZoom = function (delta, opt_anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);\n  };\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   * @api\n   */\n  View.prototype.adjustRotation = function (delta, opt_anchor) {\n    if (opt_anchor) {\n      opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, opt_anchor);\n  };\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   */\n  View.prototype.adjustRotationInternal = function (delta, opt_anchor) {\n    var isMoving = this.getAnimating() || this.getInteracting();\n    var newRotation = this.constraints_.rotation(this.targetRotation_ + delta, isMoving);\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  };\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.setCenter = function (center) {\n    this.setCenterInternal(fromUserCoordinate(center, this.getProjection()));\n  };\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  View.prototype.setCenterInternal = function (center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  };\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  View.prototype.setHint = function (hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  };\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  View.prototype.setResolution = function (resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  };\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  View.prototype.setRotation = function (rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  };\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  View.prototype.setZoom = function (zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  };\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean=} opt_doNotCancelAnims Do not cancel animations.\n   * @param {boolean=} opt_forceMoving Apply constraints as if the view is moving.\n   * @private\n   */\n  View.prototype.applyTargetState_ = function (opt_doNotCancelAnims, opt_forceMoving) {\n    var isMoving = this.getAnimating() || this.getInteracting() || opt_forceMoving;\n    // compute rotation\n    var newRotation = this.constraints_.rotation(this.targetRotation_, isMoving);\n    var size = this.getViewportSize_(newRotation);\n    var newResolution = this.constraints_.resolution(this.targetResolution_, 0, size, isMoving);\n    var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size, isMoving);\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n    }\n    if (!this.get(ViewProperty.CENTER) || !equals(this.get(ViewProperty.CENTER), newCenter)) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n    if (this.getAnimating() && !opt_doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  };\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number=} opt_duration The animation duration in ms.\n   * @param {number=} opt_resolutionDirection Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   */\n  View.prototype.resolveConstraints = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n    var duration = opt_duration !== undefined ? opt_duration : 200;\n    var direction = opt_resolutionDirection || 0;\n    var newRotation = this.constraints_.rotation(this.targetRotation_);\n    var size = this.getViewportSize_(newRotation);\n    var newResolution = this.constraints_.resolution(this.targetResolution_, direction, size);\n    var newCenter = this.constraints_.center(this.targetCenter_, newResolution, size);\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n    var anchor = opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n    if (this.getResolution() !== newResolution || this.getRotation() !== newRotation || !this.getCenterInternal() || !equals(this.getCenterInternal(), newCenter)) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor\n      });\n    }\n  };\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  View.prototype.beginInteraction = function () {\n    this.resolveConstraints(0);\n    this.setHint(ViewHint.INTERACTING, 1);\n  };\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number=} opt_duration Animation duration in ms.\n   * @param {number=} opt_resolutionDirection Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   * @api\n   */\n  View.prototype.endInteraction = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n    var anchor = opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);\n  };\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number=} opt_duration Animation duration in ms.\n   * @param {number=} opt_resolutionDirection Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   */\n  View.prototype.endInteractionInternal = function (opt_duration, opt_resolutionDirection, opt_anchor) {\n    this.setHint(ViewHint.INTERACTING, -1);\n    this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);\n  };\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number=} opt_targetResolution Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  View.prototype.getConstrainedCenter = function (targetCenter, opt_targetResolution) {\n    var size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(targetCenter, opt_targetResolution || this.getResolution(), size);\n  };\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number=} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  View.prototype.getConstrainedZoom = function (targetZoom, opt_direction) {\n    var targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(this.getConstrainedResolution(targetRes, opt_direction));\n  };\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number=} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  View.prototype.getConstrainedResolution = function (targetResolution, opt_direction) {\n    var direction = opt_direction || 0;\n    var size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.resolution(targetResolution, direction, size);\n  };\n  return View;\n}(BaseObject);\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    var smooth = options.smoothExtentConstraint !== undefined ? options.smoothExtentConstraint : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n  var projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    var extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n  return centerNone;\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  var resolutionConstraint;\n  var maxResolution;\n  var minResolution;\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  var defaultMaxZoom = 28;\n  var defaultZoomFactor = 2;\n  var minZoom = options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n  var maxZoom = options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n  var zoomFactor = options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n  var multiWorld = options.multiWorld !== undefined ? options.multiWorld : false;\n  var smooth = options.smoothResolutionConstraint !== undefined ? options.smoothResolutionConstraint : true;\n  var showFullExtent = options.showFullExtent !== undefined ? options.showFullExtent : false;\n  var projection = createProjection(options.projection, 'EPSG:3857');\n  var projExtent = projection.getExtent();\n  var constrainOnlyCenter = options.constrainOnlyCenter;\n  var extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n  if (options.resolutions !== undefined) {\n    var resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution = resolutions[maxZoom] !== undefined ? resolutions[maxZoom] : resolutions[resolutions.length - 1];\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(resolutions, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  } else {\n    // calculate the default min and max resolution\n    var size = !projExtent ?\n    // use an extent that can fit the whole world if need be\n    360 * METERS_PER_UNIT[Units.DEGREES] / projection.getMetersPerUnit() : Math.max(getWidth(projExtent), getHeight(projExtent));\n    var defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n    var defaultMinResolution = defaultMaxResolution / Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom = minZoom + Math.floor(Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(zoomFactor, maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    } else {\n      resolutionConstraint = createMinMaxResolution(maxResolution, minResolution, smooth, !constrainOnlyCenter && extent, showFullExtent);\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor\n  };\n}\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  var enableRotation = options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    var constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\nexport default View;","map":{"version":3,"names":["BaseObject","GeometryType","Units","ViewHint","ViewProperty","DEFAULT_TILE_SIZE","METERS_PER_UNIT","createProjection","fromUserCoordinate","fromUserExtent","getUserProjection","toUserCoordinate","toUserExtent","VOID","add","addCoordinate","equals","coordinatesEqual","rotate","rotateCoordinate","assert","assign","none","centerNone","createExtent","clamp","modulo","createMinMaxResolution","createSnapToN","createSnapToZero","disable","rotationNone","createSnapToPower","createSnapToResolutions","easeOut","getCenter","getForViewAndSize","getHeight","getWidth","isEmpty","inAndOut","linearFindNearest","fromExtent","polygonFromExtent","DEFAULT_MIN_ZOOM","View","_super","__extends","opt_options","_this","call","options","hints_","animations_","updateAnimationKey_","projection_","projection","viewportSize_","targetCenter_","targetResolution_","targetRotation_","cancelAnchor_","undefined","center","extent","applyOptions_","prototype","properties","resolutionConstraintInfo","createResolutionConstraint","maxResolution_","maxResolution","minResolution_","minResolution","zoomFactor_","zoomFactor","resolutions_","resolutions","minZoom_","minZoom","centerConstraint","createCenterConstraint","resolutionConstraint","constraint","rotationConstraint","createRotationConstraint","constraints_","resolution","rotation","setRotation","setCenterInternal","setResolution","zoom","setZoom","setProperties","options_","getUpdatedOptions_","newOptions","getResolution","getZoom","getCenterInternal","getRotation","animate","var_args","isDef","getAnimating","resolveConstraints","args","Array","arguments","length","i","getProjection","anchor","animateInternal","apply","animationCount","callback","state","animationCallback","start","Date","now","slice","series","animation","complete","duration","easing","sourceCenter","targetCenter","sourceResolution","targetResolution","getResolutionForZoom","sourceRotation","delta","Math","PI","targetRotation","isNoopAnimation","push","setHint","ANIMATING","updateAnimations_","getInteracting","INTERACTING","cancelAnimations","ii","j","jj","cancelAnimationFrame","more","seriesComplete","elapsed","fraction","progress","x0","y0","x1","y1","x","y","size","getViewportSize_","constrainedResolution","calculateCenterZoom","applyTargetState_","constrainedRotation","calculateCenterRotate","filter","Boolean","requestAnimationFrame","bind","currentCenter","currentResolution","opt_rotation","w","h","abs","cos","sin","setViewportSize","opt_size","isArray","get","CENTER","getConstraints","getConstrainResolution","constrainResolution","getHints","opt_hints","calculateExtent","calculateExtentInternal","getMaxResolution","getMinResolution","getMaxZoom","getZoomForResolution","setMaxZoom","maxZoom","getMinZoom","setMinZoom","setConstrainResolution","enabled","RESOLUTION","getResolutions","getResolutionForExtent","getResolutionForExtentInternal","xResolution","yResolution","max","getResolutionForValueFunction","opt_power","power","getConstrainedResolution","log","value","pow","ROTATION","getValueForResolutionFunction","logPower","getState","offset","nearest","baseLevel","floor","fit","geometryOrExtent","geometry","getSimplifiedGeometry","getType","CIRCLE","getExtent","userProjection","clone","transform","fitInternal","padding","coords","getFlatCoordinates","cosAngle","sinAngle","minRotX","Infinity","minRotY","maxRotX","maxRotY","stride","getStride","rotX","rotY","min","isNaN","centerRotX","centerRotY","centerX","centerY","getConstrainedCenter","centerOn","coordinate","position","centerOnInternal","adjustCenter","deltaCoordinates","setCenter","adjustCenterInternal","adjustResolution","ratio","opt_anchor","adjustResolutionInternal","isMoving","newResolution","adjustZoom","adjustRotation","adjustRotationInternal","newRotation","hint","changed","opt_doNotCancelAnims","opt_forceMoving","newCenter","set","opt_duration","opt_resolutionDirection","direction","beginInteraction","endInteraction","endInteractionInternal","opt_targetResolution","getConstrainedZoom","targetZoom","opt_direction","targetRes","returnValue","setTimeout","smooth","smoothExtentConstraint","constrainOnlyCenter","multiWorld","isGlobal","defaultMaxZoom","defaultZoomFactor","smoothResolutionConstraint","showFullExtent","projExtent","DEGREES","getMetersPerUnit","defaultMaxResolution","defaultMinResolution","enableRotation","constrainRotation"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/View.js"],"sourcesContent":["/**\n * @module ol/View\n */\nimport BaseObject from './Object.js';\nimport GeometryType from './geom/GeometryType.js';\nimport Units from './proj/Units.js';\nimport ViewHint from './ViewHint.js';\nimport ViewProperty from './ViewProperty.js';\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\nimport {\n  METERS_PER_UNIT,\n  createProjection,\n  fromUserCoordinate,\n  fromUserExtent,\n  getUserProjection,\n  toUserCoordinate,\n  toUserExtent,\n} from './proj.js';\nimport {VOID} from './functions.js';\nimport {\n  add as addCoordinate,\n  equals as coordinatesEqual,\n  rotate as rotateCoordinate,\n} from './coordinate.js';\nimport {assert} from './asserts.js';\nimport {assign} from './obj.js';\nimport {none as centerNone, createExtent} from './centerconstraint.js';\nimport {clamp, modulo} from './math.js';\nimport {createMinMaxResolution} from './resolutionconstraint.js';\nimport {\n  createSnapToN,\n  createSnapToZero,\n  disable,\n  none as rotationNone,\n} from './rotationconstraint.js';\nimport {\n  createSnapToPower,\n  createSnapToResolutions,\n} from './resolutionconstraint.js';\nimport {easeOut} from './easing.js';\nimport {equals} from './coordinate.js';\nimport {\n  getCenter,\n  getForViewAndSize,\n  getHeight,\n  getWidth,\n  isEmpty,\n} from './extent.js';\nimport {inAndOut} from './easing.js';\nimport {linearFindNearest} from './array.js';\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\n\n/**\n * An animation configuration\n *\n * @typedef {Object} Animation\n * @property {import(\"./coordinate.js\").Coordinate} [sourceCenter]\n * @property {import(\"./coordinate.js\").Coordinate} [targetCenter]\n * @property {number} [sourceResolution]\n * @property {number} [targetResolution]\n * @property {number} [sourceRotation]\n * @property {number} [targetRotation]\n * @property {import(\"./coordinate.js\").Coordinate} [anchor]\n * @property {number} start\n * @property {number} duration\n * @property {boolean} complete\n * @property {function(number):number} easing\n * @property {function(boolean):void} callback\n */\n\n/**\n * @typedef {Object} Constraints\n * @property {import(\"./centerconstraint.js\").Type} center\n * @property {import(\"./resolutionconstraint.js\").Type} resolution\n * @property {import(\"./rotationconstraint.js\").Type} rotation\n */\n\n/**\n * @typedef {Object} FitOptions\n * @property {import(\"./size.js\").Size} [size] The size in pixels of the box to fit\n * the extent into. Default is the current size of the first map in the DOM that\n * uses this view, or `[100, 100]` if no such map is found.\n * @property {!Array<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\n * cleared inside the view. Values in the array are top, right, bottom and left\n * padding.\n * @property {boolean} [nearest=false] If the view `constrainResolution` option is `true`,\n * get the nearest extent instead of the closest that actually fits the view.\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\n * `minResolution` is given, this property is ignored.\n * @property {number} [duration] The duration of the animation in milliseconds.\n * By default, there is no animation to the target extent.\n * @property {function(number):number} [easing] The easing function used during\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n * @property {function(boolean):void} [callback] Function called when the view is in\n * its final position. The callback will be called with `true` if the animation\n * series completed on its own or `false` if it was cancelled.\n */\n\n/**\n * @typedef {Object} ViewOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The initial center for\n * the view. If a user projection is not set, the coordinate system for the center is\n * specified with the `projection` option. Layer sources will not be fetched if this\n * is not set, but the center can be set later with {@link #setCenter}.\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\n * `false` means no constraint. `true` means no constraint, but snap to zero\n * near zero. A number constrains the rotation to that number of values. For\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\n * @property {boolean} [enableRotation=true] Enable rotation.\n * If `false`, a rotation constraint that always sets the rotation to zero is\n * used. The `constrainRotation` option has no effect if `enableRotation` is\n * `false`.\n * @property {import(\"./extent.js\").Extent} [extent] The extent that constrains the\n * view, in other words, nothing outside of this extent can be visible on the map.\n * @property {boolean} [constrainOnlyCenter=false] If true, the extent\n * constraint will only apply to the view center and not the whole extent.\n * @property {boolean} [smoothExtentConstraint=true] If true, the extent\n * constraint will be applied smoothly, i.e. allow the view to go slightly outside\n * of the given `extent`.\n * @property {number} [maxResolution] The maximum resolution used to determine\n * the resolution constraint. It is used together with `minResolution` (or\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\n * that the projection's validity extent fits in a 256x256 px tile. If the\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\n * to `40075016.68557849 / 256 = 156543.03392804097`.\n * @property {number} [minResolution] The minimum resolution used to determine\n * the resolution constraint.  It is used together with `maxResolution` (or\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\n * (the default) then `minResolution` defaults to\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\n * resolution constraint. It is used together with `minZoom` (or\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\n * provided, it is given precedence over `maxZoom`.\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\n * resolution constraint. It is used together with `maxZoom` (or\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\n * provided, it is given precedence over `minZoom`.\n * @property {boolean} [multiWorld=false] If `false` the view is constrained so\n * only one world is visible, and you cannot pan off the edge.  If `true` the map\n * may show multiple worlds at low zoom levels.  Only used if the `projection` is\n * global.  Note that if `extent` is also provided it is given precedence.\n * @property {boolean} [constrainResolution=false] If true, the view will always\n * animate to the closest zoom level after an interaction; false means\n * intermediary zoom levels are allowed.\n * @property {boolean} [smoothResolutionConstraint=true] If true, the resolution\n * min/max values will be applied smoothly, i. e. allow the view to exceed slightly\n * the given resolution or zoom bounds.\n * @property {boolean} [showFullExtent=false] Allow the view to be zoomed out to\n * show the full configured extent. By default, when a view is configured with an\n * extent, users will not be able to zoom out so the viewport exceeds the extent in\n * either dimension. This means the full extent may not be visible if the viewport\n * is taller or wider than the aspect ratio of the configured extent. If\n * showFullExtent is true, the user will be able to zoom out so that the viewport\n * exceeds the height or width of the configured extent, but not both, allowing the\n * full extent to be shown.\n * @property {import(\"./proj.js\").ProjectionLike} [projection='EPSG:3857'] The\n * projection. The default is Spherical Mercator.\n * @property {number} [resolution] The initial resolution for the view. The\n * units are `projection` units per pixel (e.g. meters per pixel). An\n * alternative to setting this is to set `zoom`. Layer sources will not be\n * fetched if neither this nor `zoom` are defined, but they can be set later\n * with {@link #setZoom} or {@link #setResolution}.\n * @property {Array<number>} [resolutions] Resolutions to determine the\n * resolution constraint. If set the `maxResolution`, `minResolution`,\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\n * @property {number} [rotation=0] The initial rotation for the view in radians\n * (positive rotation clockwise, 0 means North).\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\n * level used to calculate the initial resolution for the view.\n * @property {number} [zoomFactor=2] The zoom factor used to compute the\n * corresponding resolution.\n */\n\n/**\n * @typedef {Object} AnimationOptions\n * @property {import(\"./coordinate.js\").Coordinate} [center] The center of the view at the end of\n * the animation.\n * @property {number} [zoom] The zoom level of the view at the end of the\n * animation. This takes precedence over `resolution`.\n * @property {number} [resolution] The resolution of the view at the end\n * of the animation.  If `zoom` is also provided, this option will be ignored.\n * @property {number} [rotation] The rotation of the view at the end of\n * the animation.\n * @property {import(\"./coordinate.js\").Coordinate} [anchor] Optional anchor to remain fixed\n * during a rotation or resolution animation.\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\n * @property {function(number):number} [easing] The easing function used\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\n * The function will be called for each frame with a number representing a\n * fraction of the animation's duration.  The function should return a number\n * between 0 and 1 representing the progress toward the destination state.\n */\n\n/**\n * @typedef {Object} State\n * @property {import(\"./coordinate.js\").Coordinate} center\n * @property {import(\"./proj/Projection.js\").default} projection\n * @property {number} resolution\n * @property {number} rotation\n * @property {number} zoom\n */\n\n/**\n * Default min zoom level for the map view.\n * @type {number}\n */\nconst DEFAULT_MIN_ZOOM = 0;\n\n/**\n * @classdesc\n * A View object represents a simple 2D view of the map.\n *\n * This is the object to act upon to change the center, resolution,\n * and rotation of the map.\n *\n * A View has a `projection`. The projection determines the\n * coordinate system of the center, and its units determine the units of the\n * resolution (projection units per pixel). The default projection is\n * Spherical Mercator (EPSG:3857).\n *\n * ### The view states\n *\n * A View is determined by three states: `center`, `resolution`,\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\n * `getCenter` and `setCenter` for the `center` state.\n *\n * The `zoom` state is actually not saved on the view: all computations\n * internally use the `resolution` state. Still, the `setZoom` and `getZoom`\n * methods are available, as well as `getResolutionForZoom` and\n * `getZoomForResolution` to switch from one system to the other.\n *\n * ### The constraints\n *\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\n * states of the view, but any constraint defined in the constructor will\n * be applied along the way.\n *\n * A View object can have a *resolution constraint*, a *rotation constraint*\n * and a *center constraint*.\n *\n * The *resolution constraint* typically restricts min/max values and\n * snaps to specific resolutions. It is determined by the following\n * options: `resolutions`, `maxResolution`, `maxZoom` and `zoomFactor`.\n * If `resolutions` is set, the other three options are ignored. See\n * documentation for each option for more information. By default, the view\n * only has a min/max restriction and allow intermediary zoom levels when\n * pinch-zooming for example.\n *\n * The *rotation constraint* snaps to specific angles. It is determined\n * by the following options: `enableRotation` and `constrainRotation`.\n * By default rotation is allowed and its value is snapped to zero when approaching the\n * horizontal.\n *\n * The *center constraint* is determined by the `extent` option. By\n * default the view center is not constrained at all.\n *\n * ### Changing the view state\n *\n * It is important to note that `setZoom`, `setResolution`, `setCenter` and\n * `setRotation` are subject to the above mentioned constraints. As such, it\n * may sometimes not be possible to know in advance the resulting state of the\n * View. For example, calling `setResolution(10)` does not guarantee that\n * `getResolution()` will return `10`.\n *\n * A consequence of this is that, when applying a delta on the view state, one\n * should use `adjustCenter`, `adjustRotation`, `adjustZoom` and `adjustResolution`\n * rather than the corresponding setters. This will let view do its internal\n * computations. Besides, the `adjust*` methods also take an `opt_anchor`\n * argument which allows specifying an origin for the transformation.\n *\n * ### Interacting with the view\n *\n * View constraints are usually only applied when the view is *at rest*, meaning that\n * no interaction or animation is ongoing. As such, if the user puts the view in a\n * state that is not equivalent to a constrained one (e.g. rotating the view when\n * the snap angle is 0), an animation will be triggered at the interaction end to\n * put back the view to a stable state;\n *\n * @api\n */\nclass View extends BaseObject {\n  /**\n   * @param {ViewOptions=} opt_options View options.\n   */\n  constructor(opt_options) {\n    super();\n\n    const options = assign({}, opt_options);\n\n    /**\n     * @private\n     * @type {Array<number>}\n     */\n    this.hints_ = [0, 0];\n\n    /**\n     * @private\n     * @type {Array<Array<Animation>>}\n     */\n    this.animations_ = [];\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.updateAnimationKey_;\n\n    /**\n     * @private\n     * @const\n     * @type {import(\"./proj/Projection.js\").default}\n     */\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\n\n    /**\n     * @private\n     * @type {import(\"./size.js\").Size}\n     */\n    this.viewportSize_ = [100, 100];\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.targetCenter_ = null;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetResolution_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.targetRotation_;\n\n    /**\n     * @private\n     * @type {import(\"./coordinate.js\").Coordinate|undefined}\n     */\n    this.cancelAnchor_ = undefined;\n\n    if (options.center) {\n      options.center = fromUserCoordinate(options.center, this.projection_);\n    }\n    if (options.extent) {\n      options.extent = fromUserExtent(options.extent, this.projection_);\n    }\n\n    this.applyOptions_(options);\n  }\n\n  /**\n   * Set up the view with the given options.\n   * @param {ViewOptions} options View options.\n   */\n  applyOptions_(options) {\n    /**\n     * @type {Object<string, *>}\n     */\n    const properties = {};\n\n    const resolutionConstraintInfo = createResolutionConstraint(options);\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\n\n    /**\n     * @private\n     * @type {Array<number>|undefined}\n     */\n    this.resolutions_ = options.resolutions;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\n\n    const centerConstraint = createCenterConstraint(options);\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\n    const rotationConstraint = createRotationConstraint(options);\n\n    /**\n     * @private\n     * @type {Constraints}\n     */\n    this.constraints_ = {\n      center: centerConstraint,\n      resolution: resolutionConstraint,\n      rotation: rotationConstraint,\n    };\n\n    this.setRotation(options.rotation !== undefined ? options.rotation : 0);\n    this.setCenterInternal(\n      options.center !== undefined ? options.center : null\n    );\n    if (options.resolution !== undefined) {\n      this.setResolution(options.resolution);\n    } else if (options.zoom !== undefined) {\n      this.setZoom(options.zoom);\n    }\n\n    this.setProperties(properties);\n\n    /**\n     * @private\n     * @type {ViewOptions}\n     */\n    this.options_ = options;\n  }\n\n  /**\n   * Get an updated version of the view options used to construct the view.  The\n   * current resolution (or zoom), center, and rotation are applied to any stored\n   * options.  The provided options can be used to apply new min/max zoom or\n   * resolution limits.\n   * @param {ViewOptions} newOptions New options to be applied.\n   * @return {ViewOptions} New options updated with the current view state.\n   */\n  getUpdatedOptions_(newOptions) {\n    const options = assign({}, this.options_);\n\n    // preserve resolution (or zoom)\n    if (options.resolution !== undefined) {\n      options.resolution = this.getResolution();\n    } else {\n      options.zoom = this.getZoom();\n    }\n\n    // preserve center\n    options.center = this.getCenterInternal();\n\n    // preserve rotation\n    options.rotation = this.getRotation();\n\n    return assign({}, options, newOptions);\n  }\n\n  /**\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\n   * can be animated for smooth transitions between view states.  For example,\n   * to animate the view to a new zoom level:\n   *\n   *     view.animate({zoom: view.getZoom() + 1});\n   *\n   * By default, the animation lasts one second and uses in-and-out easing.  You\n   * can customize this behavior by including `duration` (in milliseconds) and\n   * `easing` options (see {@link module:ol/easing}).\n   *\n   * To chain together multiple animations, call the method with multiple\n   * animation objects.  For example, to first zoom and then pan:\n   *\n   *     view.animate({zoom: 10}, {center: [0, 0]});\n   *\n   * If you provide a function as the last argument to the animate method, it\n   * will get called at the end of an animation series.  The callback will be\n   * called with `true` if the animation series completed on its own or `false`\n   * if it was cancelled.\n   *\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\n   * (or another method that calls one of these).\n   *\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation\n   *     options.  Multiple animations can be run in series by passing multiple\n   *     options objects.  To run multiple animations in parallel, call the method\n   *     multiple times.  An optional callback can be provided as a final\n   *     argument.  The callback will be called with a boolean indicating whether\n   *     the animation completed without being cancelled.\n   * @api\n   */\n  animate(var_args) {\n    if (this.isDef() && !this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n    const args = new Array(arguments.length);\n    for (let i = 0; i < args.length; ++i) {\n      let options = arguments[i];\n      if (options.center) {\n        options = assign({}, options);\n        options.center = fromUserCoordinate(\n          options.center,\n          this.getProjection()\n        );\n      }\n      if (options.anchor) {\n        options = assign({}, options);\n        options.anchor = fromUserCoordinate(\n          options.anchor,\n          this.getProjection()\n        );\n      }\n      args[i] = options;\n    }\n    this.animateInternal.apply(this, args);\n  }\n\n  /**\n   * @param {...(AnimationOptions|function(boolean): void)} var_args Animation options.\n   */\n  animateInternal(var_args) {\n    let animationCount = arguments.length;\n    let callback;\n    if (\n      animationCount > 1 &&\n      typeof arguments[animationCount - 1] === 'function'\n    ) {\n      callback = arguments[animationCount - 1];\n      --animationCount;\n    }\n    if (!this.isDef()) {\n      // if view properties are not yet set, shortcut to the final state\n      const state = arguments[animationCount - 1];\n      if (state.center) {\n        this.setCenterInternal(state.center);\n      }\n      if (state.zoom !== undefined) {\n        this.setZoom(state.zoom);\n      }\n      if (state.rotation !== undefined) {\n        this.setRotation(state.rotation);\n      }\n      if (callback) {\n        animationCallback(callback, true);\n      }\n      return;\n    }\n    let start = Date.now();\n    let center = this.targetCenter_.slice();\n    let resolution = this.targetResolution_;\n    let rotation = this.targetRotation_;\n    const series = [];\n    for (let i = 0; i < animationCount; ++i) {\n      const options = /** @type {AnimationOptions} */ (arguments[i]);\n\n      const animation = {\n        start: start,\n        complete: false,\n        anchor: options.anchor,\n        duration: options.duration !== undefined ? options.duration : 1000,\n        easing: options.easing || inAndOut,\n        callback: callback,\n      };\n\n      if (options.center) {\n        animation.sourceCenter = center;\n        animation.targetCenter = options.center.slice();\n        center = animation.targetCenter;\n      }\n\n      if (options.zoom !== undefined) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = this.getResolutionForZoom(options.zoom);\n        resolution = animation.targetResolution;\n      } else if (options.resolution) {\n        animation.sourceResolution = resolution;\n        animation.targetResolution = options.resolution;\n        resolution = animation.targetResolution;\n      }\n\n      if (options.rotation !== undefined) {\n        animation.sourceRotation = rotation;\n        const delta =\n          modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\n        animation.targetRotation = rotation + delta;\n        rotation = animation.targetRotation;\n      }\n\n      // check if animation is a no-op\n      if (isNoopAnimation(animation)) {\n        animation.complete = true;\n        // we still push it onto the series for callback handling\n      } else {\n        start += animation.duration;\n      }\n      series.push(animation);\n    }\n    this.animations_.push(series);\n    this.setHint(ViewHint.ANIMATING, 1);\n    this.updateAnimations_();\n  }\n\n  /**\n   * Determine if the view is being animated.\n   * @return {boolean} The view is being animated.\n   * @api\n   */\n  getAnimating() {\n    return this.hints_[ViewHint.ANIMATING] > 0;\n  }\n\n  /**\n   * Determine if the user is interacting with the view, such as panning or zooming.\n   * @return {boolean} The view is being interacted with.\n   * @api\n   */\n  getInteracting() {\n    return this.hints_[ViewHint.INTERACTING] > 0;\n  }\n\n  /**\n   * Cancel any ongoing animations.\n   * @api\n   */\n  cancelAnimations() {\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\n    let anchor;\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\n      const series = this.animations_[i];\n      if (series[0].callback) {\n        animationCallback(series[0].callback, false);\n      }\n      if (!anchor) {\n        for (let j = 0, jj = series.length; j < jj; ++j) {\n          const animation = series[j];\n          if (!animation.complete) {\n            anchor = animation.anchor;\n            break;\n          }\n        }\n      }\n    }\n    this.animations_.length = 0;\n    this.cancelAnchor_ = anchor;\n  }\n\n  /**\n   * Update all animations.\n   */\n  updateAnimations_() {\n    if (this.updateAnimationKey_ !== undefined) {\n      cancelAnimationFrame(this.updateAnimationKey_);\n      this.updateAnimationKey_ = undefined;\n    }\n    if (!this.getAnimating()) {\n      return;\n    }\n    const now = Date.now();\n    let more = false;\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\n      const series = this.animations_[i];\n      let seriesComplete = true;\n      for (let j = 0, jj = series.length; j < jj; ++j) {\n        const animation = series[j];\n        if (animation.complete) {\n          continue;\n        }\n        const elapsed = now - animation.start;\n        let fraction =\n          animation.duration > 0 ? elapsed / animation.duration : 1;\n        if (fraction >= 1) {\n          animation.complete = true;\n          fraction = 1;\n        } else {\n          seriesComplete = false;\n        }\n        const progress = animation.easing(fraction);\n        if (animation.sourceCenter) {\n          const x0 = animation.sourceCenter[0];\n          const y0 = animation.sourceCenter[1];\n          const x1 = animation.targetCenter[0];\n          const y1 = animation.targetCenter[1];\n          const x = x0 + progress * (x1 - x0);\n          const y = y0 + progress * (y1 - y0);\n          this.targetCenter_ = [x, y];\n        }\n        if (animation.sourceResolution && animation.targetResolution) {\n          const resolution =\n            progress === 1\n              ? animation.targetResolution\n              : animation.sourceResolution +\n                progress *\n                  (animation.targetResolution - animation.sourceResolution);\n          if (animation.anchor) {\n            const size = this.getViewportSize_(this.getRotation());\n            const constrainedResolution = this.constraints_.resolution(\n              resolution,\n              0,\n              size,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterZoom(\n              constrainedResolution,\n              animation.anchor\n            );\n          }\n          this.targetResolution_ = resolution;\n          this.applyTargetState_(true);\n        }\n        if (\n          animation.sourceRotation !== undefined &&\n          animation.targetRotation !== undefined\n        ) {\n          const rotation =\n            progress === 1\n              ? modulo(animation.targetRotation + Math.PI, 2 * Math.PI) -\n                Math.PI\n              : animation.sourceRotation +\n                progress *\n                  (animation.targetRotation - animation.sourceRotation);\n          if (animation.anchor) {\n            const constrainedRotation = this.constraints_.rotation(\n              rotation,\n              true\n            );\n            this.targetCenter_ = this.calculateCenterRotate(\n              constrainedRotation,\n              animation.anchor\n            );\n          }\n          this.targetRotation_ = rotation;\n        }\n        this.applyTargetState_(true);\n        more = true;\n        if (!animation.complete) {\n          break;\n        }\n      }\n      if (seriesComplete) {\n        this.animations_[i] = null;\n        this.setHint(ViewHint.ANIMATING, -1);\n        const callback = series[0].callback;\n        if (callback) {\n          animationCallback(callback, true);\n        }\n      }\n    }\n    // prune completed series\n    this.animations_ = this.animations_.filter(Boolean);\n    if (more && this.updateAnimationKey_ === undefined) {\n      this.updateAnimationKey_ = requestAnimationFrame(\n        this.updateAnimations_.bind(this)\n      );\n    }\n  }\n\n  /**\n   * @param {number} rotation Target rotation.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Rotation anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for rotation and anchor.\n   */\n  calculateCenterRotate(rotation, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    if (currentCenter !== undefined) {\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\n      rotateCoordinate(center, rotation - this.getRotation());\n      addCoordinate(center, anchor);\n    }\n    return center;\n  }\n\n  /**\n   * @param {number} resolution Target resolution.\n   * @param {import(\"./coordinate.js\").Coordinate} anchor Zoom anchor.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Center for resolution and anchor.\n   */\n  calculateCenterZoom(resolution, anchor) {\n    let center;\n    const currentCenter = this.getCenterInternal();\n    const currentResolution = this.getResolution();\n    if (currentCenter !== undefined && currentResolution !== undefined) {\n      const x =\n        anchor[0] -\n        (resolution * (anchor[0] - currentCenter[0])) / currentResolution;\n      const y =\n        anchor[1] -\n        (resolution * (anchor[1] - currentCenter[1])) / currentResolution;\n      center = [x, y];\n    }\n    return center;\n  }\n\n  /**\n   * Returns the current viewport size.\n   * @private\n   * @param {number=} opt_rotation Take into account the rotation of the viewport when giving the size\n   * @return {import(\"./size.js\").Size} Viewport size or `[100, 100]` when no viewport is found.\n   */\n  getViewportSize_(opt_rotation) {\n    const size = this.viewportSize_;\n    if (opt_rotation) {\n      const w = size[0];\n      const h = size[1];\n      return [\n        Math.abs(w * Math.cos(opt_rotation)) +\n          Math.abs(h * Math.sin(opt_rotation)),\n        Math.abs(w * Math.sin(opt_rotation)) +\n          Math.abs(h * Math.cos(opt_rotation)),\n      ];\n    } else {\n      return size;\n    }\n  }\n\n  /**\n   * Stores the viewport size on the view. The viewport size is not read every time from the DOM\n   * to avoid performance hit and layout reflow.\n   * This should be done on map size change.\n   * Note: the constraints are not resolved during an animation to avoid stopping it\n   * @param {import(\"./size.js\").Size=} opt_size Viewport size; if undefined, [100, 100] is assumed\n   */\n  setViewportSize(opt_size) {\n    this.viewportSize_ = Array.isArray(opt_size)\n      ? opt_size.slice()\n      : [100, 100];\n    if (!this.getAnimating()) {\n      this.resolveConstraints(0);\n    }\n  }\n\n  /**\n   * Get the view center.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   * @observable\n   * @api\n   */\n  getCenter() {\n    const center = this.getCenterInternal();\n    if (!center) {\n      return center;\n    }\n    return toUserCoordinate(center, this.getProjection());\n  }\n\n  /**\n   * Get the view center without transforming to user projection.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} The center of the view.\n   */\n  getCenterInternal() {\n    return /** @type {import(\"./coordinate.js\").Coordinate|undefined} */ (this.get(\n      ViewProperty.CENTER\n    ));\n  }\n\n  /**\n   * @return {Constraints} Constraints.\n   */\n  getConstraints() {\n    return this.constraints_;\n  }\n\n  /**\n   * @return {boolean} Resolution constraint is set\n   */\n  getConstrainResolution() {\n    return this.options_.constrainResolution;\n  }\n\n  /**\n   * @param {Array<number>=} opt_hints Destination array.\n   * @return {Array<number>} Hint.\n   */\n  getHints(opt_hints) {\n    if (opt_hints !== undefined) {\n      opt_hints[0] = this.hints_[0];\n      opt_hints[1] = this.hints_[1];\n      return opt_hints;\n    } else {\n      return this.hints_.slice();\n    }\n  }\n\n  /**\n   * Calculate the extent for the current view state and the passed size.\n   * The size is the pixel dimensions of the box into which the calculated extent\n   * should fit. In most cases you want to get the extent of the entire map,\n   * that is `map.getSize()`.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size\n   * of the map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   * @api\n   */\n  calculateExtent(opt_size) {\n    const extent = this.calculateExtentInternal(opt_size);\n    return toUserExtent(extent, this.getProjection());\n  }\n\n  /**\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size. If not provided, the size of the\n   * first map that uses this view will be used.\n   * @return {import(\"./extent.js\").Extent} Extent.\n   */\n  calculateExtentInternal(opt_size) {\n    const size = opt_size || this.getViewportSize_();\n    const center = /** @type {!import(\"./coordinate.js\").Coordinate} */ (this.getCenterInternal());\n    assert(center, 1); // The view center is not defined\n    const resolution = /** @type {!number} */ (this.getResolution());\n    assert(resolution !== undefined, 2); // The view resolution is not defined\n    const rotation = /** @type {!number} */ (this.getRotation());\n    assert(rotation !== undefined, 3); // The view rotation is not defined\n\n    return getForViewAndSize(center, resolution, rotation, size);\n  }\n\n  /**\n   * Get the maximum resolution of the view.\n   * @return {number} The maximum resolution of the view.\n   * @api\n   */\n  getMaxResolution() {\n    return this.maxResolution_;\n  }\n\n  /**\n   * Get the minimum resolution of the view.\n   * @return {number} The minimum resolution of the view.\n   * @api\n   */\n  getMinResolution() {\n    return this.minResolution_;\n  }\n\n  /**\n   * Get the maximum zoom level for the view.\n   * @return {number} The maximum zoom level.\n   * @api\n   */\n  getMaxZoom() {\n    return /** @type {number} */ (this.getZoomForResolution(\n      this.minResolution_\n    ));\n  }\n\n  /**\n   * Set a new maximum zoom level for the view.\n   * @param {number} zoom The maximum zoom level.\n   * @api\n   */\n  setMaxZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\n  }\n\n  /**\n   * Get the minimum zoom level for the view.\n   * @return {number} The minimum zoom level.\n   * @api\n   */\n  getMinZoom() {\n    return /** @type {number} */ (this.getZoomForResolution(\n      this.maxResolution_\n    ));\n  }\n\n  /**\n   * Set a new minimum zoom level for the view.\n   * @param {number} zoom The minimum zoom level.\n   * @api\n   */\n  setMinZoom(zoom) {\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\n  }\n\n  /**\n   * Set whether the view shoud allow intermediary zoom levels.\n   * @param {boolean} enabled Whether the resolution is constrained.\n   * @api\n   */\n  setConstrainResolution(enabled) {\n    this.applyOptions_(this.getUpdatedOptions_({constrainResolution: enabled}));\n  }\n\n  /**\n   * Get the view projection.\n   * @return {import(\"./proj/Projection.js\").default} The projection of the view.\n   * @api\n   */\n  getProjection() {\n    return this.projection_;\n  }\n\n  /**\n   * Get the view resolution.\n   * @return {number|undefined} The resolution of the view.\n   * @observable\n   * @api\n   */\n  getResolution() {\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\n  }\n\n  /**\n   * Get the resolutions for the view. This returns the array of resolutions\n   * passed to the constructor of the View, or undefined if none were given.\n   * @return {Array<number>|undefined} The resolutions of the view.\n   * @api\n   */\n  getResolutions() {\n    return this.resolutions_;\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   * @api\n   */\n  getResolutionForExtent(extent, opt_size) {\n    return this.getResolutionForExtentInternal(\n      fromUserExtent(extent, this.getProjection()),\n      opt_size\n    );\n  }\n\n  /**\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\n   * @param {import(\"./extent.js\").Extent} extent Extent.\n   * @param {import(\"./size.js\").Size=} opt_size Box pixel size.\n   * @return {number} The resolution at which the provided extent will render at\n   *     the given size.\n   */\n  getResolutionForExtentInternal(extent, opt_size) {\n    const size = opt_size || this.getViewportSize_();\n    const xResolution = getWidth(extent) / size[0];\n    const yResolution = getHeight(extent) / size[1];\n    return Math.max(xResolution, yResolution);\n  }\n\n  /**\n   * Return a function that returns a value between 0 and 1 for a\n   * resolution. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Resolution for value function.\n   */\n  getResolutionForValueFunction(opt_power) {\n    const power = opt_power || 2;\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\n    return (\n      /**\n       * @param {number} value Value.\n       * @return {number} Resolution.\n       */\n      function (value) {\n        const resolution = maxResolution / Math.pow(power, value * max);\n        return resolution;\n      }\n    );\n  }\n\n  /**\n   * Get the view rotation.\n   * @return {number} The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  getRotation() {\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\n  }\n\n  /**\n   * Return a function that returns a resolution for a value between\n   * 0 and 1. Exponential scaling is assumed.\n   * @param {number=} opt_power Power.\n   * @return {function(number): number} Value for resolution function.\n   */\n  getValueForResolutionFunction(opt_power) {\n    const logPower = Math.log(opt_power || 2);\n    const maxResolution = this.getConstrainedResolution(this.maxResolution_);\n    const minResolution = this.minResolution_;\n    const max = Math.log(maxResolution / minResolution) / logPower;\n    return (\n      /**\n       * @param {number} resolution Resolution.\n       * @return {number} Value.\n       */\n      function (resolution) {\n        const value = Math.log(maxResolution / resolution) / logPower / max;\n        return value;\n      }\n    );\n  }\n\n  /**\n   * @return {State} View state.\n   */\n  getState() {\n    const center = /** @type {import(\"./coordinate.js\").Coordinate} */ (this.getCenterInternal());\n    const projection = this.getProjection();\n    const resolution = /** @type {number} */ (this.getResolution());\n    const rotation = this.getRotation();\n    return {\n      center: center.slice(0),\n      projection: projection !== undefined ? projection : null,\n      resolution: resolution,\n      rotation: rotation,\n      zoom: this.getZoom(),\n    };\n  }\n\n  /**\n   * Get the current zoom level. This method may return non-integer zoom levels\n   * if the view does not constrain the resolution, or if an interaction or\n   * animation is underway.\n   * @return {number|undefined} Zoom.\n   * @api\n   */\n  getZoom() {\n    let zoom;\n    const resolution = this.getResolution();\n    if (resolution !== undefined) {\n      zoom = this.getZoomForResolution(resolution);\n    }\n    return zoom;\n  }\n\n  /**\n   * Get the zoom level for a resolution.\n   * @param {number} resolution The resolution.\n   * @return {number|undefined} The zoom level for the provided resolution.\n   * @api\n   */\n  getZoomForResolution(resolution) {\n    let offset = this.minZoom_ || 0;\n    let max, zoomFactor;\n    if (this.resolutions_) {\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\n      offset = nearest;\n      max = this.resolutions_[nearest];\n      if (nearest == this.resolutions_.length - 1) {\n        zoomFactor = 2;\n      } else {\n        zoomFactor = max / this.resolutions_[nearest + 1];\n      }\n    } else {\n      max = this.maxResolution_;\n      zoomFactor = this.zoomFactor_;\n    }\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\n  }\n\n  /**\n   * Get the resolution for a zoom level.\n   * @param {number} zoom Zoom level.\n   * @return {number} The view resolution for the provided zoom level.\n   * @api\n   */\n  getResolutionForZoom(zoom) {\n    if (this.resolutions_) {\n      if (this.resolutions_.length <= 1) {\n        return 0;\n      }\n      const baseLevel = clamp(\n        Math.floor(zoom),\n        0,\n        this.resolutions_.length - 2\n      );\n      const zoomFactor =\n        this.resolutions_[baseLevel] / this.resolutions_[baseLevel + 1];\n      return (\n        this.resolutions_[baseLevel] /\n        Math.pow(zoomFactor, clamp(zoom - baseLevel, 0, 1))\n      );\n    } else {\n      return (\n        this.maxResolution_ / Math.pow(this.zoomFactor_, zoom - this.minZoom_)\n      );\n    }\n  }\n\n  /**\n   * Fit the given geometry or extent based on the given map size and border.\n   * The size is pixel dimensions of the box to fit the extent into.\n   * In most cases you will want to use the map size, that is `map.getSize()`.\n   * Takes care of the map angle.\n   * @param {import(\"./geom/SimpleGeometry.js\").default|import(\"./extent.js\").Extent} geometryOrExtent The geometry or\n   *     extent to fit the view to.\n   * @param {FitOptions=} opt_options Options.\n   * @api\n   */\n  fit(geometryOrExtent, opt_options) {\n    const options = assign({size: this.getViewportSize_()}, opt_options || {});\n\n    /** @type {import(\"./geom/SimpleGeometry.js\").default} */\n    let geometry;\n    assert(\n      Array.isArray(geometryOrExtent) ||\n        typeof (/** @type {?} */ (geometryOrExtent).getSimplifiedGeometry) ===\n          'function',\n      24\n    ); // Invalid extent or geometry provided as `geometry`\n    if (Array.isArray(geometryOrExtent)) {\n      assert(!isEmpty(geometryOrExtent), 25); // Cannot fit empty extent provided as `geometry`\n      const extent = fromUserExtent(geometryOrExtent, this.getProjection());\n      geometry = polygonFromExtent(extent);\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\n      const extent = fromUserExtent(\n        geometryOrExtent.getExtent(),\n        this.getProjection()\n      );\n      geometry = polygonFromExtent(extent);\n      geometry.rotate(this.getRotation(), getCenter(extent));\n    } else {\n      const userProjection = getUserProjection();\n      if (userProjection) {\n        geometry = /** @type {import(\"./geom/SimpleGeometry.js\").default} */ (geometryOrExtent\n          .clone()\n          .transform(userProjection, this.getProjection()));\n      } else {\n        geometry = geometryOrExtent;\n      }\n    }\n\n    this.fitInternal(geometry, options);\n  }\n\n  /**\n   * @param {import(\"./geom/SimpleGeometry.js\").default} geometry The geometry.\n   * @param {FitOptions=} opt_options Options.\n   */\n  fitInternal(geometry, opt_options) {\n    const options = opt_options || {};\n    let size = options.size;\n    if (!size) {\n      size = this.getViewportSize_();\n    }\n    const padding =\n      options.padding !== undefined ? options.padding : [0, 0, 0, 0];\n    const nearest = options.nearest !== undefined ? options.nearest : false;\n    let minResolution;\n    if (options.minResolution !== undefined) {\n      minResolution = options.minResolution;\n    } else if (options.maxZoom !== undefined) {\n      minResolution = this.getResolutionForZoom(options.maxZoom);\n    } else {\n      minResolution = 0;\n    }\n    const coords = geometry.getFlatCoordinates();\n\n    // calculate rotated extent\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let minRotX = +Infinity;\n    let minRotY = +Infinity;\n    let maxRotX = -Infinity;\n    let maxRotY = -Infinity;\n    const stride = geometry.getStride();\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\n      minRotX = Math.min(minRotX, rotX);\n      minRotY = Math.min(minRotY, rotY);\n      maxRotX = Math.max(maxRotX, rotX);\n      maxRotY = Math.max(maxRotY, rotY);\n    }\n\n    // calculate resolution\n    let resolution = this.getResolutionForExtentInternal(\n      [minRotX, minRotY, maxRotX, maxRotY],\n      [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]\n    );\n    resolution = isNaN(resolution)\n      ? minResolution\n      : Math.max(resolution, minResolution);\n    resolution = this.getConstrainedResolution(resolution, nearest ? 0 : 1);\n\n    // calculate center\n    sinAngle = -sinAngle; // go back to original rotation\n    let centerRotX = (minRotX + maxRotX) / 2;\n    let centerRotY = (minRotY + maxRotY) / 2;\n    centerRotX += ((padding[1] - padding[3]) / 2) * resolution;\n    centerRotY += ((padding[0] - padding[2]) / 2) * resolution;\n    const centerX = centerRotX * cosAngle - centerRotY * sinAngle;\n    const centerY = centerRotY * cosAngle + centerRotX * sinAngle;\n    const center = [centerX, centerY];\n    const callback = options.callback ? options.callback : VOID;\n\n    if (options.duration !== undefined) {\n      this.animateInternal(\n        {\n          resolution: resolution,\n          center: this.getConstrainedCenter(center, resolution),\n          duration: options.duration,\n          easing: options.easing,\n        },\n        callback\n      );\n    } else {\n      this.targetResolution_ = resolution;\n      this.targetCenter_ = center;\n      this.applyTargetState_(false, true);\n      animationCallback(callback, true);\n    }\n  }\n\n  /**\n   * Center on coordinate and view position.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   * @api\n   */\n  centerOn(coordinate, size, position) {\n    this.centerOnInternal(\n      fromUserCoordinate(coordinate, this.getProjection()),\n      size,\n      position\n    );\n  }\n\n  /**\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate Coordinate.\n   * @param {import(\"./size.js\").Size} size Box pixel size.\n   * @param {import(\"./pixel.js\").Pixel} position Position on the view to center on.\n   */\n  centerOnInternal(coordinate, size, position) {\n    // calculate rotated position\n    const rotation = this.getRotation();\n    const cosAngle = Math.cos(-rotation);\n    let sinAngle = Math.sin(-rotation);\n    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\n    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\n    const resolution = this.getResolution();\n    rotX += (size[0] / 2 - position[0]) * resolution;\n    rotY += (position[1] - size[1] / 2) * resolution;\n\n    // go back to original angle\n    sinAngle = -sinAngle; // go back to original rotation\n    const centerX = rotX * cosAngle - rotY * sinAngle;\n    const centerY = rotY * cosAngle + rotX * sinAngle;\n\n    this.setCenterInternal([centerX, centerY]);\n  }\n\n  /**\n   * @return {boolean} Is defined.\n   */\n  isDef() {\n    return !!this.getCenterInternal() && this.getResolution() !== undefined;\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   * @api\n   */\n  adjustCenter(deltaCoordinates) {\n    const center = toUserCoordinate(this.targetCenter_, this.getProjection());\n    this.setCenter([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Adds relative coordinates to the center of the view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate} deltaCoordinates Relative value to add.\n   */\n  adjustCenterInternal(deltaCoordinates) {\n    const center = this.targetCenter_;\n    this.setCenterInternal([\n      center[0] + deltaCoordinates[0],\n      center[1] + deltaCoordinates[1],\n    ]);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   * @api\n   */\n  adjustResolution(ratio, opt_anchor) {\n    const anchor =\n      opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.adjustResolutionInternal(ratio, anchor);\n  }\n\n  /**\n   * Multiply the view resolution by a ratio, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} ratio The ratio to apply on the view resolution.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   */\n  adjustResolutionInternal(ratio, opt_anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const size = this.getViewportSize_(this.getRotation());\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_ * ratio,\n      0,\n      size,\n      isMoving\n    );\n\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterZoom(newResolution, opt_anchor);\n    }\n\n    this.targetResolution_ *= ratio;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Adds a value to the view zoom level, optionally using an anchor. Any resolution\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom level.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   * @api\n   */\n  adjustZoom(delta, opt_anchor) {\n    this.adjustResolution(Math.pow(this.zoomFactor_, -delta), opt_anchor);\n  }\n\n  /**\n   * Adds a value to the view rotation, optionally using an anchor. Any rotation\n   * constraint will apply.\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   * @api\n   */\n  adjustRotation(delta, opt_anchor) {\n    if (opt_anchor) {\n      opt_anchor = fromUserCoordinate(opt_anchor, this.getProjection());\n    }\n    this.adjustRotationInternal(delta, opt_anchor);\n  }\n\n  /**\n   * @param {number} delta Relative value to add to the zoom rotation, in radians.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The rotation center.\n   */\n  adjustRotationInternal(delta, opt_anchor) {\n    const isMoving = this.getAnimating() || this.getInteracting();\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_ + delta,\n      isMoving\n    );\n    if (opt_anchor) {\n      this.targetCenter_ = this.calculateCenterRotate(newRotation, opt_anchor);\n    }\n    this.targetRotation_ += delta;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the center of the current view. Any extent constraint will apply.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   * @observable\n   * @api\n   */\n  setCenter(center) {\n    this.setCenterInternal(fromUserCoordinate(center, this.getProjection()));\n  }\n\n  /**\n   * Set the center using the view projection (not the user projection).\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} center The center of the view.\n   */\n  setCenterInternal(center) {\n    this.targetCenter_ = center;\n    this.applyTargetState_();\n  }\n\n  /**\n   * @param {import(\"./ViewHint.js\").default} hint Hint.\n   * @param {number} delta Delta.\n   * @return {number} New value.\n   */\n  setHint(hint, delta) {\n    this.hints_[hint] += delta;\n    this.changed();\n    return this.hints_[hint];\n  }\n\n  /**\n   * Set the resolution for this view. Any resolution constraint will apply.\n   * @param {number|undefined} resolution The resolution of the view.\n   * @observable\n   * @api\n   */\n  setResolution(resolution) {\n    this.targetResolution_ = resolution;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Set the rotation for this view. Any rotation constraint will apply.\n   * @param {number} rotation The rotation of the view in radians.\n   * @observable\n   * @api\n   */\n  setRotation(rotation) {\n    this.targetRotation_ = rotation;\n    this.applyTargetState_();\n  }\n\n  /**\n   * Zoom to a specific zoom level. Any resolution constrain will apply.\n   * @param {number} zoom Zoom level.\n   * @api\n   */\n  setZoom(zoom) {\n    this.setResolution(this.getResolutionForZoom(zoom));\n  }\n\n  /**\n   * Recompute rotation/resolution/center based on target values.\n   * Note: we have to compute rotation first, then resolution and center considering that\n   * parameters can influence one another in case a view extent constraint is present.\n   * @param {boolean=} opt_doNotCancelAnims Do not cancel animations.\n   * @param {boolean=} opt_forceMoving Apply constraints as if the view is moving.\n   * @private\n   */\n  applyTargetState_(opt_doNotCancelAnims, opt_forceMoving) {\n    const isMoving =\n      this.getAnimating() || this.getInteracting() || opt_forceMoving;\n\n    // compute rotation\n    const newRotation = this.constraints_.rotation(\n      this.targetRotation_,\n      isMoving\n    );\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      0,\n      size,\n      isMoving\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size,\n      isMoving\n    );\n\n    if (this.get(ViewProperty.ROTATION) !== newRotation) {\n      this.set(ViewProperty.ROTATION, newRotation);\n    }\n    if (this.get(ViewProperty.RESOLUTION) !== newResolution) {\n      this.set(ViewProperty.RESOLUTION, newResolution);\n    }\n    if (\n      !this.get(ViewProperty.CENTER) ||\n      !equals(this.get(ViewProperty.CENTER), newCenter)\n    ) {\n      this.set(ViewProperty.CENTER, newCenter);\n    }\n\n    if (this.getAnimating() && !opt_doNotCancelAnims) {\n      this.cancelAnimations();\n    }\n    this.cancelAnchor_ = undefined;\n  }\n\n  /**\n   * If any constraints need to be applied, an animation will be triggered.\n   * This is typically done on interaction end.\n   * Note: calling this with a duration of 0 will apply the constrained values straight away,\n   * without animation.\n   * @param {number=} opt_duration The animation duration in ms.\n   * @param {number=} opt_resolutionDirection Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   */\n  resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor) {\n    const duration = opt_duration !== undefined ? opt_duration : 200;\n    const direction = opt_resolutionDirection || 0;\n\n    const newRotation = this.constraints_.rotation(this.targetRotation_);\n    const size = this.getViewportSize_(newRotation);\n    const newResolution = this.constraints_.resolution(\n      this.targetResolution_,\n      direction,\n      size\n    );\n    const newCenter = this.constraints_.center(\n      this.targetCenter_,\n      newResolution,\n      size\n    );\n\n    if (duration === 0 && !this.cancelAnchor_) {\n      this.targetResolution_ = newResolution;\n      this.targetRotation_ = newRotation;\n      this.targetCenter_ = newCenter;\n      this.applyTargetState_();\n      return;\n    }\n\n    const anchor =\n      opt_anchor || (duration === 0 ? this.cancelAnchor_ : undefined);\n    this.cancelAnchor_ = undefined;\n\n    if (\n      this.getResolution() !== newResolution ||\n      this.getRotation() !== newRotation ||\n      !this.getCenterInternal() ||\n      !equals(this.getCenterInternal(), newCenter)\n    ) {\n      if (this.getAnimating()) {\n        this.cancelAnimations();\n      }\n\n      this.animateInternal({\n        rotation: newRotation,\n        center: newCenter,\n        resolution: newResolution,\n        duration: duration,\n        easing: easeOut,\n        anchor: anchor,\n      });\n    }\n  }\n\n  /**\n   * Notify the View that an interaction has started.\n   * The view state will be resolved to a stable one if needed\n   * (depending on its constraints).\n   * @api\n   */\n  beginInteraction() {\n    this.resolveConstraints(0);\n\n    this.setHint(ViewHint.INTERACTING, 1);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number=} opt_duration Animation duration in ms.\n   * @param {number=} opt_resolutionDirection Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   * @api\n   */\n  endInteraction(opt_duration, opt_resolutionDirection, opt_anchor) {\n    const anchor =\n      opt_anchor && fromUserCoordinate(opt_anchor, this.getProjection());\n    this.endInteractionInternal(opt_duration, opt_resolutionDirection, anchor);\n  }\n\n  /**\n   * Notify the View that an interaction has ended. The view state will be resolved\n   * to a stable one if needed (depending on its constraints).\n   * @param {number=} opt_duration Animation duration in ms.\n   * @param {number=} opt_resolutionDirection Which direction to zoom.\n   * @param {import(\"./coordinate.js\").Coordinate=} opt_anchor The origin of the transformation.\n   */\n  endInteractionInternal(opt_duration, opt_resolutionDirection, opt_anchor) {\n    this.setHint(ViewHint.INTERACTING, -1);\n\n    this.resolveConstraints(opt_duration, opt_resolutionDirection, opt_anchor);\n  }\n\n  /**\n   * Get a valid position for the view center according to the current constraints.\n   * @param {import(\"./coordinate.js\").Coordinate|undefined} targetCenter Target center position.\n   * @param {number=} opt_targetResolution Target resolution. If not supplied, the current one will be used.\n   * This is useful to guess a valid center position at a different zoom level.\n   * @return {import(\"./coordinate.js\").Coordinate|undefined} Valid center position.\n   */\n  getConstrainedCenter(targetCenter, opt_targetResolution) {\n    const size = this.getViewportSize_(this.getRotation());\n    return this.constraints_.center(\n      targetCenter,\n      opt_targetResolution || this.getResolution(),\n      size\n    );\n  }\n\n  /**\n   * Get a valid zoom level according to the current view constraints.\n   * @param {number|undefined} targetZoom Target zoom.\n   * @param {number=} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid zoom level.\n   */\n  getConstrainedZoom(targetZoom, opt_direction) {\n    const targetRes = this.getResolutionForZoom(targetZoom);\n    return this.getZoomForResolution(\n      this.getConstrainedResolution(targetRes, opt_direction)\n    );\n  }\n\n  /**\n   * Get a valid resolution according to the current view constraints.\n   * @param {number|undefined} targetResolution Target resolution.\n   * @param {number=} [opt_direction=0] Indicate which resolution should be used\n   * by a renderer if the view resolution does not match any resolution of the tile source.\n   * If 0, the nearest resolution will be used. If 1, the nearest lower resolution\n   * will be used. If -1, the nearest higher resolution will be used.\n   * @return {number|undefined} Valid resolution.\n   */\n  getConstrainedResolution(targetResolution, opt_direction) {\n    const direction = opt_direction || 0;\n    const size = this.getViewportSize_(this.getRotation());\n\n    return this.constraints_.resolution(targetResolution, direction, size);\n  }\n}\n\n/**\n * @param {Function} callback Callback.\n * @param {*} returnValue Return value.\n */\nfunction animationCallback(callback, returnValue) {\n  setTimeout(function () {\n    callback(returnValue);\n  }, 0);\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./centerconstraint.js\").Type} The constraint.\n */\nexport function createCenterConstraint(options) {\n  if (options.extent !== undefined) {\n    const smooth =\n      options.smoothExtentConstraint !== undefined\n        ? options.smoothExtentConstraint\n        : true;\n    return createExtent(options.extent, options.constrainOnlyCenter, smooth);\n  }\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  if (options.multiWorld !== true && projection.isGlobal()) {\n    const extent = projection.getExtent().slice();\n    extent[0] = -Infinity;\n    extent[2] = Infinity;\n    return createExtent(extent, false, false);\n  }\n\n  return centerNone;\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {{constraint: import(\"./resolutionconstraint.js\").Type, maxResolution: number,\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\n */\nexport function createResolutionConstraint(options) {\n  let resolutionConstraint;\n  let maxResolution;\n  let minResolution;\n\n  // TODO: move these to be ol constants\n  // see https://github.com/openlayers/openlayers/issues/2076\n  const defaultMaxZoom = 28;\n  const defaultZoomFactor = 2;\n\n  let minZoom =\n    options.minZoom !== undefined ? options.minZoom : DEFAULT_MIN_ZOOM;\n\n  let maxZoom =\n    options.maxZoom !== undefined ? options.maxZoom : defaultMaxZoom;\n\n  const zoomFactor =\n    options.zoomFactor !== undefined ? options.zoomFactor : defaultZoomFactor;\n\n  const multiWorld =\n    options.multiWorld !== undefined ? options.multiWorld : false;\n\n  const smooth =\n    options.smoothResolutionConstraint !== undefined\n      ? options.smoothResolutionConstraint\n      : true;\n\n  const showFullExtent =\n    options.showFullExtent !== undefined ? options.showFullExtent : false;\n\n  const projection = createProjection(options.projection, 'EPSG:3857');\n  const projExtent = projection.getExtent();\n  let constrainOnlyCenter = options.constrainOnlyCenter;\n  let extent = options.extent;\n  if (!multiWorld && !extent && projection.isGlobal()) {\n    constrainOnlyCenter = false;\n    extent = projExtent;\n  }\n\n  if (options.resolutions !== undefined) {\n    const resolutions = options.resolutions;\n    maxResolution = resolutions[minZoom];\n    minResolution =\n      resolutions[maxZoom] !== undefined\n        ? resolutions[maxZoom]\n        : resolutions[resolutions.length - 1];\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToResolutions(\n        resolutions,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  } else {\n    // calculate the default min and max resolution\n    const size = !projExtent\n      ? // use an extent that can fit the whole world if need be\n        (360 * METERS_PER_UNIT[Units.DEGREES]) / projection.getMetersPerUnit()\n      : Math.max(getWidth(projExtent), getHeight(projExtent));\n\n    const defaultMaxResolution =\n      size / DEFAULT_TILE_SIZE / Math.pow(defaultZoomFactor, DEFAULT_MIN_ZOOM);\n\n    const defaultMinResolution =\n      defaultMaxResolution /\n      Math.pow(defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\n\n    // user provided maxResolution takes precedence\n    maxResolution = options.maxResolution;\n    if (maxResolution !== undefined) {\n      minZoom = 0;\n    } else {\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\n    }\n\n    // user provided minResolution takes precedence\n    minResolution = options.minResolution;\n    if (minResolution === undefined) {\n      if (options.maxZoom !== undefined) {\n        if (options.maxResolution !== undefined) {\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\n        } else {\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\n        }\n      } else {\n        minResolution = defaultMinResolution;\n      }\n    }\n\n    // given discrete zoom levels, minResolution may be different than provided\n    maxZoom =\n      minZoom +\n      Math.floor(\n        Math.log(maxResolution / minResolution) / Math.log(zoomFactor)\n      );\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\n\n    if (options.constrainResolution) {\n      resolutionConstraint = createSnapToPower(\n        zoomFactor,\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    } else {\n      resolutionConstraint = createMinMaxResolution(\n        maxResolution,\n        minResolution,\n        smooth,\n        !constrainOnlyCenter && extent,\n        showFullExtent\n      );\n    }\n  }\n  return {\n    constraint: resolutionConstraint,\n    maxResolution: maxResolution,\n    minResolution: minResolution,\n    minZoom: minZoom,\n    zoomFactor: zoomFactor,\n  };\n}\n\n/**\n * @param {ViewOptions} options View options.\n * @return {import(\"./rotationconstraint.js\").Type} Rotation constraint.\n */\nexport function createRotationConstraint(options) {\n  const enableRotation =\n    options.enableRotation !== undefined ? options.enableRotation : true;\n  if (enableRotation) {\n    const constrainRotation = options.constrainRotation;\n    if (constrainRotation === undefined || constrainRotation === true) {\n      return createSnapToZero();\n    } else if (constrainRotation === false) {\n      return rotationNone;\n    } else if (typeof constrainRotation === 'number') {\n      return createSnapToN(constrainRotation);\n    } else {\n      return rotationNone;\n    }\n  } else {\n    return disable;\n  }\n}\n\n/**\n * Determine if an animation involves no view change.\n * @param {Animation} animation The animation.\n * @return {boolean} The animation involves no view change.\n */\nexport function isNoopAnimation(animation) {\n  if (animation.sourceCenter && animation.targetCenter) {\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\n      return false;\n    }\n  }\n  if (animation.sourceResolution !== animation.targetResolution) {\n    return false;\n  }\n  if (animation.sourceRotation !== animation.targetRotation) {\n    return false;\n  }\n  return true;\n}\n\nexport default View;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}