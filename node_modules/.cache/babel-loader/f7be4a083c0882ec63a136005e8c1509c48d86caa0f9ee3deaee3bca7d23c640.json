{"ast":null,"code":"/**\n * @module ol/source/TileArcGISRest\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport TileImage from './TileImage.js';\nimport { appendParams } from '../uri.js';\nimport { assign } from '../obj.js';\nimport { createEmpty } from '../extent.js';\nimport { modulo } from '../math.js';\nimport { scale as scaleSize, toSize } from '../size.js';\nimport { hash as tileCoordHash } from '../tilecoord.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/\n * for further reference.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n */\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\nvar TileArcGISRest = /** @class */function (_super) {\n  __extends(TileArcGISRest, _super);\n  /**\n   * @param {Options=} opt_options Tile ArcGIS Rest options.\n   */\n  function TileArcGISRest(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition\n    }) || this;\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    _this.tmpExtent_ = createEmpty();\n    _this.setKey(_this.getKeyForParams_());\n    return _this;\n  }\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  TileArcGISRest.prototype.getKeyForParams_ = function () {\n    var i = 0;\n    var res = [];\n    for (var key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  };\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  TileArcGISRest.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  TileArcGISRest.prototype.getRequestUrl_ = function (tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\n    var urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    var srid = projection.getCode().split(':').pop();\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n    params['BBOX'] = tileExtent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio);\n    var url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      var index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n    var modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    return appendParams(modifiedUrl, params);\n  };\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  TileArcGISRest.prototype.getTilePixelRatio = function (pixelRatio) {\n    return this.hidpi_ ? pixelRatio : 1;\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  TileArcGISRest.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  };\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  TileArcGISRest.prototype.tileUrlFunction = function (tileCoord, pixelRatio, projection) {\n    var tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n    if (pixelRatio != 1 && !this.hidpi_) {\n      pixelRatio = 1;\n    }\n    var tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    var tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n    // Apply default params and override with user specified values.\n    var baseParams = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    assign(baseParams, this.params_);\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, baseParams);\n  };\n  return TileArcGISRest;\n}(TileImage);\nexport default TileArcGISRest;","map":{"version":3,"names":["TileImage","appendParams","assign","createEmpty","modulo","scale","scaleSize","toSize","hash","tileCoordHash","TileArcGISRest","_super","__extends","opt_options","_this","options","call","attributions","cacheSize","crossOrigin","imageSmoothing","projection","reprojectionErrorThreshold","tileGrid","tileLoadFunction","url","urls","wrapX","undefined","transition","params_","params","hidpi_","hidpi","tmpExtent_","setKey","getKeyForParams_","prototype","i","res","key","join","getParams","getRequestUrl_","tileCoord","tileSize","tileExtent","pixelRatio","srid","getCode","split","pop","Math","round","length","index","modifiedUrl","replace","getTilePixelRatio","updateParams","tileUrlFunction","getTileGrid","getTileGridForProjection","getResolutions","getTileCoordExtent","getTileSize","tmpSize","baseParams"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/TileArcGISRest.js"],"sourcesContent":["/**\n * @module ol/source/TileArcGISRest\n */\n\nimport TileImage from './TileImage.js';\nimport {appendParams} from '../uri.js';\nimport {assign} from '../obj.js';\nimport {createEmpty} from '../extent.js';\nimport {modulo} from '../math.js';\nimport {scale as scaleSize, toSize} from '../size.js';\nimport {hash as tileCoordHash} from '../tilecoord.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\n * default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`,\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\n * override the default service layer visibility. See\n * http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/\n * for further reference.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\n * the image from the remote server.\n * @property {import(\"../tilegrid/TileGrid.js\").default} [tileGrid] Tile grid. Base this on the resolutions,\n * tilesize and extent supported by the server.\n * If this is not defined, a default grid will be used: if there is a projection\n * extent, the grid will be based on that; if not, a grid based on a global\n * extent with origin at 0,0 will be used.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\n * The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\n * url should include /MapServer or /ImageServer.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\n * transition, pass `transition: 0`.\n * @property {Array<string>} [urls] ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\n * Service supports multiple urls for export requests.\n */\n\n/**\n * @classdesc\n * Layer source for tile data from ArcGIS Rest services. Map and Image\n * Services are supported.\n *\n * For cached ArcGIS services, better performance is available using the\n * {@link module:ol/source/XYZ~XYZ} data source.\n * @api\n */\nclass TileArcGISRest extends TileImage {\n  /**\n   * @param {Options=} opt_options Tile ArcGIS Rest options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      attributions: options.attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: options.crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileGrid: options.tileGrid,\n      tileLoadFunction: options.tileLoadFunction,\n      url: options.url,\n      urls: options.urls,\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\n      transition: options.transition,\n    });\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {import(\"../extent.js\").Extent}\n     */\n    this.tmpExtent_ = createEmpty();\n\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @private\n   * @return {string} The key for the current params.\n   */\n  getKeyForParams_() {\n    let i = 0;\n    const res = [];\n    for (const key in this.params_) {\n      res[i++] = key + '-' + this.params_[key];\n    }\n    return res.join('/');\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord Tile coordinate.\n   * @param {import(\"../size.js\").Size} tileSize Tile size.\n   * @param {import(\"../extent.js\").Extent} tileExtent Tile extent.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string|undefined} Request URL.\n   * @private\n   */\n  getRequestUrl_(\n    tileCoord,\n    tileSize,\n    tileExtent,\n    pixelRatio,\n    projection,\n    params\n  ) {\n    const urls = this.urls;\n    if (!urls) {\n      return undefined;\n    }\n\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    const srid = projection.getCode().split(':').pop();\n\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\n    params['BBOX'] = tileExtent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(\n      params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\n    );\n\n    let url;\n    if (urls.length == 1) {\n      url = urls[0];\n    } else {\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\n      url = urls[index];\n    }\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Get the tile pixel ratio for this source.\n   * @param {number} pixelRatio Pixel ratio.\n   * @return {number} Tile pixel ratio.\n   */\n  getTilePixelRatio(pixelRatio) {\n    return this.hidpi_ ? pixelRatio : 1;\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.setKey(this.getKeyForParams_());\n  }\n\n  /**\n   * @param {import(\"../tilecoord.js\").TileCoord} tileCoord The tile coordinate\n   * @param {number} pixelRatio The pixel ratio\n   * @param {import(\"../proj/Projection.js\").default} projection The projection\n   * @return {string|undefined} The tile URL\n   * @override\n   */\n  tileUrlFunction(tileCoord, pixelRatio, projection) {\n    let tileGrid = this.getTileGrid();\n    if (!tileGrid) {\n      tileGrid = this.getTileGridForProjection(projection);\n    }\n\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\n      return undefined;\n    }\n\n    if (pixelRatio != 1 && !this.hidpi_) {\n      pixelRatio = 1;\n    }\n\n    const tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\n\n    if (pixelRatio != 1) {\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\n    }\n\n    // Apply default params and override with user specified values.\n    const baseParams = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    assign(baseParams, this.params_);\n\n    return this.getRequestUrl_(\n      tileCoord,\n      tileSize,\n      tileExtent,\n      pixelRatio,\n      projection,\n      baseParams\n    );\n  }\n}\n\nexport default TileArcGISRest;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}