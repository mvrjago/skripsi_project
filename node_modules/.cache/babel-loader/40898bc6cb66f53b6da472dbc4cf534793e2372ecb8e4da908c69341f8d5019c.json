{"ast":null,"code":"/**\n * @module ol/control/MousePosition\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport Control from './Control.js';\nimport EventType from '../pointer/EventType.js';\nimport { getChangeEventType } from '../Object.js';\nimport { get as getProjection, getTransformFromProjections, getUserProjection, identityTransform } from '../proj.js';\nimport { listen } from '../events.js';\n/**\n * @type {string}\n */\nvar PROJECTION = 'projection';\n/**\n * @type {string}\n */\nvar COORDINATE_FORMAT = 'coordinateFormat';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not\n * available (e.g. when the pointer leaves the map viewport).  By default, the last position\n * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To\n * retain the last rendered position, set this option to something falsey (like an empty\n * string `''`).\n */\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nvar MousePosition = /** @class */function (_super) {\n  __extends(MousePosition, _super);\n  /**\n   * @param {Options=} opt_options Mouse position options.\n   */\n  function MousePosition(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    var element = document.createElement('div');\n    element.className = options.className !== undefined ? options.className : 'ol-mouse-position';\n    _this = _super.call(this, {\n      element: element,\n      render: options.render,\n      target: options.target\n    }) || this;\n    _this.addEventListener(getChangeEventType(PROJECTION), _this.handleProjectionChanged_);\n    if (options.coordinateFormat) {\n      _this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      _this.setProjection(options.projection);\n    }\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.undefinedHTML_ = options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderOnMouseOut_ = !!_this.undefinedHTML_;\n    /**\n     * @private\n     * @type {string}\n     */\n    _this.renderedHTML_ = element.innerHTML;\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n    _this.mapProjection_ = null;\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    _this.transform_ = null;\n    return _this;\n  }\n  /**\n   * @private\n   */\n  MousePosition.prototype.handleProjectionChanged_ = function () {\n    this.transform_ = null;\n  };\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.getCoordinateFormat = function () {\n    return (/** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */this.get(COORDINATE_FORMAT)\n    );\n  };\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.getProjection = function () {\n    return (/** @type {import(\"../proj/Projection.js\").default|undefined} */this.get(PROJECTION)\n    );\n  };\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n  MousePosition.prototype.handleMouseMove = function (event) {\n    var map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  };\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  MousePosition.prototype.handleMouseOut = function (event) {\n    this.updateHTML_(null);\n  };\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  MousePosition.prototype.setMap = function (map) {\n    _super.prototype.setMap.call(this, map);\n    if (map) {\n      var viewport = map.getViewport();\n      this.listenerKeys.push(listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this));\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this));\n      }\n    }\n  };\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.setCoordinateFormat = function (format) {\n    this.set(COORDINATE_FORMAT, format);\n  };\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  MousePosition.prototype.setProjection = function (projection) {\n    this.set(PROJECTION, getProjection(projection));\n  };\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  MousePosition.prototype.updateHTML_ = function (pixel) {\n    var html = this.undefinedHTML_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        var projection = this.getProjection();\n        if (projection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, projection);\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n      var map = this.getMap();\n      var coordinate = map.getCoordinateFromPixelInternal(pixel);\n      if (coordinate) {\n        var userProjection = getUserProjection();\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(this.mapProjection_, userProjection);\n        }\n        this.transform_(coordinate, coordinate);\n        var coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  };\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  MousePosition.prototype.render = function (mapEvent) {\n    var frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  };\n  return MousePosition;\n}(Control);\nexport default MousePosition;","map":{"version":3,"names":["Control","EventType","getChangeEventType","get","getProjection","getTransformFromProjections","getUserProjection","identityTransform","listen","PROJECTION","COORDINATE_FORMAT","MousePosition","_super","__extends","opt_options","_this","options","element","document","createElement","className","undefined","call","render","target","addEventListener","handleProjectionChanged_","coordinateFormat","setCoordinateFormat","projection","setProjection","undefinedHTML_","undefinedHTML","renderOnMouseOut_","renderedHTML_","innerHTML","mapProjection_","transform_","prototype","getCoordinateFormat","handleMouseMove","event","map","getMap","updateHTML_","getEventPixel","handleMouseOut","setMap","viewport","getViewport","listenerKeys","push","POINTERMOVE","POINTEROUT","format","set","pixel","html","coordinate","getCoordinateFromPixelInternal","userProjection","toString","mapEvent","frameState","viewState"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/control/MousePosition.js"],"sourcesContent":["/**\n * @module ol/control/MousePosition\n */\n\nimport Control from './Control.js';\nimport EventType from '../pointer/EventType.js';\nimport {getChangeEventType} from '../Object.js';\nimport {\n  get as getProjection,\n  getTransformFromProjections,\n  getUserProjection,\n  identityTransform,\n} from '../proj.js';\nimport {listen} from '../events.js';\n\n/**\n * @type {string}\n */\nconst PROJECTION = 'projection';\n\n/**\n * @type {string}\n */\nconst COORDINATE_FORMAT = 'coordinateFormat';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-mouse-position'] CSS class name.\n * @property {import(\"../coordinate.js\").CoordinateFormat} [coordinateFormat] Coordinate format.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when the\n * control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n * @property {HTMLElement|string} [target] Specify a target if you want the\n * control to be rendered outside of the map's viewport.\n * @property {string} [undefinedHTML='&#160;'] Markup to show when coordinates are not\n * available (e.g. when the pointer leaves the map viewport).  By default, the last position\n * will be replaced with `'&#160;'` (`&nbsp;`) when the pointer leaves the viewport.  To\n * retain the last rendered position, set this option to something falsey (like an empty\n * string `''`).\n */\n\n/**\n * @classdesc\n * A control to show the 2D coordinates of the mouse cursor. By default, these\n * are in the view projection, but can be in any supported projection.\n * By default the control is shown in the top right corner of the map, but this\n * can be changed by using the css selector `.ol-mouse-position`.\n *\n * On touch devices, which usually do not have a mouse cursor, the coordinates\n * of the currently touched position are shown.\n *\n * @api\n */\nclass MousePosition extends Control {\n  /**\n   * @param {Options=} opt_options Mouse position options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    const element = document.createElement('div');\n    element.className =\n      options.className !== undefined ? options.className : 'ol-mouse-position';\n\n    super({\n      element: element,\n      render: options.render,\n      target: options.target,\n    });\n\n    this.addEventListener(\n      getChangeEventType(PROJECTION),\n      this.handleProjectionChanged_\n    );\n\n    if (options.coordinateFormat) {\n      this.setCoordinateFormat(options.coordinateFormat);\n    }\n    if (options.projection) {\n      this.setProjection(options.projection);\n    }\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.undefinedHTML_ =\n      options.undefinedHTML !== undefined ? options.undefinedHTML : '&#160;';\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderOnMouseOut_ = !!this.undefinedHTML_;\n\n    /**\n     * @private\n     * @type {string}\n     */\n    this.renderedHTML_ = element.innerHTML;\n\n    /**\n     * @private\n     * @type {?import(\"../proj/Projection.js\").default}\n     */\n    this.mapProjection_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"../proj.js\").TransformFunction}\n     */\n    this.transform_ = null;\n  }\n\n  /**\n   * @private\n   */\n  handleProjectionChanged_() {\n    this.transform_ = null;\n  }\n\n  /**\n   * Return the coordinate format type used to render the current position or\n   * undefined.\n   * @return {import(\"../coordinate.js\").CoordinateFormat|undefined} The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  getCoordinateFormat() {\n    return /** @type {import(\"../coordinate.js\").CoordinateFormat|undefined} */ (this.get(\n      COORDINATE_FORMAT\n    ));\n  }\n\n  /**\n   * Return the projection that is used to report the mouse position.\n   * @return {import(\"../proj/Projection.js\").default|undefined} The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  getProjection() {\n    return /** @type {import(\"../proj/Projection.js\").default|undefined} */ (this.get(\n      PROJECTION\n    ));\n  }\n\n  /**\n   * @param {MouseEvent} event Browser event.\n   * @protected\n   */\n  handleMouseMove(event) {\n    const map = this.getMap();\n    this.updateHTML_(map.getEventPixel(event));\n  }\n\n  /**\n   * @param {Event} event Browser event.\n   * @protected\n   */\n  handleMouseOut(event) {\n    this.updateHTML_(null);\n  }\n\n  /**\n   * Remove the control from its current map and attach it to the new map.\n   * Subclasses may set up event handlers to get notified about changes to\n   * the map here.\n   * @param {import(\"../PluggableMap.js\").default} map Map.\n   * @api\n   */\n  setMap(map) {\n    super.setMap(map);\n    if (map) {\n      const viewport = map.getViewport();\n      this.listenerKeys.push(\n        listen(viewport, EventType.POINTERMOVE, this.handleMouseMove, this)\n      );\n      if (this.renderOnMouseOut_) {\n        this.listenerKeys.push(\n          listen(viewport, EventType.POINTEROUT, this.handleMouseOut, this)\n        );\n      }\n    }\n  }\n\n  /**\n   * Set the coordinate format type used to render the current position.\n   * @param {import(\"../coordinate.js\").CoordinateFormat} format The format to render the current\n   *     position in.\n   * @observable\n   * @api\n   */\n  setCoordinateFormat(format) {\n    this.set(COORDINATE_FORMAT, format);\n  }\n\n  /**\n   * Set the projection that is used to report the mouse position.\n   * @param {import(\"../proj.js\").ProjectionLike} projection The projection to report mouse\n   *     position in.\n   * @observable\n   * @api\n   */\n  setProjection(projection) {\n    this.set(PROJECTION, getProjection(projection));\n  }\n\n  /**\n   * @param {?import(\"../pixel.js\").Pixel} pixel Pixel.\n   * @private\n   */\n  updateHTML_(pixel) {\n    let html = this.undefinedHTML_;\n    if (pixel && this.mapProjection_) {\n      if (!this.transform_) {\n        const projection = this.getProjection();\n        if (projection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            projection\n          );\n        } else {\n          this.transform_ = identityTransform;\n        }\n      }\n      const map = this.getMap();\n      const coordinate = map.getCoordinateFromPixelInternal(pixel);\n      if (coordinate) {\n        const userProjection = getUserProjection();\n        if (userProjection) {\n          this.transform_ = getTransformFromProjections(\n            this.mapProjection_,\n            userProjection\n          );\n        }\n        this.transform_(coordinate, coordinate);\n        const coordinateFormat = this.getCoordinateFormat();\n        if (coordinateFormat) {\n          html = coordinateFormat(coordinate);\n        } else {\n          html = coordinate.toString();\n        }\n      }\n    }\n    if (!this.renderedHTML_ || html !== this.renderedHTML_) {\n      this.element.innerHTML = html;\n      this.renderedHTML_ = html;\n    }\n  }\n\n  /**\n   * Update the projection. Rendering of the coordinates is done in\n   * `handleMouseMove` and `handleMouseUp`.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    const frameState = mapEvent.frameState;\n    if (!frameState) {\n      this.mapProjection_ = null;\n    } else {\n      if (this.mapProjection_ != frameState.viewState.projection) {\n        this.mapProjection_ = frameState.viewState.projection;\n        this.transform_ = null;\n      }\n    }\n  }\n}\n\nexport default MousePosition;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,OAAO,MAAM,cAAc;AAClC,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,SAAQC,kBAAkB,QAAO,cAAc;AAC/C,SACEC,GAAG,IAAIC,aAAa,EACpBC,2BAA2B,EAC3BC,iBAAiB,EACjBC,iBAAiB,QACZ,YAAY;AACnB,SAAQC,MAAM,QAAO,cAAc;AAEnC;;;AAGA,IAAMC,UAAU,GAAG,YAAY;AAE/B;;;AAGA,IAAMC,iBAAiB,GAAG,kBAAkB;AAE5C;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;AAYA,IAAAC,aAAA,0BAAAC,MAAA;EAA4BC,SAAA,CAAAF,aAAA,EAAAC,MAAA;EAC1B;;;EAGA,SAAAD,cAAYG,WAAW;IAAvB,IAAAC,KAAA;IACE,IAAMC,OAAO,GAAGF,WAAW,GAAGA,WAAW,GAAG,EAAE;IAE9C,IAAMG,OAAO,GAAGC,QAAQ,CAACC,aAAa,CAAC,KAAK,CAAC;IAC7CF,OAAO,CAACG,SAAS,GACfJ,OAAO,CAACI,SAAS,KAAKC,SAAS,GAAGL,OAAO,CAACI,SAAS,GAAG,mBAAmB;IAE3EL,KAAA,GAAAH,MAAA,CAAAU,IAAA,OAAM;MACJL,OAAO,EAAEA,OAAO;MAChBM,MAAM,EAAEP,OAAO,CAACO,MAAM;MACtBC,MAAM,EAAER,OAAO,CAACQ;KACjB,CAAC;IAEFT,KAAI,CAACU,gBAAgB,CACnBvB,kBAAkB,CAACO,UAAU,CAAC,EAC9BM,KAAI,CAACW,wBAAwB,CAC9B;IAED,IAAIV,OAAO,CAACW,gBAAgB,EAAE;MAC5BZ,KAAI,CAACa,mBAAmB,CAACZ,OAAO,CAACW,gBAAgB,CAAC;;IAEpD,IAAIX,OAAO,CAACa,UAAU,EAAE;MACtBd,KAAI,CAACe,aAAa,CAACd,OAAO,CAACa,UAAU,CAAC;;IAGxC;;;;IAIAd,KAAI,CAACgB,cAAc,GACjBf,OAAO,CAACgB,aAAa,KAAKX,SAAS,GAAGL,OAAO,CAACgB,aAAa,GAAG,QAAQ;IAExE;;;;IAIAjB,KAAI,CAACkB,iBAAiB,GAAG,CAAC,CAAClB,KAAI,CAACgB,cAAc;IAE9C;;;;IAIAhB,KAAI,CAACmB,aAAa,GAAGjB,OAAO,CAACkB,SAAS;IAEtC;;;;IAIApB,KAAI,CAACqB,cAAc,GAAG,IAAI;IAE1B;;;;IAIArB,KAAI,CAACsB,UAAU,GAAG,IAAI;;EACxB;EAEA;;;EAGA1B,aAAA,CAAA2B,SAAA,CAAAZ,wBAAwB,GAAxB;IACE,IAAI,CAACW,UAAU,GAAG,IAAI;EACxB,CAAC;EAED;;;;;;;;EAQA1B,aAAA,CAAA2B,SAAA,CAAAC,mBAAmB,GAAnB;IACE,OAAO,qEAAsE,IAAI,CAACpC,GAAG,CACnFO,iBAAiB;IAClB;EACH,CAAC;EAED;;;;;;;EAOAC,aAAA,CAAA2B,SAAA,CAAAlC,aAAa,GAAb;IACE,OAAO,iEAAkE,IAAI,CAACD,GAAG,CAC/EM,UAAU;IACX;EACH,CAAC;EAED;;;;EAIAE,aAAA,CAAA2B,SAAA,CAAAE,eAAe,GAAf,UAAgBC,KAAK;IACnB,IAAMC,GAAG,GAAG,IAAI,CAACC,MAAM,EAAE;IACzB,IAAI,CAACC,WAAW,CAACF,GAAG,CAACG,aAAa,CAACJ,KAAK,CAAC,CAAC;EAC5C,CAAC;EAED;;;;EAIA9B,aAAA,CAAA2B,SAAA,CAAAQ,cAAc,GAAd,UAAeL,KAAK;IAClB,IAAI,CAACG,WAAW,CAAC,IAAI,CAAC;EACxB,CAAC;EAED;;;;;;;EAOAjC,aAAA,CAAA2B,SAAA,CAAAS,MAAM,GAAN,UAAOL,GAAG;IACR9B,MAAA,CAAA0B,SAAA,CAAMS,MAAM,CAAAzB,IAAA,OAACoB,GAAG,CAAC;IACjB,IAAIA,GAAG,EAAE;MACP,IAAMM,QAAQ,GAAGN,GAAG,CAACO,WAAW,EAAE;MAClC,IAAI,CAACC,YAAY,CAACC,IAAI,CACpB3C,MAAM,CAACwC,QAAQ,EAAE/C,SAAS,CAACmD,WAAW,EAAE,IAAI,CAACZ,eAAe,EAAE,IAAI,CAAC,CACpE;MACD,IAAI,IAAI,CAACP,iBAAiB,EAAE;QAC1B,IAAI,CAACiB,YAAY,CAACC,IAAI,CACpB3C,MAAM,CAACwC,QAAQ,EAAE/C,SAAS,CAACoD,UAAU,EAAE,IAAI,CAACP,cAAc,EAAE,IAAI,CAAC,CAClE;;;EAGP,CAAC;EAED;;;;;;;EAOAnC,aAAA,CAAA2B,SAAA,CAAAV,mBAAmB,GAAnB,UAAoB0B,MAAM;IACxB,IAAI,CAACC,GAAG,CAAC7C,iBAAiB,EAAE4C,MAAM,CAAC;EACrC,CAAC;EAED;;;;;;;EAOA3C,aAAA,CAAA2B,SAAA,CAAAR,aAAa,GAAb,UAAcD,UAAU;IACtB,IAAI,CAAC0B,GAAG,CAAC9C,UAAU,EAAEL,aAAa,CAACyB,UAAU,CAAC,CAAC;EACjD,CAAC;EAED;;;;EAIAlB,aAAA,CAAA2B,SAAA,CAAAM,WAAW,GAAX,UAAYY,KAAK;IACf,IAAIC,IAAI,GAAG,IAAI,CAAC1B,cAAc;IAC9B,IAAIyB,KAAK,IAAI,IAAI,CAACpB,cAAc,EAAE;MAChC,IAAI,CAAC,IAAI,CAACC,UAAU,EAAE;QACpB,IAAMR,UAAU,GAAG,IAAI,CAACzB,aAAa,EAAE;QACvC,IAAIyB,UAAU,EAAE;UACd,IAAI,CAACQ,UAAU,GAAGhC,2BAA2B,CAC3C,IAAI,CAAC+B,cAAc,EACnBP,UAAU,CACX;SACF,MAAM;UACL,IAAI,CAACQ,UAAU,GAAG9B,iBAAiB;;;MAGvC,IAAMmC,GAAG,GAAG,IAAI,CAACC,MAAM,EAAE;MACzB,IAAMe,UAAU,GAAGhB,GAAG,CAACiB,8BAA8B,CAACH,KAAK,CAAC;MAC5D,IAAIE,UAAU,EAAE;QACd,IAAME,cAAc,GAAGtD,iBAAiB,EAAE;QAC1C,IAAIsD,cAAc,EAAE;UAClB,IAAI,CAACvB,UAAU,GAAGhC,2BAA2B,CAC3C,IAAI,CAAC+B,cAAc,EACnBwB,cAAc,CACf;;QAEH,IAAI,CAACvB,UAAU,CAACqB,UAAU,EAAEA,UAAU,CAAC;QACvC,IAAM/B,gBAAgB,GAAG,IAAI,CAACY,mBAAmB,EAAE;QACnD,IAAIZ,gBAAgB,EAAE;UACpB8B,IAAI,GAAG9B,gBAAgB,CAAC+B,UAAU,CAAC;SACpC,MAAM;UACLD,IAAI,GAAGC,UAAU,CAACG,QAAQ,EAAE;;;;IAIlC,IAAI,CAAC,IAAI,CAAC3B,aAAa,IAAIuB,IAAI,KAAK,IAAI,CAACvB,aAAa,EAAE;MACtD,IAAI,CAACjB,OAAO,CAACkB,SAAS,GAAGsB,IAAI;MAC7B,IAAI,CAACvB,aAAa,GAAGuB,IAAI;;EAE7B,CAAC;EAED;;;;;;EAMA9C,aAAA,CAAA2B,SAAA,CAAAf,MAAM,GAAN,UAAOuC,QAAQ;IACb,IAAMC,UAAU,GAAGD,QAAQ,CAACC,UAAU;IACtC,IAAI,CAACA,UAAU,EAAE;MACf,IAAI,CAAC3B,cAAc,GAAG,IAAI;KAC3B,MAAM;MACL,IAAI,IAAI,CAACA,cAAc,IAAI2B,UAAU,CAACC,SAAS,CAACnC,UAAU,EAAE;QAC1D,IAAI,CAACO,cAAc,GAAG2B,UAAU,CAACC,SAAS,CAACnC,UAAU;QACrD,IAAI,CAACQ,UAAU,GAAG,IAAI;;;EAG5B,CAAC;EACH,OAAA1B,aAAC;AAAD,CAAC,CAxN2BX,OAAO;AA0NnC,eAAeW,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}