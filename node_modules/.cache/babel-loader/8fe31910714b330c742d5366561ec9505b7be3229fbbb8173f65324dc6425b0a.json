{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport { CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE } from '../css.js';\nimport { equals } from '../array.js';\nimport { inView } from '../layer/Layer.js';\nimport { removeChildren, replaceNode } from '../dom.js';\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nvar Attribution = /** @class */function (_super) {\n  __extends(Attribution, _super);\n  /**\n   * @param {Options=} opt_options Attribution options.\n   */\n  function Attribution(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target\n    }) || this;\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    _this.ulElement_ = document.createElement('ul');\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsed_ = options.collapsed !== undefined ? options.collapsed : true;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.overrideCollapsible_ = options.collapsible !== undefined;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.collapsible_ = options.collapsible !== undefined ? options.collapsible : true;\n    if (!_this.collapsible_) {\n      _this.collapsed_ = false;\n    }\n    var className = options.className !== undefined ? options.className : 'ol-attribution';\n    var tipLabel = options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n    var collapseLabel = options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.collapseLabel_ = document.createElement('span');\n      _this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      _this.collapseLabel_ = collapseLabel;\n    }\n    var label = options.label !== undefined ? options.label : 'i';\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      _this.label_ = document.createElement('span');\n      _this.label_.textContent = label;\n    } else {\n      _this.label_ = label;\n    }\n    var activeLabel = _this.collapsible_ && !_this.collapsed_ ? _this.collapseLabel_ : _this.label_;\n    var button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n    button.addEventListener(EventType.CLICK, _this.handleClick_.bind(_this), false);\n    var cssClasses = className + ' ' + CLASS_UNSELECTABLE + ' ' + CLASS_CONTROL + (_this.collapsed_ && _this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') + (_this.collapsible_ ? '' : ' ol-uncollapsible');\n    var element = _this.element;\n    element.className = cssClasses;\n    element.appendChild(_this.ulElement_);\n    element.appendChild(button);\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    _this.renderedAttributions_ = [];\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.renderedVisible_ = true;\n    return _this;\n  }\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  Attribution.prototype.collectSourceAttributions_ = function (frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    var lookup = {};\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    var visibleAttributions = [];\n    var layerStatesArray = frameState.layerStatesArray;\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layerState = layerStatesArray[i];\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n      var source = /** @type {import(\"../layer/Layer.js\").default} */layerState.layer.getSource();\n      if (!source) {\n        continue;\n      }\n      var attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n      var attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n      if (!this.overrideCollapsible_ && source.getAttributionsCollapsible() === false) {\n        this.setCollapsible(false);\n      }\n      if (Array.isArray(attributions)) {\n        for (var j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    return visibleAttributions;\n  };\n  /**\n   * @private\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  Attribution.prototype.updateElement_ = function (frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n    var attributions = this.collectSourceAttributions_(frameState);\n    var visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n    removeChildren(this.ulElement_);\n    // append the attributions\n    for (var i = 0, ii = attributions.length; i < ii; ++i) {\n      var element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n    this.renderedAttributions_ = attributions;\n  };\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  Attribution.prototype.handleClick_ = function (event) {\n    event.preventDefault();\n    this.handleToggle_();\n  };\n  /**\n   * @private\n   */\n  Attribution.prototype.handleToggle_ = function () {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n  };\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  Attribution.prototype.getCollapsible = function () {\n    return this.collapsible_;\n  };\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  Attribution.prototype.setCollapsible = function (collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  };\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  Attribution.prototype.setCollapsed = function (collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  };\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  Attribution.prototype.getCollapsed = function () {\n    return this.collapsed_;\n  };\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  Attribution.prototype.render = function (mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  };\n  return Attribution;\n}(Control);\nexport default Attribution;","map":{"version":3,"names":["Control","EventType","CLASS_COLLAPSED","CLASS_CONTROL","CLASS_UNSELECTABLE","equals","inView","removeChildren","replaceNode","Attribution","_super","__extends","opt_options","_this","options","call","element","document","createElement","render","target","ulElement_","collapsed_","collapsed","undefined","overrideCollapsible_","collapsible","collapsible_","className","tipLabel","collapseLabel","collapseLabel_","textContent","label","label_","activeLabel","button","setAttribute","title","appendChild","addEventListener","CLICK","handleClick_","bind","cssClasses","renderedAttributions_","renderedVisible_","prototype","collectSourceAttributions_","frameState","lookup","visibleAttributions","layerStatesArray","i","ii","length","layerState","viewState","source","layer","getSource","attributionGetter","getAttributions","attributions","getAttributionsCollapsible","setCollapsible","Array","isArray","j","jj","push","updateElement_","style","display","visible","innerHTML","event","preventDefault","handleToggle_","classList","toggle","getCollapsible","setCollapsed","getCollapsed","mapEvent"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/control/Attribution.js"],"sourcesContent":["/**\n * @module ol/control/Attribution\n */\nimport Control from './Control.js';\nimport EventType from '../events/EventType.js';\nimport {CLASS_COLLAPSED, CLASS_CONTROL, CLASS_UNSELECTABLE} from '../css.js';\nimport {equals} from '../array.js';\nimport {inView} from '../layer/Layer.js';\nimport {removeChildren, replaceNode} from '../dom.js';\n\n/**\n * @typedef {Object} Options\n * @property {string} [className='ol-attribution'] CSS class name.\n * @property {HTMLElement|string} [target] Specify a target if you\n * want the control to be rendered outside of the map's\n * viewport.\n * @property {boolean} [collapsible] Specify if attributions can\n * be collapsed. If not specified, sources control this behavior with their\n * `attributionsCollapsible` setting.\n * @property {boolean} [collapsed=true] Specify if attributions should\n * be collapsed at startup.\n * @property {string} [tipLabel='Attributions'] Text label to use for the button tip.\n * @property {string} [label='i'] Text label to use for the\n * collapsed attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {string|HTMLElement} [collapseLabel='Â»'] Text label to use\n * for the expanded attributions button.\n * Instead of text, also an element (e.g. a `span` element) can be used.\n * @property {function(import(\"../MapEvent.js\").default):void} [render] Function called when\n * the control should be re-rendered. This is called in a `requestAnimationFrame`\n * callback.\n */\n\n/**\n * @classdesc\n * Control to show all the attributions associated with the layer sources\n * in the map. This control is one of the default controls included in maps.\n * By default it will show in the bottom right portion of the map, but this can\n * be changed by using a css selector for `.ol-attribution`.\n *\n * @api\n */\nclass Attribution extends Control {\n  /**\n   * @param {Options=} opt_options Attribution options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      element: document.createElement('div'),\n      render: options.render,\n      target: options.target,\n    });\n\n    /**\n     * @private\n     * @type {HTMLElement}\n     */\n    this.ulElement_ = document.createElement('ul');\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsed_ =\n      options.collapsed !== undefined ? options.collapsed : true;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.overrideCollapsible_ = options.collapsible !== undefined;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.collapsible_ =\n      options.collapsible !== undefined ? options.collapsible : true;\n\n    if (!this.collapsible_) {\n      this.collapsed_ = false;\n    }\n\n    const className =\n      options.className !== undefined ? options.className : 'ol-attribution';\n\n    const tipLabel =\n      options.tipLabel !== undefined ? options.tipLabel : 'Attributions';\n\n    const collapseLabel =\n      options.collapseLabel !== undefined ? options.collapseLabel : '\\u00BB';\n\n    if (typeof collapseLabel === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.collapseLabel_ = document.createElement('span');\n      this.collapseLabel_.textContent = collapseLabel;\n    } else {\n      this.collapseLabel_ = collapseLabel;\n    }\n\n    const label = options.label !== undefined ? options.label : 'i';\n\n    if (typeof label === 'string') {\n      /**\n       * @private\n       * @type {HTMLElement}\n       */\n      this.label_ = document.createElement('span');\n      this.label_.textContent = label;\n    } else {\n      this.label_ = label;\n    }\n\n    const activeLabel =\n      this.collapsible_ && !this.collapsed_ ? this.collapseLabel_ : this.label_;\n    const button = document.createElement('button');\n    button.setAttribute('type', 'button');\n    button.title = tipLabel;\n    button.appendChild(activeLabel);\n\n    button.addEventListener(\n      EventType.CLICK,\n      this.handleClick_.bind(this),\n      false\n    );\n\n    const cssClasses =\n      className +\n      ' ' +\n      CLASS_UNSELECTABLE +\n      ' ' +\n      CLASS_CONTROL +\n      (this.collapsed_ && this.collapsible_ ? ' ' + CLASS_COLLAPSED : '') +\n      (this.collapsible_ ? '' : ' ol-uncollapsible');\n    const element = this.element;\n    element.className = cssClasses;\n    element.appendChild(this.ulElement_);\n    element.appendChild(button);\n\n    /**\n     * A list of currently rendered resolutions.\n     * @type {Array<string>}\n     * @private\n     */\n    this.renderedAttributions_ = [];\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.renderedVisible_ = true;\n  }\n\n  /**\n   * Collect a list of visible attributions and set the collapsible state.\n   * @param {import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   * @return {Array<string>} Attributions.\n   * @private\n   */\n  collectSourceAttributions_(frameState) {\n    /**\n     * Used to determine if an attribution already exists.\n     * @type {!Object<string, boolean>}\n     */\n    const lookup = {};\n\n    /**\n     * A list of visible attributions.\n     * @type {Array<string>}\n     */\n    const visibleAttributions = [];\n\n    const layerStatesArray = frameState.layerStatesArray;\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layerState = layerStatesArray[i];\n      if (!inView(layerState, frameState.viewState)) {\n        continue;\n      }\n\n      const source = /** @type {import(\"../layer/Layer.js\").default} */ (layerState.layer).getSource();\n      if (!source) {\n        continue;\n      }\n\n      const attributionGetter = source.getAttributions();\n      if (!attributionGetter) {\n        continue;\n      }\n\n      const attributions = attributionGetter(frameState);\n      if (!attributions) {\n        continue;\n      }\n\n      if (\n        !this.overrideCollapsible_ &&\n        source.getAttributionsCollapsible() === false\n      ) {\n        this.setCollapsible(false);\n      }\n\n      if (Array.isArray(attributions)) {\n        for (let j = 0, jj = attributions.length; j < jj; ++j) {\n          if (!(attributions[j] in lookup)) {\n            visibleAttributions.push(attributions[j]);\n            lookup[attributions[j]] = true;\n          }\n        }\n      } else {\n        if (!(attributions in lookup)) {\n          visibleAttributions.push(attributions);\n          lookup[attributions] = true;\n        }\n      }\n    }\n    return visibleAttributions;\n  }\n\n  /**\n   * @private\n   * @param {?import(\"../PluggableMap.js\").FrameState} frameState Frame state.\n   */\n  updateElement_(frameState) {\n    if (!frameState) {\n      if (this.renderedVisible_) {\n        this.element.style.display = 'none';\n        this.renderedVisible_ = false;\n      }\n      return;\n    }\n\n    const attributions = this.collectSourceAttributions_(frameState);\n\n    const visible = attributions.length > 0;\n    if (this.renderedVisible_ != visible) {\n      this.element.style.display = visible ? '' : 'none';\n      this.renderedVisible_ = visible;\n    }\n\n    if (equals(attributions, this.renderedAttributions_)) {\n      return;\n    }\n\n    removeChildren(this.ulElement_);\n\n    // append the attributions\n    for (let i = 0, ii = attributions.length; i < ii; ++i) {\n      const element = document.createElement('li');\n      element.innerHTML = attributions[i];\n      this.ulElement_.appendChild(element);\n    }\n\n    this.renderedAttributions_ = attributions;\n  }\n\n  /**\n   * @param {MouseEvent} event The event to handle\n   * @private\n   */\n  handleClick_(event) {\n    event.preventDefault();\n    this.handleToggle_();\n  }\n\n  /**\n   * @private\n   */\n  handleToggle_() {\n    this.element.classList.toggle(CLASS_COLLAPSED);\n    if (this.collapsed_) {\n      replaceNode(this.collapseLabel_, this.label_);\n    } else {\n      replaceNode(this.label_, this.collapseLabel_);\n    }\n    this.collapsed_ = !this.collapsed_;\n  }\n\n  /**\n   * Return `true` if the attribution is collapsible, `false` otherwise.\n   * @return {boolean} True if the widget is collapsible.\n   * @api\n   */\n  getCollapsible() {\n    return this.collapsible_;\n  }\n\n  /**\n   * Set whether the attribution should be collapsible.\n   * @param {boolean} collapsible True if the widget is collapsible.\n   * @api\n   */\n  setCollapsible(collapsible) {\n    if (this.collapsible_ === collapsible) {\n      return;\n    }\n    this.collapsible_ = collapsible;\n    this.element.classList.toggle('ol-uncollapsible');\n    if (!collapsible && this.collapsed_) {\n      this.handleToggle_();\n    }\n  }\n\n  /**\n   * Collapse or expand the attribution according to the passed parameter. Will\n   * not do anything if the attribution isn't collapsible or if the current\n   * collapsed state is already the one requested.\n   * @param {boolean} collapsed True if the widget is collapsed.\n   * @api\n   */\n  setCollapsed(collapsed) {\n    if (!this.collapsible_ || this.collapsed_ === collapsed) {\n      return;\n    }\n    this.handleToggle_();\n  }\n\n  /**\n   * Return `true` when the attribution is currently collapsed or `false`\n   * otherwise.\n   * @return {boolean} True if the widget is collapsed.\n   * @api\n   */\n  getCollapsed() {\n    return this.collapsed_;\n  }\n\n  /**\n   * Update the attribution element.\n   * @param {import(\"../MapEvent.js\").default} mapEvent Map event.\n   * @override\n   */\n  render(mapEvent) {\n    this.updateElement_(mapEvent.frameState);\n  }\n}\n\nexport default Attribution;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}