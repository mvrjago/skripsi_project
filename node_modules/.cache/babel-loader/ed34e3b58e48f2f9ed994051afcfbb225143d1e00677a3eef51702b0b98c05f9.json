{"ast":null,"code":"/**\n * @module ol/structs/LRUCache\n */\nimport { assert } from '../asserts.js';\n/**\n * @typedef {Object} Entry\n * @property {string} key_\n * @property {Object} newer\n * @property {Object} older\n * @property {*} value_\n */\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nvar LRUCache = /** @class */function () {\n  /**\n   * @param {number=} opt_highWaterMark High water mark.\n   */\n  function LRUCache(opt_highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark = opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  LRUCache.prototype.canExpireCache = function () {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  };\n  /**\n   * FIXME empty description for jsdoc\n   */\n  LRUCache.prototype.clear = function () {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  };\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  LRUCache.prototype.containsKey = function (key) {\n    return this.entries_.hasOwnProperty(key);\n  };\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  LRUCache.prototype.forEach = function (f) {\n    var entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  };\n  /**\n   * @param {string} key Key.\n   * @param {*=} opt_options Options (reserverd for subclasses).\n   * @return {T} Value.\n   */\n  LRUCache.prototype.get = function (key, opt_options) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */this.oldest_.newer;\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  };\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  LRUCache.prototype.remove = function (key) {\n    var entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */entry.older;\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */entry.newer;\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @return {number} Count.\n   */\n  LRUCache.prototype.getCount = function () {\n    return this.count_;\n  };\n  /**\n   * @return {Array<string>} Keys.\n   */\n  LRUCache.prototype.getKeys = function () {\n    var keys = new Array(this.count_);\n    var i = 0;\n    var entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  };\n  /**\n   * @return {Array<T>} Values.\n   */\n  LRUCache.prototype.getValues = function () {\n    var values = new Array(this.count_);\n    var i = 0;\n    var entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  };\n  /**\n   * @return {T} Last value.\n   */\n  LRUCache.prototype.peekLast = function () {\n    return this.oldest_.value_;\n  };\n  /**\n   * @return {string} Last key.\n   */\n  LRUCache.prototype.peekLastKey = function () {\n    return this.oldest_.key_;\n  };\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  LRUCache.prototype.peekFirstKey = function () {\n    return this.newest_.key_;\n  };\n  /**\n   * @return {T} value Value.\n   */\n  LRUCache.prototype.pop = function () {\n    var entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */entry.newer;\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  LRUCache.prototype.replace = function (key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  };\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  LRUCache.prototype.set = function (key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n    var entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  };\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  LRUCache.prototype.setSize = function (size) {\n    this.highWaterMark = size;\n  };\n  return LRUCache;\n}();\nexport default LRUCache;","map":{"version":3,"names":["assert","LRUCache","opt_highWaterMark","highWaterMark","undefined","count_","entries_","oldest_","newest_","prototype","canExpireCache","getCount","clear","containsKey","key","hasOwnProperty","forEach","f","entry","value_","key_","newer","get","opt_options","older","remove","getKeys","keys","Array","i","getValues","values","peekLast","peekLastKey","peekFirstKey","pop","replace","value","set","setSize","size"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/structs/LRUCache.js"],"sourcesContent":["/**\n * @module ol/structs/LRUCache\n */\n\nimport {assert} from '../asserts.js';\n\n/**\n * @typedef {Object} Entry\n * @property {string} key_\n * @property {Object} newer\n * @property {Object} older\n * @property {*} value_\n */\n\n/**\n * @classdesc\n * Implements a Least-Recently-Used cache where the keys do not conflict with\n * Object's properties (e.g. 'hasOwnProperty' is not allowed as a key). Expiring\n * items from the cache is the responsibility of the user.\n *\n * @fires import(\"../events/Event.js\").default\n * @template T\n */\nclass LRUCache {\n  /**\n   * @param {number=} opt_highWaterMark High water mark.\n   */\n  constructor(opt_highWaterMark) {\n    /**\n     * Desired max cache size after expireCache(). If set to 0, no cache entries\n     * will be pruned at all.\n     * @type {number}\n     */\n    this.highWaterMark =\n      opt_highWaterMark !== undefined ? opt_highWaterMark : 2048;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.count_ = 0;\n\n    /**\n     * @private\n     * @type {!Object<string, Entry>}\n     */\n    this.entries_ = {};\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.oldest_ = null;\n\n    /**\n     * @private\n     * @type {?Entry}\n     */\n    this.newest_ = null;\n  }\n\n  /**\n   * @return {boolean} Can expire cache.\n   */\n  canExpireCache() {\n    return this.highWaterMark > 0 && this.getCount() > this.highWaterMark;\n  }\n\n  /**\n   * FIXME empty description for jsdoc\n   */\n  clear() {\n    this.count_ = 0;\n    this.entries_ = {};\n    this.oldest_ = null;\n    this.newest_ = null;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @return {boolean} Contains key.\n   */\n  containsKey(key) {\n    return this.entries_.hasOwnProperty(key);\n  }\n\n  /**\n   * @param {function(T, string, LRUCache<T>): ?} f The function\n   *     to call for every entry from the oldest to the newer. This function takes\n   *     3 arguments (the entry value, the entry key and the LRUCache object).\n   *     The return value is ignored.\n   */\n  forEach(f) {\n    let entry = this.oldest_;\n    while (entry) {\n      f(entry.value_, entry.key_, this);\n      entry = entry.newer;\n    }\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {*=} opt_options Options (reserverd for subclasses).\n   * @return {T} Value.\n   */\n  get(key, opt_options) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      return entry.value_;\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (this.oldest_.newer);\n      this.oldest_.older = null;\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    entry.newer = null;\n    entry.older = this.newest_;\n    this.newest_.newer = entry;\n    this.newest_ = entry;\n    return entry.value_;\n  }\n\n  /**\n   * Remove an entry from the cache.\n   * @param {string} key The entry key.\n   * @return {T} The removed entry.\n   */\n  remove(key) {\n    const entry = this.entries_[key];\n    assert(entry !== undefined, 15); // Tried to get a value for a key that does not exist in the cache\n    if (entry === this.newest_) {\n      this.newest_ = /** @type {Entry} */ (entry.older);\n      if (this.newest_) {\n        this.newest_.newer = null;\n      }\n    } else if (entry === this.oldest_) {\n      this.oldest_ = /** @type {Entry} */ (entry.newer);\n      if (this.oldest_) {\n        this.oldest_.older = null;\n      }\n    } else {\n      entry.newer.older = entry.older;\n      entry.older.newer = entry.newer;\n    }\n    delete this.entries_[key];\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @return {number} Count.\n   */\n  getCount() {\n    return this.count_;\n  }\n\n  /**\n   * @return {Array<string>} Keys.\n   */\n  getKeys() {\n    const keys = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      keys[i++] = entry.key_;\n    }\n    return keys;\n  }\n\n  /**\n   * @return {Array<T>} Values.\n   */\n  getValues() {\n    const values = new Array(this.count_);\n    let i = 0;\n    let entry;\n    for (entry = this.newest_; entry; entry = entry.older) {\n      values[i++] = entry.value_;\n    }\n    return values;\n  }\n\n  /**\n   * @return {T} Last value.\n   */\n  peekLast() {\n    return this.oldest_.value_;\n  }\n\n  /**\n   * @return {string} Last key.\n   */\n  peekLastKey() {\n    return this.oldest_.key_;\n  }\n\n  /**\n   * Get the key of the newest item in the cache.  Throws if the cache is empty.\n   * @return {string} The newest key.\n   */\n  peekFirstKey() {\n    return this.newest_.key_;\n  }\n\n  /**\n   * @return {T} value Value.\n   */\n  pop() {\n    const entry = this.oldest_;\n    delete this.entries_[entry.key_];\n    if (entry.newer) {\n      entry.newer.older = null;\n    }\n    this.oldest_ = /** @type {Entry} */ (entry.newer);\n    if (!this.oldest_) {\n      this.newest_ = null;\n    }\n    --this.count_;\n    return entry.value_;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  replace(key, value) {\n    this.get(key); // update `newest_`\n    this.entries_[key].value_ = value;\n  }\n\n  /**\n   * @param {string} key Key.\n   * @param {T} value Value.\n   */\n  set(key, value) {\n    assert(!(key in this.entries_), 16); // Tried to set a value for a key that is used already\n    const entry = {\n      key_: key,\n      newer: null,\n      older: this.newest_,\n      value_: value,\n    };\n    if (!this.newest_) {\n      this.oldest_ = entry;\n    } else {\n      this.newest_.newer = entry;\n    }\n    this.newest_ = entry;\n    this.entries_[key] = entry;\n    ++this.count_;\n  }\n\n  /**\n   * Set a maximum number of entries for the cache.\n   * @param {number} size Cache size.\n   * @api\n   */\n  setSize(size) {\n    this.highWaterMark = size;\n  }\n}\n\nexport default LRUCache;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}