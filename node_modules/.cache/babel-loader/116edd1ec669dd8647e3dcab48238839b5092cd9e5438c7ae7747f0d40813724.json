{"ast":null,"code":"/**\n * @module ol/source/ImageArcGISRest\n */\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport EventType from '../events/EventType.js';\nimport ImageSource, { defaultImageLoadFunction } from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport { appendParams } from '../uri.js';\nimport { assert } from '../asserts.js';\nimport { assign } from '../obj.js';\nimport { containsExtent, getHeight, getWidth } from '../extent.js';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nvar ImageArcGISRest = /** @class */function (_super) {\n  __extends(ImageArcGISRest, _super);\n  /**\n   * @param {Options=} opt_options Image ArcGIS Rest Options.\n   */\n  function ImageArcGISRest(opt_options) {\n    var _this = this;\n    var options = opt_options ? opt_options : {};\n    _this = _super.call(this, {\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions\n    }) || this;\n    /**\n     * @private\n     * @type {?string}\n     */\n    _this.crossOrigin_ = options.crossOrigin !== undefined ? options.crossOrigin : null;\n    /**\n     * @private\n     * @type {boolean}\n     */\n    _this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    _this.url_ = options.url;\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    _this.imageLoadFunction_ = options.imageLoadFunction !== undefined ? options.imageLoadFunction : defaultImageLoadFunction;\n    /**\n     * @private\n     * @type {!Object}\n     */\n    _this.params_ = options.params || {};\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    _this.image_ = null;\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    _this.imageSize_ = [0, 0];\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.renderedRevision_ = 0;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n    return _this;\n  }\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  ImageArcGISRest.prototype.getParams = function () {\n    return this.params_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  ImageArcGISRest.prototype.getImageInternal = function (extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n    var image = this.image_;\n    if (image && this.renderedRevision_ == this.getRevision() && image.getResolution() == resolution && image.getPixelRatio() == pixelRatio && containsExtent(image.getExtent(), extent)) {\n      return image;\n    }\n    var params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true\n    };\n    assign(params, this.params_);\n    extent = extent.slice();\n    var centerX = (extent[0] + extent[2]) / 2;\n    var centerY = (extent[1] + extent[3]) / 2;\n    if (this.ratio_ != 1) {\n      var halfWidth = this.ratio_ * getWidth(extent) / 2;\n      var halfHeight = this.ratio_ * getHeight(extent) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n    var imageResolution = resolution / pixelRatio;\n    // Compute an integer width and height.\n    var width = Math.ceil(getWidth(extent) / imageResolution);\n    var height = Math.ceil(getHeight(extent) / imageResolution);\n    // Modify the extent to match the integer width and height.\n    extent[0] = centerX - imageResolution * width / 2;\n    extent[2] = centerX + imageResolution * width / 2;\n    extent[1] = centerY - imageResolution * height / 2;\n    extent[3] = centerY + imageResolution * height / 2;\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n    var url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio, projection, params);\n    this.image_ = new ImageWrapper(extent, resolution, pixelRatio, url, this.crossOrigin_, this.imageLoadFunction_);\n    this.renderedRevision_ = this.getRevision();\n    this.image_.addEventListener(EventType.CHANGE, this.handleImageChange.bind(this));\n    return this.image_;\n  };\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  ImageArcGISRest.prototype.getImageLoadFunction = function () {\n    return this.imageLoadFunction_;\n  };\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  ImageArcGISRest.prototype.getRequestUrl_ = function (extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    var srid = projection.getCode().split(':').pop();\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n    var url = this.url_;\n    var modifiedUrl = url.replace(/MapServer\\/?$/, 'MapServer/export').replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n\n    return appendParams(modifiedUrl, params);\n  };\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  ImageArcGISRest.prototype.getUrl = function () {\n    return this.url_;\n  };\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  ImageArcGISRest.prototype.setImageLoadFunction = function (imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  };\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  ImageArcGISRest.prototype.setUrl = function (url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  };\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  ImageArcGISRest.prototype.updateParams = function (params) {\n    assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  };\n  return ImageArcGISRest;\n}(ImageSource);\nexport default ImageArcGISRest;","map":{"version":3,"names":["EventType","ImageSource","defaultImageLoadFunction","ImageWrapper","appendParams","assert","assign","containsExtent","getHeight","getWidth","ImageArcGISRest","_super","__extends","opt_options","_this","options","call","attributions","imageSmoothing","projection","resolutions","crossOrigin_","crossOrigin","undefined","hidpi_","hidpi","url_","url","imageLoadFunction_","imageLoadFunction","params_","params","image_","imageSize_","renderedRevision_","ratio_","ratio","prototype","getParams","getImageInternal","extent","resolution","pixelRatio","findNearestResolution","image","getRevision","getResolution","getPixelRatio","getExtent","slice","centerX","centerY","halfWidth","halfHeight","imageResolution","width","Math","ceil","height","getRequestUrl_","addEventListener","CHANGE","handleImageChange","bind","getImageLoadFunction","size","srid","getCode","split","pop","join","round","modifiedUrl","replace","getUrl","setImageLoadFunction","changed","setUrl","updateParams"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/ImageArcGISRest.js"],"sourcesContent":["/**\n * @module ol/source/ImageArcGISRest\n */\n\nimport EventType from '../events/EventType.js';\nimport ImageSource, {defaultImageLoadFunction} from './Image.js';\nimport ImageWrapper from '../Image.js';\nimport {appendParams} from '../uri.js';\nimport {assert} from '../asserts.js';\nimport {assign} from '../obj.js';\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\n * the remote server.\n * @property {import(\"../Image.js\").LoadFunction} [imageLoadFunction] Optional function to load an image given\n * a URL.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {Object<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX`, `SIZE`, `BBOXSR`, and `IMAGESR`\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\n * {@link http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/}\n * for further reference.\n * @property {import(\"../proj.js\").ProjectionLike} [projection] Projection. Default is the view projection.\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\n * `2` means twice the size of the map viewport, and so on.\n * @property {Array<number>} [resolutions] Resolutions. If specified, requests will be made for\n * these resolutions only.\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\n * should include /MapServer or /ImageServer.\n */\n\n/**\n * @classdesc\n * Source for data from ArcGIS Rest services providing single, untiled images.\n * Useful when underlying map service has labels.\n *\n * If underlying map service is not using labels,\n * take advantage of ol image caching and use\n * {@link module:ol/source/TileArcGISRest} data source.\n *\n * @fires module:ol/source/Image.ImageSourceEvent\n * @api\n */\nclass ImageArcGISRest extends ImageSource {\n  /**\n   * @param {Options=} opt_options Image ArcGIS Rest Options.\n   */\n  constructor(opt_options) {\n    const options = opt_options ? opt_options : {};\n\n    super({\n      attributions: options.attributions,\n      imageSmoothing: options.imageSmoothing,\n      projection: options.projection,\n      resolutions: options.resolutions,\n    });\n\n    /**\n     * @private\n     * @type {?string}\n     */\n    this.crossOrigin_ =\n      options.crossOrigin !== undefined ? options.crossOrigin : null;\n\n    /**\n     * @private\n     * @type {boolean}\n     */\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\n\n    /**\n     * @private\n     * @type {string|undefined}\n     */\n    this.url_ = options.url;\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").LoadFunction}\n     */\n    this.imageLoadFunction_ =\n      options.imageLoadFunction !== undefined\n        ? options.imageLoadFunction\n        : defaultImageLoadFunction;\n\n    /**\n     * @private\n     * @type {!Object}\n     */\n    this.params_ = options.params || {};\n\n    /**\n     * @private\n     * @type {import(\"../Image.js\").default}\n     */\n    this.image_ = null;\n\n    /**\n     * @private\n     * @type {import(\"../size.js\").Size}\n     */\n    this.imageSize_ = [0, 0];\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.renderedRevision_ = 0;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\n  }\n\n  /**\n   * Get the user-provided params, i.e. those passed to the constructor through\n   * the \"params\" option, and possibly updated using the updateParams method.\n   * @return {Object} Params.\n   * @api\n   */\n  getParams() {\n    return this.params_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {number} resolution Resolution.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @return {import(\"../Image.js\").default} Single image.\n   */\n  getImageInternal(extent, resolution, pixelRatio, projection) {\n    if (this.url_ === undefined) {\n      return null;\n    }\n\n    resolution = this.findNearestResolution(resolution);\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\n\n    const image = this.image_;\n    if (\n      image &&\n      this.renderedRevision_ == this.getRevision() &&\n      image.getResolution() == resolution &&\n      image.getPixelRatio() == pixelRatio &&\n      containsExtent(image.getExtent(), extent)\n    ) {\n      return image;\n    }\n\n    const params = {\n      'F': 'image',\n      'FORMAT': 'PNG32',\n      'TRANSPARENT': true,\n    };\n    assign(params, this.params_);\n\n    extent = extent.slice();\n    const centerX = (extent[0] + extent[2]) / 2;\n    const centerY = (extent[1] + extent[3]) / 2;\n    if (this.ratio_ != 1) {\n      const halfWidth = (this.ratio_ * getWidth(extent)) / 2;\n      const halfHeight = (this.ratio_ * getHeight(extent)) / 2;\n      extent[0] = centerX - halfWidth;\n      extent[1] = centerY - halfHeight;\n      extent[2] = centerX + halfWidth;\n      extent[3] = centerY + halfHeight;\n    }\n\n    const imageResolution = resolution / pixelRatio;\n\n    // Compute an integer width and height.\n    const width = Math.ceil(getWidth(extent) / imageResolution);\n    const height = Math.ceil(getHeight(extent) / imageResolution);\n\n    // Modify the extent to match the integer width and height.\n    extent[0] = centerX - (imageResolution * width) / 2;\n    extent[2] = centerX + (imageResolution * width) / 2;\n    extent[1] = centerY - (imageResolution * height) / 2;\n    extent[3] = centerY + (imageResolution * height) / 2;\n\n    this.imageSize_[0] = width;\n    this.imageSize_[1] = height;\n\n    const url = this.getRequestUrl_(\n      extent,\n      this.imageSize_,\n      pixelRatio,\n      projection,\n      params\n    );\n\n    this.image_ = new ImageWrapper(\n      extent,\n      resolution,\n      pixelRatio,\n      url,\n      this.crossOrigin_,\n      this.imageLoadFunction_\n    );\n\n    this.renderedRevision_ = this.getRevision();\n\n    this.image_.addEventListener(\n      EventType.CHANGE,\n      this.handleImageChange.bind(this)\n    );\n\n    return this.image_;\n  }\n\n  /**\n   * Return the image load function of the source.\n   * @return {import(\"../Image.js\").LoadFunction} The image load function.\n   * @api\n   */\n  getImageLoadFunction() {\n    return this.imageLoadFunction_;\n  }\n\n  /**\n   * @param {import(\"../extent.js\").Extent} extent Extent.\n   * @param {import(\"../size.js\").Size} size Size.\n   * @param {number} pixelRatio Pixel ratio.\n   * @param {import(\"../proj/Projection.js\").default} projection Projection.\n   * @param {Object} params Params.\n   * @return {string} Request URL.\n   * @private\n   */\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\n    // ArcGIS Server only wants the numeric portion of the projection ID.\n    const srid = projection.getCode().split(':').pop();\n\n    params['SIZE'] = size[0] + ',' + size[1];\n    params['BBOX'] = extent.join(',');\n    params['BBOXSR'] = srid;\n    params['IMAGESR'] = srid;\n    params['DPI'] = Math.round(90 * pixelRatio);\n\n    const url = this.url_;\n\n    const modifiedUrl = url\n      .replace(/MapServer\\/?$/, 'MapServer/export')\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\n    if (modifiedUrl == url) {\n      assert(false, 50); // `options.featureTypes` should be an Array\n    }\n    return appendParams(modifiedUrl, params);\n  }\n\n  /**\n   * Return the URL used for this ArcGIS source.\n   * @return {string|undefined} URL.\n   * @api\n   */\n  getUrl() {\n    return this.url_;\n  }\n\n  /**\n   * Set the image load function of the source.\n   * @param {import(\"../Image.js\").LoadFunction} imageLoadFunction Image load function.\n   * @api\n   */\n  setImageLoadFunction(imageLoadFunction) {\n    this.image_ = null;\n    this.imageLoadFunction_ = imageLoadFunction;\n    this.changed();\n  }\n\n  /**\n   * Set the URL to use for requests.\n   * @param {string|undefined} url URL.\n   * @api\n   */\n  setUrl(url) {\n    if (url != this.url_) {\n      this.url_ = url;\n      this.image_ = null;\n      this.changed();\n    }\n  }\n\n  /**\n   * Update the user-provided params.\n   * @param {Object} params Params.\n   * @api\n   */\n  updateParams(params) {\n    assign(this.params_, params);\n    this.image_ = null;\n    this.changed();\n  }\n}\n\nexport default ImageArcGISRest;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}