{"ast":null,"code":"'use strict';\n\n/**\n * config loader module to load user\n * environment configurations\n * @module lib/config\n */\nconst fs = require('../utils/fs');\nconst obj = require('../utils/obj');\nconst _ = require('lodash');\nconst path = require('path');\nconst log = require('../utils/log');\nconst ERRORS = require('../text/errors.json');\n\n/**\n * load common and environment configurations\n * @param {string} configPath config directory path\n * @param {string} env environment type\n * e.g development, staging...etc\n * @returns {object} the configuration object\n */\nasync function load(configPath, env) {\n  // get config folder content\n  const content = await loadConfigContent(configPath);\n\n  // load common configurations\n  const commonConfigInfo = loadConfigModules(content.files, configPath);\n\n  // get environment related config folder content\n  const envConfig = await loadEnvConfig(configPath, env);\n\n  // load environment configurations\n  let envConfigInfo = null;\n  if (envConfig) {\n    envConfigInfo = loadConfigModules(envConfig.content, envConfig.dirPath);\n  }\n  return buildConfigObject(commonConfigInfo, envConfigInfo);\n}\n\n/**\n * load all the config directory content\n * @param {string} configPath the path of the config directory\n * @returns {object} contains files and folders,\n * which is all the config directory content\n */\nasync function loadConfigContent(configPath) {\n  try {\n    const content = await fs.dirContent(configPath);\n    return content;\n  } catch (e) {\n    e.message = `while trying to load the user config directory ${e.message}`;\n    throw e;\n  }\n}\n\n/**\n * load the environment configurations\n * @param {string} configPath the path\n * to the config directory\n * @param {string} env the environment\n * e.g development, staging...etc\n * @returns {object} object contains the config directory\n * content and the directory path\n */\nasync function loadEnvConfig(configPath, env) {\n  if (!env) {\n    return null;\n  }\n  const dirPath = path.resolve(configPath, env);\n  if (await fs.canRead(dirPath)) {\n    const content = await fs.dirContent(dirPath);\n    return {\n      content: content.files,\n      dirPath\n    };\n  } else {\n    log.warn(ERRORS.NO_ENV_CONFIG);\n    return null;\n  }\n}\n\n/**\n * load user configurations from a given folder\n * @param {string[]} configFiles string array contains config files path\n * @param {string} configPath the main config folder path\n * @returns {object[]} array of objects contains all the information about the loaded config files\n * [ name, path, extension, data ]\n */\nfunction loadConfigModules(configFiles, configPath) {\n  if (_.isEmpty(configFiles)) {\n    return null;\n  }\n\n  // resolve config files paths\n  const configPaths = [];\n  fs.resolvePaths(configFiles, configPath, resolvedPath => configPaths.push(resolvedPath));\n\n  // load all the config files from the paths string array\n  const configs = fs.loadModules(configPaths, true);\n  return configs;\n}\n\n/**\n * takes common and env configurations arrays\n * of the loaded config files information\n * @param {array[]} common loaded common configuration\n * @param {array[]} env loaded common configuration\n * @returns {object} merged configuration object\n */\nfunction buildConfigObject(common, env) {\n  common = obj.arrayToObject(common, 'name', 'data');\n  env = obj.arrayToObject(env, 'name', 'data');\n  return _.merge(common, env);\n}\nmodule.exports = {\n  load,\n  // exposing those functions for the test cases only\n  _test: {\n    load,\n    loadConfigModules,\n    buildConfigObject\n  }\n};","map":{"version":3,"names":["fs","require","obj","_","path","log","ERRORS","load","configPath","env","content","loadConfigContent","commonConfigInfo","loadConfigModules","files","envConfig","loadEnvConfig","envConfigInfo","dirPath","buildConfigObject","dirContent","e","message","resolve","canRead","warn","NO_ENV_CONFIG","configFiles","isEmpty","configPaths","resolvePaths","resolvedPath","push","configs","loadModules","common","arrayToObject","merge","module","exports","_test"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/arc.js/lib/config.js"],"sourcesContent":["'use strict';\n\n/**\n * config loader module to load user\n * environment configurations\n * @module lib/config\n */\n\nconst fs = require('../utils/fs');\nconst obj = require('../utils/obj');\nconst _ = require('lodash');\nconst path = require('path');\nconst log = require('../utils/log');\nconst ERRORS = require('../text/errors.json');\n\n\n/**\n * load common and environment configurations\n * @param {string} configPath config directory path\n * @param {string} env environment type\n * e.g development, staging...etc\n * @returns {object} the configuration object\n */\nasync function load (configPath, env) {\n  // get config folder content\n  const content = await loadConfigContent(configPath);\n\n  // load common configurations\n  const commonConfigInfo = loadConfigModules(content.files, configPath);\n\n  // get environment related config folder content\n  const envConfig = await loadEnvConfig(configPath, env);\n\n  // load environment configurations\n  let envConfigInfo = null;\n\n  if (envConfig) {\n    envConfigInfo = loadConfigModules(envConfig.content, envConfig.dirPath);\n  }\n\n  return buildConfigObject(commonConfigInfo, envConfigInfo);\n}\n\n/**\n * load all the config directory content\n * @param {string} configPath the path of the config directory\n * @returns {object} contains files and folders,\n * which is all the config directory content\n */\nasync function loadConfigContent (configPath) {\n  try {\n    const content = await fs.dirContent(configPath);\n    return content;\n  }\n  catch (e) {\n    e.message = `while trying to load the user config directory ${e.message}`;\n    throw e;\n  }\n}\n\n/**\n * load the environment configurations\n * @param {string} configPath the path\n * to the config directory\n * @param {string} env the environment\n * e.g development, staging...etc\n * @returns {object} object contains the config directory\n * content and the directory path\n */\nasync function loadEnvConfig (configPath, env) {\n  if (!env) {\n    return null;\n  }\n\n  const dirPath = path.resolve(configPath, env);\n\n  if (await fs.canRead(dirPath)) {\n    const content = await fs.dirContent(dirPath);\n    return { content: content.files, dirPath };\n  }\n  else {\n    log.warn(ERRORS.NO_ENV_CONFIG);\n    return null;\n  }\n}\n\n/**\n * load user configurations from a given folder\n * @param {string[]} configFiles string array contains config files path\n * @param {string} configPath the main config folder path\n * @returns {object[]} array of objects contains all the information about the loaded config files\n * [ name, path, extension, data ]\n */\nfunction loadConfigModules (configFiles, configPath) {\n  if (_.isEmpty(configFiles)) {\n    return null;\n  }\n\n  // resolve config files paths\n  const configPaths = [];\n  fs.resolvePaths(configFiles, configPath, (resolvedPath) =>\n    configPaths.push(resolvedPath)\n  );\n\n  // load all the config files from the paths string array\n  const configs = fs.loadModules(configPaths, true);\n\n  return configs;\n}\n\n\n/**\n * takes common and env configurations arrays\n * of the loaded config files information\n * @param {array[]} common loaded common configuration\n * @param {array[]} env loaded common configuration\n * @returns {object} merged configuration object\n */\nfunction buildConfigObject (common, env) {\n  common = obj.arrayToObject(common, 'name', 'data');\n  env = obj.arrayToObject(env, 'name', 'data');\n  return _.merge(common, env);\n}\n\n\nmodule.exports = {\n  load,\n\n  // exposing those functions for the test cases only\n  _test: {\n    load,\n    loadConfigModules,\n    buildConfigObject\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}