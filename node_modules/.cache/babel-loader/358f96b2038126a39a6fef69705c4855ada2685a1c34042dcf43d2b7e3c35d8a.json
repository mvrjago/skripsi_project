{"ast":null,"code":"/**\n * @module ol/featureloader\n */\nimport FormatType from './format/FormatType.js';\nimport { VOID } from './functions.js';\n/**\n *\n * @type {boolean}\n * @private\n */\nvar withCredentials = false;\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,\n * a `{number}` representing the resolution (map units per pixel) and an\n * {@link module:ol/proj/Projection} for the projection  as\n * arguments. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default), import(\"./extent.js\").Extent, number,\n *                    import(\"./proj/Projection.js\").default): void} FeatureLoader\n * @api\n */\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {function(this:import(\"./VectorTile.js\").default, Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default, import(\"./extent.js\").Extent): void|function(this:import(\"./source/Vector\").default, Array<import(\"./Feature.js\").default>): void} success\n *     Function called with the loaded features and optionally with the data\n *     projection. Called with the vector tile or source as `this`.\n * @param {function(this:import(\"./VectorTile.js\").default): void|function(this:import(\"./source/Vector\").default): void} failure\n *     Function called when loading failed. Called with the vector tile or\n *     source as `this`.\n * @return {FeatureLoader} The feature loader.\n */\nexport function loadFeaturesXhr(url, format, success, failure) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n     */\n    function (extent, resolution, projection) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', typeof url === 'function' ? url(extent, resolution, projection) : url, true);\n      if (format.getType() == FormatType.ARRAY_BUFFER) {\n        xhr.responseType = 'arraybuffer';\n      }\n      xhr.withCredentials = withCredentials;\n      /**\n       * @param {Event} event Event.\n       * @private\n       */\n      xhr.onload = function (event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || xhr.status >= 200 && xhr.status < 300) {\n          var type = format.getType();\n          /** @type {Document|Node|Object|string|undefined} */\n          var source = void 0;\n          if (type == FormatType.JSON || type == FormatType.TEXT) {\n            source = xhr.responseText;\n          } else if (type == FormatType.XML) {\n            source = xhr.responseXML;\n            if (!source) {\n              source = new DOMParser().parseFromString(xhr.responseText, 'application/xml');\n            }\n          } else if (type == FormatType.ARRAY_BUFFER) {\n            source = /** @type {ArrayBuffer} */xhr.response;\n          }\n          if (source) {\n            success.call(this, format.readFeatures(source, {\n              extent: extent,\n              featureProjection: projection\n            }), format.readProjection(source));\n          } else {\n            failure.call(this);\n          }\n        } else {\n          failure.call(this);\n        }\n      }.bind(this);\n      /**\n       * @private\n       */\n      xhr.onerror = function () {\n        failure.call(this);\n      }.bind(this);\n      xhr.send();\n    }\n  );\n}\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  return loadFeaturesXhr(url, format,\n  /**\n   * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n   * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n   * projection.\n   * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n   */\n  function (features, dataProjection) {\n    var sourceOrTile = /** @type {?} */this;\n    if (typeof sourceOrTile.addFeatures === 'function') {\n      /** @type {import(\"./source/Vector\").default} */sourceOrTile.addFeatures(features);\n    }\n  }, /* FIXME handle error */VOID);\n}\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\nexport function setWithCredentials(xhrWithCredentials) {\n  withCredentials = xhrWithCredentials;\n}","map":{"version":3,"names":["FormatType","VOID","withCredentials","loadFeaturesXhr","url","format","success","failure","extent","resolution","projection","xhr","XMLHttpRequest","open","getType","ARRAY_BUFFER","responseType","onload","event","status","type","source","JSON","TEXT","responseText","XML","responseXML","DOMParser","parseFromString","response","call","readFeatures","featureProjection","readProjection","bind","onerror","send","features","dataProjection","sourceOrTile","addFeatures","setWithCredentials","xhrWithCredentials"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/featureloader.js"],"sourcesContent":["/**\n * @module ol/featureloader\n */\nimport FormatType from './format/FormatType.js';\nimport {VOID} from './functions.js';\n\n/**\n *\n * @type {boolean}\n * @private\n */\nlet withCredentials = false;\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * load features.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area to be loaded,\n * a `{number}` representing the resolution (map units per pixel) and an\n * {@link module:ol/proj/Projection} for the projection  as\n * arguments. `this` within the function is bound to the\n * {@link module:ol/source/Vector} it's called from.\n *\n * The function is responsible for loading the features and adding them to the\n * source.\n * @typedef {function(this:(import(\"./source/Vector\").default|import(\"./VectorTile.js\").default), import(\"./extent.js\").Extent, number,\n *                    import(\"./proj/Projection.js\").default): void} FeatureLoader\n * @api\n */\n\n/**\n * {@link module:ol/source/Vector} sources use a function of this type to\n * get the url to load features from.\n *\n * This function takes an {@link module:ol/extent~Extent} representing the area\n * to be loaded, a `{number}` representing the resolution (map units per pixel)\n * and an {@link module:ol/proj/Projection} for the projection  as\n * arguments and returns a `{string}` representing the URL.\n * @typedef {function(import(\"./extent.js\").Extent, number, import(\"./proj/Projection.js\").default): string} FeatureUrlFunction\n * @api\n */\n\n/**\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @param {function(this:import(\"./VectorTile.js\").default, Array<import(\"./Feature.js\").default>, import(\"./proj/Projection.js\").default, import(\"./extent.js\").Extent): void|function(this:import(\"./source/Vector\").default, Array<import(\"./Feature.js\").default>): void} success\n *     Function called with the loaded features and optionally with the data\n *     projection. Called with the vector tile or source as `this`.\n * @param {function(this:import(\"./VectorTile.js\").default): void|function(this:import(\"./source/Vector\").default): void} failure\n *     Function called when loading failed. Called with the vector tile or\n *     source as `this`.\n * @return {FeatureLoader} The feature loader.\n */\nexport function loadFeaturesXhr(url, format, success, failure) {\n  return (\n    /**\n     * @param {import(\"./extent.js\").Extent} extent Extent.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./proj/Projection.js\").default} projection Projection.\n     * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n     */\n    function (extent, resolution, projection) {\n      const xhr = new XMLHttpRequest();\n      xhr.open(\n        'GET',\n        typeof url === 'function' ? url(extent, resolution, projection) : url,\n        true\n      );\n      if (format.getType() == FormatType.ARRAY_BUFFER) {\n        xhr.responseType = 'arraybuffer';\n      }\n      xhr.withCredentials = withCredentials;\n      /**\n       * @param {Event} event Event.\n       * @private\n       */\n      xhr.onload = function (event) {\n        // status will be 0 for file:// urls\n        if (!xhr.status || (xhr.status >= 200 && xhr.status < 300)) {\n          const type = format.getType();\n          /** @type {Document|Node|Object|string|undefined} */\n          let source;\n          if (type == FormatType.JSON || type == FormatType.TEXT) {\n            source = xhr.responseText;\n          } else if (type == FormatType.XML) {\n            source = xhr.responseXML;\n            if (!source) {\n              source = new DOMParser().parseFromString(\n                xhr.responseText,\n                'application/xml'\n              );\n            }\n          } else if (type == FormatType.ARRAY_BUFFER) {\n            source = /** @type {ArrayBuffer} */ (xhr.response);\n          }\n          if (source) {\n            success.call(\n              this,\n              format.readFeatures(source, {\n                extent: extent,\n                featureProjection: projection,\n              }),\n              format.readProjection(source)\n            );\n          } else {\n            failure.call(this);\n          }\n        } else {\n          failure.call(this);\n        }\n      }.bind(this);\n      /**\n       * @private\n       */\n      xhr.onerror = function () {\n        failure.call(this);\n      }.bind(this);\n      xhr.send();\n    }\n  );\n}\n\n/**\n * Create an XHR feature loader for a `url` and `format`. The feature loader\n * loads features (with XHR), parses the features, and adds them to the\n * vector source.\n * @param {string|FeatureUrlFunction} url Feature URL service.\n * @param {import(\"./format/Feature.js\").default} format Feature format.\n * @return {FeatureLoader} The feature loader.\n * @api\n */\nexport function xhr(url, format) {\n  return loadFeaturesXhr(\n    url,\n    format,\n    /**\n     * @param {Array<import(\"./Feature.js\").default>} features The loaded features.\n     * @param {import(\"./proj/Projection.js\").default} dataProjection Data\n     * projection.\n     * @this {import(\"./source/Vector\").default|import(\"./VectorTile.js\").default}\n     */\n    function (features, dataProjection) {\n      const sourceOrTile = /** @type {?} */ (this);\n      if (typeof sourceOrTile.addFeatures === 'function') {\n        /** @type {import(\"./source/Vector\").default} */ (sourceOrTile).addFeatures(\n          features\n        );\n      }\n    },\n    /* FIXME handle error */ VOID\n  );\n}\n\n/**\n * Setter for the withCredentials configuration for the XHR.\n *\n * @param {boolean} xhrWithCredentials The value of withCredentials to set.\n * Compare https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/\n * @api\n */\nexport function setWithCredentials(xhrWithCredentials) {\n  withCredentials = xhrWithCredentials;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}