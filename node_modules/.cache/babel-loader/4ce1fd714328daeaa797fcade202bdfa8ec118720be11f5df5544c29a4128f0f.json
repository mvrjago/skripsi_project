{"ast":null,"code":"/**\n * @module ol/source/OSM\n */\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\nimport XYZ from './XYZ.js';\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport var ATTRIBUTION = '&#169; ' + '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' + 'contributors.';\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nvar OSM = /** @class */function (_super) {\n  __extends(OSM, _super);\n  /**\n   * @param {Options=} [opt_options] Open Street Map options.\n   */\n  function OSM(opt_options) {\n    var _this = this;\n    var options = opt_options || {};\n    var attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n    var crossOrigin = options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n    var url = options.url !== undefined ? options.url : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n    _this = _super.call(this, {\n      attributions: attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      opaque: options.opaque !== undefined ? options.opaque : true,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      url: url,\n      wrapX: options.wrapX,\n      attributionsCollapsible: false\n    }) || this;\n    return _this;\n  }\n  return OSM;\n}(XYZ);\nexport default OSM;","map":{"version":3,"names":["XYZ","ATTRIBUTION","OSM","_super","__extends","opt_options","_this","options","attributions","undefined","crossOrigin","url","call","cacheSize","imageSmoothing","opaque","maxZoom","reprojectionErrorThreshold","tileLoadFunction","wrapX","attributionsCollapsible"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/source/OSM.js"],"sourcesContent":["/**\n * @module ol/source/OSM\n */\n\nimport XYZ from './XYZ.js';\n\n/**\n * The attribution containing a link to the OpenStreetMap Copyright and License\n * page.\n * @const\n * @type {string}\n * @api\n */\nexport const ATTRIBUTION =\n  '&#169; ' +\n  '<a href=\"https://www.openstreetmap.org/copyright\" target=\"_blank\">OpenStreetMap</a> ' +\n  'contributors.';\n\n/**\n * @typedef {Object} Options\n * @property {import(\"./Source.js\").AttributionLike} [attributions] Attributions.\n * @property {number} [cacheSize] Initial tile cache size. Will auto-grow to hold at least the number of tiles in the viewport.\n * @property {null|string} [crossOrigin='anonymous'] The `crossOrigin` attribute for loaded images.  Note that\n * you must provide a `crossOrigin` value if you want to access pixel data with the Canvas renderer.\n * See https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\n * @property {boolean} [imageSmoothing=true] Enable image smoothing.\n * @property {number} [maxZoom=19] Max zoom.\n * @property {boolean} [opaque=true] Whether the layer is opaque.\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\n * Higher values can increase reprojection performance, but decrease precision.\n * @property {import(\"../Tile.js\").LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\n * ```js\n * function(imageTile, src) {\n *   imageTile.getImage().src = src;\n * };\n * ```\n * @property {string} [url='https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png'] URL template.\n * Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\n */\n\n/**\n * @classdesc\n * Layer source for the OpenStreetMap tile server.\n * @api\n */\nclass OSM extends XYZ {\n  /**\n   * @param {Options=} [opt_options] Open Street Map options.\n   */\n  constructor(opt_options) {\n    const options = opt_options || {};\n\n    let attributions;\n    if (options.attributions !== undefined) {\n      attributions = options.attributions;\n    } else {\n      attributions = [ATTRIBUTION];\n    }\n\n    const crossOrigin =\n      options.crossOrigin !== undefined ? options.crossOrigin : 'anonymous';\n\n    const url =\n      options.url !== undefined\n        ? options.url\n        : 'https://{a-c}.tile.openstreetmap.org/{z}/{x}/{y}.png';\n\n    super({\n      attributions: attributions,\n      cacheSize: options.cacheSize,\n      crossOrigin: crossOrigin,\n      imageSmoothing: options.imageSmoothing,\n      opaque: options.opaque !== undefined ? options.opaque : true,\n      maxZoom: options.maxZoom !== undefined ? options.maxZoom : 19,\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\n      tileLoadFunction: options.tileLoadFunction,\n      url: url,\n      wrapX: options.wrapX,\n      attributionsCollapsible: false,\n    });\n  }\n}\n\nexport default OSM;\n"],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;AAIA,OAAOA,GAAG,MAAM,UAAU;AAE1B;;;;;;;AAOA,OAAO,IAAMC,WAAW,GACtB,SAAS,GACT,sFAAsF,GACtF,eAAe;AAEjB;;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;AAKA,IAAAC,GAAA,0BAAAC,MAAA;EAAkBC,SAAA,CAAAF,GAAA,EAAAC,MAAA;EAChB;;;EAGA,SAAAD,IAAYG,WAAW;IAAvB,IAAAC,KAAA;IACE,IAAMC,OAAO,GAAGF,WAAW,IAAI,EAAE;IAEjC,IAAIG,YAAY;IAChB,IAAID,OAAO,CAACC,YAAY,KAAKC,SAAS,EAAE;MACtCD,YAAY,GAAGD,OAAO,CAACC,YAAY;KACpC,MAAM;MACLA,YAAY,GAAG,CAACP,WAAW,CAAC;;IAG9B,IAAMS,WAAW,GACfH,OAAO,CAACG,WAAW,KAAKD,SAAS,GAAGF,OAAO,CAACG,WAAW,GAAG,WAAW;IAEvE,IAAMC,GAAG,GACPJ,OAAO,CAACI,GAAG,KAAKF,SAAS,GACrBF,OAAO,CAACI,GAAG,GACX,sDAAsD;IAE5DL,KAAA,GAAAH,MAAA,CAAAS,IAAA,OAAM;MACJJ,YAAY,EAAEA,YAAY;MAC1BK,SAAS,EAAEN,OAAO,CAACM,SAAS;MAC5BH,WAAW,EAAEA,WAAW;MACxBI,cAAc,EAAEP,OAAO,CAACO,cAAc;MACtCC,MAAM,EAAER,OAAO,CAACQ,MAAM,KAAKN,SAAS,GAAGF,OAAO,CAACQ,MAAM,GAAG,IAAI;MAC5DC,OAAO,EAAET,OAAO,CAACS,OAAO,KAAKP,SAAS,GAAGF,OAAO,CAACS,OAAO,GAAG,EAAE;MAC7DC,0BAA0B,EAAEV,OAAO,CAACU,0BAA0B;MAC9DC,gBAAgB,EAAEX,OAAO,CAACW,gBAAgB;MAC1CP,GAAG,EAAEA,GAAG;MACRQ,KAAK,EAAEZ,OAAO,CAACY,KAAK;MACpBC,uBAAuB,EAAE;KAC1B,CAAC;;EACJ;EACF,OAAAlB,GAAC;AAAD,CAAC,CApCiBF,GAAG;AAsCrB,eAAeE,GAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}