{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return _extendStatics(d, b);\n  };\n  return function (d, b) {\n    _extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport { listen, listenOnce, unlistenByKey } from './events.js';\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nvar Observable = /** @class */function (_super) {\n  __extends(Observable, _super);\n  function Observable() {\n    var _this = _super.call(this) || this;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.revision_ = 0;\n    return _this;\n  }\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  Observable.prototype.changed = function () {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  };\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  Observable.prototype.getRevision = function () {\n    return this.revision_;\n  };\n  /**\n   * Listen for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  Observable.prototype.on = function (type, listener) {\n    if (Array.isArray(type)) {\n      var len = type.length;\n      var keys = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */type, listener);\n    }\n  };\n  /**\n   * Listen once for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  Observable.prototype.once = function (type, listener) {\n    var key;\n    if (Array.isArray(type)) {\n      var len = type.length;\n      key = new Array(len);\n      for (var i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */type, listener);\n    }\n    /** @type {Object} */\n    listener.ol_key = key;\n    return key;\n  };\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @api\n   */\n  Observable.prototype.un = function (type, listener) {\n    var key = /** @type {Object} */listener.ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (var i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  };\n  return Observable;\n}(EventTarget);\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (var i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey( /** @type {import(\"./events.js\").EventsKey} */key);\n  }\n}\nexport default Observable;","map":{"version":3,"names":["EventTarget","EventType","listen","listenOnce","unlistenByKey","Observable","_super","__extends","_this","call","revision_","prototype","changed","dispatchEvent","CHANGE","getRevision","on","type","listener","Array","isArray","len","length","keys","i","once","key","ol_key","un","unByKey","ii","removeEventListener"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/Observable.js"],"sourcesContent":["/**\n * @module ol/Observable\n */\nimport EventTarget from './events/Target.js';\nimport EventType from './events/EventType.js';\nimport {listen, listenOnce, unlistenByKey} from './events.js';\n\n/**\n * @classdesc\n * Abstract base class; normally only used for creating subclasses and not\n * instantiated in apps.\n * An event target providing convenient methods for listener registration\n * and unregistration. A generic `change` event is always available through\n * {@link module:ol/Observable~Observable#changed}.\n *\n * @fires import(\"./events/Event.js\").default\n * @api\n */\nclass Observable extends EventTarget {\n  constructor() {\n    super();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.revision_ = 0;\n  }\n\n  /**\n   * Increases the revision counter and dispatches a 'change' event.\n   * @api\n   */\n  changed() {\n    ++this.revision_;\n    this.dispatchEvent(EventType.CHANGE);\n  }\n\n  /**\n   * Get the version number for this object.  Each time the object is modified,\n   * its version number will be incremented.\n   * @return {number} Revision.\n   * @api\n   */\n  getRevision() {\n    return this.revision_;\n  }\n\n  /**\n   * Listen for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  on(type, listener) {\n    if (Array.isArray(type)) {\n      const len = type.length;\n      const keys = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        keys[i] = listen(this, type[i], listener);\n      }\n      return keys;\n    } else {\n      return listen(this, /** @type {string} */ (type), listener);\n    }\n  }\n\n  /**\n   * Listen once for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @return {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} Unique key for the listener. If\n   *     called with an array of event types as the first argument, the return\n   *     will be an array of keys.\n   * @api\n   */\n  once(type, listener) {\n    let key;\n    if (Array.isArray(type)) {\n      const len = type.length;\n      key = new Array(len);\n      for (let i = 0; i < len; ++i) {\n        key[i] = listenOnce(this, type[i], listener);\n      }\n    } else {\n      key = listenOnce(this, /** @type {string} */ (type), listener);\n    }\n    /** @type {Object} */ (listener).ol_key = key;\n    return key;\n  }\n\n  /**\n   * Unlisten for a certain type of event.\n   * @param {string|Array<string>} type The event type or array of event types.\n   * @param {function(?): ?} listener The listener function.\n   * @api\n   */\n  un(type, listener) {\n    const key = /** @type {Object} */ (listener).ol_key;\n    if (key) {\n      unByKey(key);\n    } else if (Array.isArray(type)) {\n      for (let i = 0, ii = type.length; i < ii; ++i) {\n        this.removeEventListener(type[i], listener);\n      }\n    } else {\n      this.removeEventListener(type, listener);\n    }\n  }\n}\n\n/**\n * Removes an event listener using the key returned by `on()` or `once()`.\n * @param {import(\"./events.js\").EventsKey|Array<import(\"./events.js\").EventsKey>} key The key returned by `on()`\n *     or `once()` (or an array of keys).\n * @api\n */\nexport function unByKey(key) {\n  if (Array.isArray(key)) {\n    for (let i = 0, ii = key.length; i < ii; ++i) {\n      unlistenByKey(key[i]);\n    }\n  } else {\n    unlistenByKey(/** @type {import(\"./events.js\").EventsKey} */ (key));\n  }\n}\n\nexport default Observable;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}