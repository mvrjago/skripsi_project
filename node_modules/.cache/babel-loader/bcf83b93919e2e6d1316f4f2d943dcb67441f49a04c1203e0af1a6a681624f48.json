{"ast":null,"code":"/**\n * @module ol/centerconstraint\n */\nimport { clamp } from './math.js';\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, opt_isMoving) {\n      if (center) {\n        var viewWidth = onlyCenter ? 0 : size[0] * resolution;\n        var viewHeight = onlyCenter ? 0 : size[1] * resolution;\n        var minX = extent[0] + viewWidth / 2;\n        var maxX = extent[2] - viewWidth / 2;\n        var minY = extent[1] + viewHeight / 2;\n        var maxY = extent[3] - viewHeight / 2;\n        // note: when zooming out of bounds, min and max values for x and y may\n        // end up inverted (min > max); this has to be accounted for\n        if (minX > maxX) {\n          minX = (maxX + minX) / 2;\n          maxX = minX;\n        }\n        if (minY > maxY) {\n          minY = (maxY + minY) / 2;\n          maxY = minY;\n        }\n        var x = clamp(center[0], minX, maxX);\n        var y = clamp(center[1], minY, maxY);\n        var ratio = 30 * resolution;\n        // during an interaction, allow some overscroll\n        if (opt_isMoving && smooth) {\n          x += -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) + ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n          y += -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) + ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n        }\n        return [x, y];\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n/**\n * @param {import(\"./coordinate.js\").Coordinate=} center Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}","map":{"version":3,"names":["clamp","createExtent","extent","onlyCenter","smooth","center","resolution","size","opt_isMoving","viewWidth","viewHeight","minX","maxX","minY","maxY","x","y","ratio","Math","log","max","undefined","none"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/centerconstraint.js"],"sourcesContent":["/**\n * @module ol/centerconstraint\n */\nimport {clamp} from './math.js';\n\n/**\n * @typedef {function((import(\"./coordinate.js\").Coordinate|undefined), number, import(\"./size.js\").Size, boolean=): (import(\"./coordinate.js\").Coordinate|undefined)} Type\n */\n\n/**\n * @param {import(\"./extent.js\").Extent} extent Extent.\n * @param {boolean} onlyCenter If true, the constraint will only apply to the view center.\n * @param {boolean} smooth If true, the view will be able to go slightly out of the given extent\n * (only during interaction and animation).\n * @return {Type} The constraint.\n */\nexport function createExtent(extent, onlyCenter, smooth) {\n  return (\n    /**\n     * @param {import(\"./coordinate.js\").Coordinate|undefined} center Center.\n     * @param {number} resolution Resolution.\n     * @param {import(\"./size.js\").Size} size Viewport size; unused if `onlyCenter` was specified.\n     * @param {boolean=} opt_isMoving True if an interaction or animation is in progress.\n     * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n     */\n    function (center, resolution, size, opt_isMoving) {\n      if (center) {\n        const viewWidth = onlyCenter ? 0 : size[0] * resolution;\n        const viewHeight = onlyCenter ? 0 : size[1] * resolution;\n        let minX = extent[0] + viewWidth / 2;\n        let maxX = extent[2] - viewWidth / 2;\n        let minY = extent[1] + viewHeight / 2;\n        let maxY = extent[3] - viewHeight / 2;\n\n        // note: when zooming out of bounds, min and max values for x and y may\n        // end up inverted (min > max); this has to be accounted for\n        if (minX > maxX) {\n          minX = (maxX + minX) / 2;\n          maxX = minX;\n        }\n        if (minY > maxY) {\n          minY = (maxY + minY) / 2;\n          maxY = minY;\n        }\n\n        let x = clamp(center[0], minX, maxX);\n        let y = clamp(center[1], minY, maxY);\n        const ratio = 30 * resolution;\n\n        // during an interaction, allow some overscroll\n        if (opt_isMoving && smooth) {\n          x +=\n            -ratio * Math.log(1 + Math.max(0, minX - center[0]) / ratio) +\n            ratio * Math.log(1 + Math.max(0, center[0] - maxX) / ratio);\n          y +=\n            -ratio * Math.log(1 + Math.max(0, minY - center[1]) / ratio) +\n            ratio * Math.log(1 + Math.max(0, center[1] - maxY) / ratio);\n        }\n\n        return [x, y];\n      } else {\n        return undefined;\n      }\n    }\n  );\n}\n\n/**\n * @param {import(\"./coordinate.js\").Coordinate=} center Center.\n * @return {import(\"./coordinate.js\").Coordinate|undefined} Center.\n */\nexport function none(center) {\n  return center;\n}\n"],"mappings":"AAAA;;;AAGA,SAAQA,KAAK,QAAO,WAAW;AAE/B;;;AAIA;;;;;;;AAOA,OAAM,SAAUC,YAAYA,CAACC,MAAM,EAAEC,UAAU,EAAEC,MAAM;EACrD;IACE;;;;;;;IAOA,UAAUC,MAAM,EAAEC,UAAU,EAAEC,IAAI,EAAEC,YAAY;MAC9C,IAAIH,MAAM,EAAE;QACV,IAAMI,SAAS,GAAGN,UAAU,GAAG,CAAC,GAAGI,IAAI,CAAC,CAAC,CAAC,GAAGD,UAAU;QACvD,IAAMI,UAAU,GAAGP,UAAU,GAAG,CAAC,GAAGI,IAAI,CAAC,CAAC,CAAC,GAAGD,UAAU;QACxD,IAAIK,IAAI,GAAGT,MAAM,CAAC,CAAC,CAAC,GAAGO,SAAS,GAAG,CAAC;QACpC,IAAIG,IAAI,GAAGV,MAAM,CAAC,CAAC,CAAC,GAAGO,SAAS,GAAG,CAAC;QACpC,IAAII,IAAI,GAAGX,MAAM,CAAC,CAAC,CAAC,GAAGQ,UAAU,GAAG,CAAC;QACrC,IAAII,IAAI,GAAGZ,MAAM,CAAC,CAAC,CAAC,GAAGQ,UAAU,GAAG,CAAC;QAErC;QACA;QACA,IAAIC,IAAI,GAAGC,IAAI,EAAE;UACfD,IAAI,GAAG,CAACC,IAAI,GAAGD,IAAI,IAAI,CAAC;UACxBC,IAAI,GAAGD,IAAI;;QAEb,IAAIE,IAAI,GAAGC,IAAI,EAAE;UACfD,IAAI,GAAG,CAACC,IAAI,GAAGD,IAAI,IAAI,CAAC;UACxBC,IAAI,GAAGD,IAAI;;QAGb,IAAIE,CAAC,GAAGf,KAAK,CAACK,MAAM,CAAC,CAAC,CAAC,EAAEM,IAAI,EAAEC,IAAI,CAAC;QACpC,IAAII,CAAC,GAAGhB,KAAK,CAACK,MAAM,CAAC,CAAC,CAAC,EAAEQ,IAAI,EAAEC,IAAI,CAAC;QACpC,IAAMG,KAAK,GAAG,EAAE,GAAGX,UAAU;QAE7B;QACA,IAAIE,YAAY,IAAIJ,MAAM,EAAE;UAC1BW,CAAC,IACC,CAACE,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAET,IAAI,GAAGN,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGY,KAAK,CAAC,GAC5DA,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEf,MAAM,CAAC,CAAC,CAAC,GAAGO,IAAI,CAAC,GAAGK,KAAK,CAAC;UAC7DD,CAAC,IACC,CAACC,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEP,IAAI,GAAGR,MAAM,CAAC,CAAC,CAAC,CAAC,GAAGY,KAAK,CAAC,GAC5DA,KAAK,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEf,MAAM,CAAC,CAAC,CAAC,GAAGS,IAAI,CAAC,GAAGG,KAAK,CAAC;;QAG/D,OAAO,CAACF,CAAC,EAAEC,CAAC,CAAC;OACd,MAAM;QACL,OAAOK,SAAS;;IAEpB;EAAC;AAEL;AAEA;;;;AAIA,OAAM,SAAUC,IAAIA,CAACjB,MAAM;EACzB,OAAOA,MAAM;AACf"},"metadata":{},"sourceType":"module","externalDependencies":[]}