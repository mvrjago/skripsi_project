{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n    return extendStatics(d, b);\n  };\n  return function (d, b) {\n    extendStatics(d, b);\n    function __() {\n      this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n/**\n * @module ol/PluggableMap\n */\nimport BaseObject, { getChangeEventType } from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport EventType from './events/EventType.js';\nimport LayerGroup from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, { getTilePriority } from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport { DEVICE_PIXEL_RATIO, IMAGE_DECODE, PASSIVE_EVENT_LISTENERS } from './has.js';\nimport { TRUE } from './functions.js';\nimport { apply as applyTransform, create as createTransform } from './transform.js';\nimport { assert } from './asserts.js';\nimport { clone, createOrUpdateEmpty, equals, getForViewAndSize, isEmpty } from './extent.js';\nimport { fromUserCoordinate, toUserCoordinate } from './proj.js';\nimport { hasArea } from './size.js';\nimport { listen, unlistenByKey } from './events.js';\nimport { removeNode } from './dom.js';\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform\n * @property {null|import(\"./extent.js\").Extent} extent\n * @property {Array<DeclutterItems>} declutterItems\n * @property {number} index\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray\n * @property {number} layerIndex\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform\n * @property {Array<PostRenderFunction>} postRenderFunctions\n * @property {import(\"./size.js\").Size} size\n * @property {TileQueue} tileQueue\n * @property {!Object<string, Object<string, boolean>>} usedTiles\n * @property {Array<number>} viewHints\n * @property {!Object<string, Object<string, boolean>>} wantedTiles\n */\n/**\n * @typedef {Object} DeclutterItems\n * @property {Array<*>} items Declutter items of an executor.\n * @property {number} opacity Layer opacity.\n */\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls]\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions]\n * @property {HTMLElement|Document} keyboardEventTarget\n * @property {Collection<import(\"./Overlay.js\").default>} overlays\n * @property {Object<string, *>} values\n */\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control~defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction~defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered.\n * @property {View} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nvar PluggableMap = /** @class */function (_super) {\n  __extends(PluggableMap, _super);\n  /**\n   * @param {MapOptions} options Map options.\n   */\n  function PluggableMap(options) {\n    var _this = _super.call(this) || this;\n    var optionsInternal = createOptionsInternal(options);\n    /** @private */\n    _this.boundHandleBrowserEvent_ = _this.handleBrowserEvent.bind(_this);\n    /**\n     * @type {number}\n     * @private\n     */\n    _this.maxTilesLoading_ = options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.pixelRatio_ = options.pixelRatio !== undefined ? options.pixelRatio : DEVICE_PIXEL_RATIO;\n    /**\n     * @private\n     * @type {*}\n     */\n    _this.postRenderTimeoutHandle_;\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    _this.animationDelayKey_;\n    /**\n     * @private\n     */\n    _this.animationDelay_ = function () {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_(Date.now());\n    }.bind(_this);\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    _this.coordinateToPixelTransform_ = createTransform();\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    _this.pixelToCoordinateTransform_ = createTransform();\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.frameIndex_ = 0;\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    _this.frameState_ = null;\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    _this.previousExtent_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.viewPropertyListenerKey_ = null;\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    _this.viewChangeListenerKey_ = null;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    _this.layerGroupPropertyListenerKeys_ = null;\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    _this.viewport_ = document.createElement('div');\n    _this.viewport_.className = 'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    _this.viewport_.style.position = 'relative';\n    _this.viewport_.style.overflow = 'hidden';\n    _this.viewport_.style.width = '100%';\n    _this.viewport_.style.height = '100%';\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    _this.overlayContainer_ = document.createElement('div');\n    _this.overlayContainer_.style.position = 'absolute';\n    _this.overlayContainer_.style.zIndex = '0';\n    _this.overlayContainer_.style.width = '100%';\n    _this.overlayContainer_.style.height = '100%';\n    _this.overlayContainer_.style.pointerEvents = 'none';\n    _this.overlayContainer_.className = 'ol-overlaycontainer';\n    _this.viewport_.appendChild(_this.overlayContainer_);\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    _this.overlayContainerStopEvent_ = document.createElement('div');\n    _this.overlayContainerStopEvent_.style.position = 'absolute';\n    _this.overlayContainerStopEvent_.style.zIndex = '0';\n    _this.overlayContainerStopEvent_.style.width = '100%';\n    _this.overlayContainerStopEvent_.style.height = '100%';\n    _this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    _this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    _this.viewport_.appendChild(_this.overlayContainerStopEvent_);\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    _this.mapBrowserEventHandler_ = null;\n    /**\n     * @private\n     * @type {number}\n     */\n    _this.moveTolerance_ = options.moveTolerance;\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    _this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    _this.keyHandlerKeys_ = null;\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    _this.controls = optionsInternal.controls || new Collection();\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    _this.interactions = optionsInternal.interactions || new Collection();\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    _this.overlays_ = optionsInternal.overlays;\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    _this.overlayIdIndex_ = {};\n    /**\n     * @type {import(\"./renderer/Map.js\").default}\n     * @private\n     */\n    _this.renderer_ = null;\n    /**\n     * @type {undefined|function(Event): void}\n     * @private\n     */\n    _this.handleResize_;\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    _this.postRenderFunctions_ = [];\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    _this.tileQueue_ = new TileQueue(_this.getTilePriority.bind(_this), _this.handleTileChange_.bind(_this));\n    _this.addEventListener(getChangeEventType(MapProperty.LAYERGROUP), _this.handleLayerGroupChanged_);\n    _this.addEventListener(getChangeEventType(MapProperty.VIEW), _this.handleViewChanged_);\n    _this.addEventListener(getChangeEventType(MapProperty.SIZE), _this.handleSizeChanged_);\n    _this.addEventListener(getChangeEventType(MapProperty.TARGET), _this.handleTargetChanged_);\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    _this.setProperties(optionsInternal.values);\n    _this.controls.forEach(\n    /**\n     * @param {import(\"./control/Control.js\").default} control Control.\n     * @this {PluggableMap}\n     */\n    function (control) {\n      control.setMap(this);\n    }.bind(_this));\n    _this.controls.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(_this));\n    _this.controls.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(_this));\n    _this.interactions.forEach(\n    /**\n     * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n     * @this {PluggableMap}\n     */\n    function (interaction) {\n      interaction.setMap(this);\n    }.bind(_this));\n    _this.interactions.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(this);\n    }.bind(_this));\n    _this.interactions.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      event.element.setMap(null);\n    }.bind(_this));\n    _this.overlays_.forEach(_this.addOverlayInternal_.bind(_this));\n    _this.overlays_.addEventListener(CollectionEventType.ADD,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      this.addOverlayInternal_( /** @type {import(\"./Overlay.js\").default} */event.element);\n    }.bind(_this));\n    _this.overlays_.addEventListener(CollectionEventType.REMOVE,\n    /**\n     * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n     */\n    function (event) {\n      var overlay = /** @type {import(\"./Overlay.js\").default} */event.element;\n      var id = overlay.getId();\n      if (id !== undefined) {\n        delete this.overlayIdIndex_[id.toString()];\n      }\n      event.element.setMap(null);\n    }.bind(_this));\n    return _this;\n  }\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n  PluggableMap.prototype.createRenderer = function () {\n    throw new Error('Use a map type that has a createRenderer method');\n  };\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  PluggableMap.prototype.addControl = function (control) {\n    this.getControls().push(control);\n  };\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteraction()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  PluggableMap.prototype.addInteraction = function (interaction) {\n    this.getInteractions().push(interaction);\n  };\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  PluggableMap.prototype.addLayer = function (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  };\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  PluggableMap.prototype.addOverlay = function (overlay) {\n    this.getOverlays().push(overlay);\n  };\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  PluggableMap.prototype.addOverlayInternal_ = function (overlay) {\n    var id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  };\n  /**\n   *\n   * Clean up.\n   */\n  PluggableMap.prototype.disposeInternal = function () {\n    this.setTarget(null);\n    _super.prototype.disposeInternal.call(this);\n  };\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./Feature.js\").FeatureLike,\n   *     import(\"./layer/Layer.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature feature} or\n   *     {@link module:ol/render/Feature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  PluggableMap.prototype.forEachFeatureAtPixel = function (pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    var coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, callback, null, layerFilter, null);\n  };\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  PluggableMap.prototype.getFeaturesAtPixel = function (pixel, opt_options) {\n    var features = [];\n    this.forEachFeatureAtPixel(pixel, function (feature) {\n      features.push(feature);\n    }, opt_options);\n    return features;\n  };\n  /**\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   *\n   * Note: this may give false positives unless the map layers have had different `className`\n   * properties assigned to them.\n   *\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions=} opt_options Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  PluggableMap.prototype.forEachLayerAtPixel = function (pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    var options = opt_options || {};\n    var hitTolerance = options.hitTolerance !== undefined ? options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(pixel, this.frameState_, hitTolerance, callback, layerFilter);\n  };\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  PluggableMap.prototype.hasFeatureAtPixel = function (pixel, opt_options) {\n    if (!this.frameState_) {\n      return false;\n    }\n    var coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    var layerFilter = opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    var hitTolerance = opt_options.hitTolerance !== undefined ? opt_options.hitTolerance * this.frameState_.pixelRatio : 0;\n    var checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(coordinate, this.frameState_, hitTolerance, checkWrapped, layerFilter, null);\n  };\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  PluggableMap.prototype.getEventCoordinate = function (event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  };\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  PluggableMap.prototype.getEventCoordinateInternal = function (event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  };\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  PluggableMap.prototype.getEventPixel = function (event) {\n    var viewportPosition = this.viewport_.getBoundingClientRect();\n    var eventPosition =\n    //FIXME Are we really calling this with a TouchEvent anywhere?\n    'changedTouches' in event ? /** @type {TouchEvent} */event.changedTouches[0] : /** @type {MouseEvent} */event;\n    return [eventPosition.clientX - viewportPosition.left, eventPosition.clientY - viewportPosition.top];\n  };\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getTarget = function () {\n    return (/** @type {HTMLElement|string|undefined} */this.get(MapProperty.TARGET)\n    );\n  };\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  PluggableMap.prototype.getTargetElement = function () {\n    var target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string' ? document.getElementById(target) : target;\n    } else {\n      return null;\n    }\n  };\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  PluggableMap.prototype.getCoordinateFromPixel = function (pixel) {\n    return toUserCoordinate(this.getCoordinateFromPixelInternal(pixel), this.getView().getProjection());\n  };\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  PluggableMap.prototype.getCoordinateFromPixelInternal = function (pixel) {\n    var frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.pixelToCoordinateTransform, pixel.slice());\n    }\n  };\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  PluggableMap.prototype.getControls = function () {\n    return this.controls;\n  };\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  PluggableMap.prototype.getOverlays = function () {\n    return this.overlays_;\n  };\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  PluggableMap.prototype.getOverlayById = function (id) {\n    var overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  };\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  PluggableMap.prototype.getInteractions = function () {\n    return this.interactions;\n  };\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getLayerGroup = function () {\n    return (/** @type {LayerGroup} */this.get(MapProperty.LAYERGROUP)\n    );\n  };\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  PluggableMap.prototype.getLayers = function () {\n    var layers = this.getLayerGroup().getLayers();\n    return layers;\n  };\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  PluggableMap.prototype.getLoading = function () {\n    var layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (var i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      var layer = layerStatesArray[i].layer;\n      var source = /** @type {import(\"./layer/Layer.js\").default} */layer.getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  };\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  PluggableMap.prototype.getPixelFromCoordinate = function (coordinate) {\n    var viewCoordinate = fromUserCoordinate(coordinate, this.getView().getProjection());\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  };\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  PluggableMap.prototype.getPixelFromCoordinateInternal = function (coordinate) {\n    var frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(frameState.coordinateToPixelTransform, coordinate.slice(0, 2));\n    }\n  };\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default} Renderer\n   */\n  PluggableMap.prototype.getRenderer = function () {\n    return this.renderer_;\n  };\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getSize = function () {\n    return (/** @type {import(\"./size.js\").Size|undefined} */this.get(MapProperty.SIZE)\n    );\n  };\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.getView = function () {\n    return (/** @type {View} */this.get(MapProperty.VIEW)\n    );\n  };\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  PluggableMap.prototype.getViewport = function () {\n    return this.viewport_;\n  };\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  PluggableMap.prototype.getOverlayContainer = function () {\n    return this.overlayContainer_;\n  };\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  PluggableMap.prototype.getOverlayContainerStopEvent = function () {\n    return this.overlayContainerStopEvent_;\n  };\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  PluggableMap.prototype.getTilePriority = function (tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(this.frameState_, tile, tileSourceKey, tileCenter, tileResolution);\n  };\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string=} opt_type Type.\n   */\n  PluggableMap.prototype.handleBrowserEvent = function (browserEvent, opt_type) {\n    var type = opt_type || browserEvent.type;\n    var mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  };\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  PluggableMap.prototype.handleMapBrowserEvent = function (mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    var originalEvent = /** @type {PointerEvent} */mapBrowserEvent.originalEvent;\n    var eventType = originalEvent.type;\n    if (eventType === PointerEventType.POINTERDOWN || eventType === EventType.WHEEL || eventType === EventType.KEYDOWN) {\n      var rootNode = this.viewport_.getRootNode ? this.viewport_.getRootNode() : document;\n      var target = rootNode === document ? /** @type {Node} */originalEvent.target : /** @type {ShadowRoot} */rootNode.elementFromPoint(originalEvent.clientX, originalEvent.clientY);\n      if (\n      // Abort if the target is a child of the container for elements whose events are not meant\n      // to be handled by map interactions.\n      this.overlayContainerStopEvent_.contains(target) ||\n      // Abort if the event target is a child of the container that is no longer in the page.\n      // It's possible for the target to no longer be in the page if it has been removed in an\n      // event listener, this might happen in a Control that recreates it's content based on\n      // user interaction either manually or via a render in something like https://reactjs.org/\n      !(rootNode === document ? document.documentElement : rootNode).contains(target)) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    var interactionsArray = this.getInteractions().getArray();\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      for (var i = interactionsArray.length - 1; i >= 0; i--) {\n        var interaction = interactionsArray[i];\n        if (!interaction.getActive()) {\n          continue;\n        }\n        var cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont) {\n          break;\n        }\n      }\n    }\n  };\n  /**\n   * @protected\n   */\n  PluggableMap.prototype.handlePostRender = function () {\n    var frameState = this.frameState_;\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    var tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      var maxTotalLoading = this.maxTilesLoading_;\n      var maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        var hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          var lowOnFrameBudget = !IMAGE_DECODE && Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n    if (frameState && this.hasListener(RenderEventType.RENDERCOMPLETE) && !frameState.animate && !this.tileQueue_.getTilesLoading() && !this.getLoading()) {\n      this.renderer_.dispatchRenderEvent(RenderEventType.RENDERCOMPLETE, frameState);\n    }\n    var postRenderFunctions = this.postRenderFunctions_;\n    for (var i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleSizeChanged_ = function () {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n    this.render();\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleTargetChanged_ = function () {\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n    var targetElement;\n    if (this.getTarget()) {\n      targetElement = this.getTargetElement();\n    }\n    if (this.mapBrowserEventHandler_) {\n      for (var i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.keyHandlerKeys_[i]);\n      }\n      this.keyHandlerKeys_ = null;\n      this.viewport_.removeEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_);\n      this.viewport_.removeEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_);\n      if (this.handleResize_ !== undefined) {\n        removeEventListener(EventType.RESIZE, this.handleResize_, false);\n        this.handleResize_ = undefined;\n      }\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = this.createRenderer();\n      }\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(this, this.moveTolerance_);\n      for (var key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(MapBrowserEventType[key], this.handleMapBrowserEvent.bind(this));\n      }\n      this.viewport_.addEventListener(EventType.CONTEXTMENU, this.boundHandleBrowserEvent_, false);\n      this.viewport_.addEventListener(EventType.WHEEL, this.boundHandleBrowserEvent_, PASSIVE_EVENT_LISTENERS ? {\n        passive: false\n      } : false);\n      var keyboardEventTarget = !this.keyboardEventTarget_ ? targetElement : this.keyboardEventTarget_;\n      this.keyHandlerKeys_ = [listen(keyboardEventTarget, EventType.KEYDOWN, this.handleBrowserEvent, this), listen(keyboardEventTarget, EventType.KEYPRESS, this.handleBrowserEvent, this)];\n      if (!this.handleResize_) {\n        this.handleResize_ = this.updateSize.bind(this);\n        window.addEventListener(EventType.RESIZE, this.handleResize_, false);\n      }\n    }\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleTileChange_ = function () {\n    this.render();\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleViewPropertyChanged_ = function () {\n    this.render();\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleViewChanged_ = function () {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    var view = this.getView();\n    if (view) {\n      this.updateViewportSize_();\n      this.viewPropertyListenerKey_ = listen(view, ObjectEventType.PROPERTYCHANGE, this.handleViewPropertyChanged_, this);\n      this.viewChangeListenerKey_ = listen(view, EventType.CHANGE, this.handleViewPropertyChanged_, this);\n      view.resolveConstraints(0);\n    }\n    this.render();\n  };\n  /**\n   * @private\n   */\n  PluggableMap.prototype.handleLayerGroupChanged_ = function () {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    var layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.layerGroupPropertyListenerKeys_ = [listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this), listen(layerGroup, EventType.CHANGE, this.render, this)];\n    }\n    this.render();\n  };\n  /**\n   * @return {boolean} Is rendered.\n   */\n  PluggableMap.prototype.isRendered = function () {\n    return !!this.frameState_;\n  };\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  PluggableMap.prototype.renderSync = function () {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  };\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  PluggableMap.prototype.redrawText = function () {\n    var layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (var i = 0, ii = layerStates.length; i < ii; ++i) {\n      var layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  };\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  PluggableMap.prototype.render = function () {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  };\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeControl = function (control) {\n    return this.getControls().remove(control);\n  };\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeInteraction = function (interaction) {\n    return this.getInteractions().remove(interaction);\n  };\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeLayer = function (layer) {\n    var layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  };\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  PluggableMap.prototype.removeOverlay = function (overlay) {\n    return this.getOverlays().remove(overlay);\n  };\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  PluggableMap.prototype.renderFrame_ = function (time) {\n    var size = this.getSize();\n    var view = this.getView();\n    var previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    var frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      var viewHints = view.getHints(this.frameState_ ? this.frameState_.viewHints : undefined);\n      var viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterItems: previousFrameState ? previousFrameState.declutterItems : [],\n        extent: getForViewAndSize(viewState.center, viewState.resolution, viewState.rotation, size),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {}\n      };\n    }\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(this.postRenderFunctions_, frameState.postRenderFunctions);\n      if (previousFrameState) {\n        var moveStart = !this.previousExtent_ || !isEmpty(this.previousExtent_) && !equals(frameState.extent, this.previousExtent_);\n        if (moveStart) {\n          this.dispatchEvent(new MapEvent(MapEventType.MOVESTART, this, previousFrameState));\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n      var idle = this.previousExtent_ && !frameState.viewHints[ViewHint.ANIMATING] && !frameState.viewHints[ViewHint.INTERACTING] && !equals(frameState.extent, this.previousExtent_);\n      if (idle) {\n        this.dispatchEvent(new MapEvent(MapEventType.MOVEEND, this, frameState));\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n    this.postRenderTimeoutHandle_ = setTimeout(this.handlePostRender.bind(this), 0);\n  };\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setLayerGroup = function (layerGroup) {\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  };\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setSize = function (size) {\n    this.set(MapProperty.SIZE, size);\n  };\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string|undefined} target The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setTarget = function (target) {\n    this.set(MapProperty.TARGET, target);\n  };\n  /**\n   * Set the view for this map.\n   * @param {View} view The view that controls this map.\n   * @observable\n   * @api\n   */\n  PluggableMap.prototype.setView = function (view) {\n    this.set(MapProperty.VIEW, view);\n  };\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  PluggableMap.prototype.updateSize = function () {\n    var targetElement = this.getTargetElement();\n    if (!targetElement) {\n      this.setSize(undefined);\n    } else {\n      var computedStyle = getComputedStyle(targetElement);\n      this.setSize([targetElement.offsetWidth - parseFloat(computedStyle['borderLeftWidth']) - parseFloat(computedStyle['paddingLeft']) - parseFloat(computedStyle['paddingRight']) - parseFloat(computedStyle['borderRightWidth']), targetElement.offsetHeight - parseFloat(computedStyle['borderTopWidth']) - parseFloat(computedStyle['paddingTop']) - parseFloat(computedStyle['paddingBottom']) - parseFloat(computedStyle['borderBottomWidth'])]);\n    }\n    this.updateViewportSize_();\n  };\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n  PluggableMap.prototype.updateViewportSize_ = function () {\n    var view = this.getView();\n    if (view) {\n      var size = undefined;\n      var computedStyle = getComputedStyle(this.viewport_);\n      if (computedStyle.width && computedStyle.height) {\n        size = [parseInt(computedStyle.width, 10), parseInt(computedStyle.height, 10)];\n      }\n      view.setViewportSize(size);\n    }\n  };\n  return PluggableMap;\n}(BaseObject);\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  var keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget = typeof options.keyboardEventTarget === 'string' ? document.getElementById(options.keyboardEventTarget) : options.keyboardEventTarget;\n  }\n  /**\n   * @type {Object<string, *>}\n   */\n  var values = {};\n  var layerGroup = options.layers && typeof /** @type {?} */options.layers.getLayers === 'function' ? /** @type {LayerGroup} */options.layers : new LayerGroup({\n    layers: /** @type {Collection} */options.layers\n  });\n  values[MapProperty.LAYERGROUP] = layerGroup;\n  values[MapProperty.TARGET] = options.target;\n  values[MapProperty.VIEW] = options.view !== undefined ? options.view : new View();\n  var controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(typeof /** @type {?} */options.controls.getArray === 'function', 47); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = /** @type {Collection} */options.controls;\n    }\n  }\n  var interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(typeof /** @type {?} */options.interactions.getArray === 'function', 48); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = /** @type {Collection} */options.interactions;\n    }\n  }\n  var overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(typeof /** @type {?} */options.overlays.getArray === 'function', 49); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values\n  };\n}\nexport default PluggableMap;","map":{"version":3,"names":["BaseObject","getChangeEventType","Collection","CollectionEventType","EventType","LayerGroup","MapBrowserEvent","MapBrowserEventHandler","MapBrowserEventType","MapEvent","MapEventType","MapProperty","ObjectEventType","PointerEventType","RenderEventType","TileQueue","getTilePriority","View","ViewHint","DEVICE_PIXEL_RATIO","IMAGE_DECODE","PASSIVE_EVENT_LISTENERS","TRUE","apply","applyTransform","create","createTransform","assert","clone","createOrUpdateEmpty","equals","getForViewAndSize","isEmpty","fromUserCoordinate","toUserCoordinate","hasArea","listen","unlistenByKey","removeNode","PluggableMap","_super","__extends","options","_this","call","optionsInternal","createOptionsInternal","boundHandleBrowserEvent_","handleBrowserEvent","bind","maxTilesLoading_","maxTilesLoading","undefined","pixelRatio_","pixelRatio","postRenderTimeoutHandle_","animationDelayKey_","animationDelay_","renderFrame_","Date","now","coordinateToPixelTransform_","pixelToCoordinateTransform_","frameIndex_","frameState_","previousExtent_","viewPropertyListenerKey_","viewChangeListenerKey_","layerGroupPropertyListenerKeys_","viewport_","document","createElement","className","window","style","position","overflow","width","height","overlayContainer_","zIndex","pointerEvents","appendChild","overlayContainerStopEvent_","mapBrowserEventHandler_","moveTolerance_","moveTolerance","keyboardEventTarget_","keyboardEventTarget","keyHandlerKeys_","controls","interactions","overlays_","overlays","overlayIdIndex_","renderer_","handleResize_","postRenderFunctions_","tileQueue_","handleTileChange_","addEventListener","LAYERGROUP","handleLayerGroupChanged_","VIEW","handleViewChanged_","SIZE","handleSizeChanged_","TARGET","handleTargetChanged_","setProperties","values","forEach","control","setMap","ADD","event","element","REMOVE","interaction","addOverlayInternal_","overlay","id","getId","toString","prototype","createRenderer","Error","addControl","getControls","push","addInteraction","getInteractions","addLayer","layer","layers","getLayerGroup","getLayers","addOverlay","getOverlays","disposeInternal","setTarget","forEachFeatureAtPixel","pixel","callback","opt_options","coordinate","getCoordinateFromPixelInternal","hitTolerance","layerFilter","checkWrapped","forEachFeatureAtCoordinate","getFeaturesAtPixel","features","feature","forEachLayerAtPixel","hasFeatureAtPixel","hasFeatureAtCoordinate","getEventCoordinate","getCoordinateFromPixel","getEventPixel","getEventCoordinateInternal","viewportPosition","getBoundingClientRect","eventPosition","changedTouches","clientX","left","clientY","top","getTarget","get","getTargetElement","target","getElementById","getView","getProjection","frameState","pixelToCoordinateTransform","slice","getOverlayById","getLoading","layerStatesArray","getLayerStatesArray","i","ii","length","source","getSource","loading","getPixelFromCoordinate","viewCoordinate","getPixelFromCoordinateInternal","coordinateToPixelTransform","getRenderer","getSize","getViewport","getOverlayContainer","getOverlayContainerStopEvent","tile","tileSourceKey","tileCenter","tileResolution","browserEvent","opt_type","type","mapBrowserEvent","handleMapBrowserEvent","originalEvent","eventType","POINTERDOWN","WHEEL","KEYDOWN","rootNode","getRootNode","elementFromPoint","contains","documentElement","interactionsArray","getArray","dispatchEvent","getActive","cont","handleEvent","handlePostRender","tileQueue","maxTotalLoading","maxNewLoads","hints","viewHints","ANIMATING","INTERACTING","lowOnFrameBudget","time","getTilesLoading","reprioritize","loadMoreTiles","hasListener","RENDERCOMPLETE","animate","dispatchRenderEvent","postRenderFunctions","getAnimating","resolveConstraints","render","targetElement","removeEventListener","CONTEXTMENU","RESIZE","dispose","clearTimeout","cancelAnimationFrame","key","passive","KEYPRESS","updateSize","handleViewPropertyChanged_","view","updateViewportSize_","PROPERTYCHANGE","CHANGE","layerGroup","isRendered","renderSync","redrawText","layerStates","hasRenderer","handleFontsChanged","requestAnimationFrame","removeControl","remove","removeInteraction","removeLayer","removeOverlay","size","previousFrameState","isDef","getHints","viewState","getState","declutterItems","extent","center","resolution","rotation","index","layerIndex","usedTiles","wantedTiles","renderFrame","Array","moveStart","MOVESTART","idle","MOVEEND","POSTRENDER","setTimeout","setLayerGroup","set","setSize","setView","computedStyle","getComputedStyle","offsetWidth","parseFloat","offsetHeight","parseInt","setViewportSize","isArray"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/PluggableMap.js"],"sourcesContent":["/**\n * @module ol/PluggableMap\n */\nimport BaseObject, {getChangeEventType} from './Object.js';\nimport Collection from './Collection.js';\nimport CollectionEventType from './CollectionEventType.js';\nimport EventType from './events/EventType.js';\nimport LayerGroup from './layer/Group.js';\nimport MapBrowserEvent from './MapBrowserEvent.js';\nimport MapBrowserEventHandler from './MapBrowserEventHandler.js';\nimport MapBrowserEventType from './MapBrowserEventType.js';\nimport MapEvent from './MapEvent.js';\nimport MapEventType from './MapEventType.js';\nimport MapProperty from './MapProperty.js';\nimport ObjectEventType from './ObjectEventType.js';\nimport PointerEventType from './pointer/EventType.js';\nimport RenderEventType from './render/EventType.js';\nimport TileQueue, {getTilePriority} from './TileQueue.js';\nimport View from './View.js';\nimport ViewHint from './ViewHint.js';\nimport {\n  DEVICE_PIXEL_RATIO,\n  IMAGE_DECODE,\n  PASSIVE_EVENT_LISTENERS,\n} from './has.js';\nimport {TRUE} from './functions.js';\nimport {\n  apply as applyTransform,\n  create as createTransform,\n} from './transform.js';\nimport {assert} from './asserts.js';\nimport {\n  clone,\n  createOrUpdateEmpty,\n  equals,\n  getForViewAndSize,\n  isEmpty,\n} from './extent.js';\nimport {fromUserCoordinate, toUserCoordinate} from './proj.js';\nimport {hasArea} from './size.js';\nimport {listen, unlistenByKey} from './events.js';\nimport {removeNode} from './dom.js';\n\n/**\n * State of the current frame. Only `pixelRatio`, `time` and `viewState` should\n * be used in applications.\n * @typedef {Object} FrameState\n * @property {number} pixelRatio The pixel ratio of the frame.\n * @property {number} time The time when rendering of the frame was requested.\n * @property {import(\"./View.js\").State} viewState The state of the current view.\n * @property {boolean} animate\n * @property {import(\"./transform.js\").Transform} coordinateToPixelTransform\n * @property {null|import(\"./extent.js\").Extent} extent\n * @property {Array<DeclutterItems>} declutterItems\n * @property {number} index\n * @property {Array<import(\"./layer/Layer.js\").State>} layerStatesArray\n * @property {number} layerIndex\n * @property {import(\"./transform.js\").Transform} pixelToCoordinateTransform\n * @property {Array<PostRenderFunction>} postRenderFunctions\n * @property {import(\"./size.js\").Size} size\n * @property {TileQueue} tileQueue\n * @property {!Object<string, Object<string, boolean>>} usedTiles\n * @property {Array<number>} viewHints\n * @property {!Object<string, Object<string, boolean>>} wantedTiles\n */\n\n/**\n * @typedef {Object} DeclutterItems\n * @property {Array<*>} items Declutter items of an executor.\n * @property {number} opacity Layer opacity.\n */\n\n/**\n * @typedef {function(PluggableMap, ?FrameState): any} PostRenderFunction\n */\n\n/**\n * @typedef {Object} AtPixelOptions\n * @property {undefined|function(import(\"./layer/Layer.js\").default): boolean} [layerFilter] Layer filter\n * function. The filter function will receive one argument, the\n * {@link module:ol/layer/Layer layer-candidate} and it should return a boolean value.\n * Only layers which are visible and for which this function returns `true`\n * will be tested for features. By default, all visible layers will be tested.\n * @property {number} [hitTolerance=0] Hit-detection tolerance in pixels. Pixels\n * inside the radius around the given position will be checked for features.\n * @property {boolean} [checkWrapped=true] Check-Wrapped Will check for for wrapped geometries inside the range of\n *   +/- 1 world width. Works only if a projection is used that can be wrapped.\n */\n\n/**\n * @typedef {Object} MapOptionsInternal\n * @property {Collection<import(\"./control/Control.js\").default>} [controls]\n * @property {Collection<import(\"./interaction/Interaction.js\").default>} [interactions]\n * @property {HTMLElement|Document} keyboardEventTarget\n * @property {Collection<import(\"./Overlay.js\").default>} overlays\n * @property {Object<string, *>} values\n */\n\n/**\n * Object literal with config options for the map.\n * @typedef {Object} MapOptions\n * @property {Collection<import(\"./control/Control.js\").default>|Array<import(\"./control/Control.js\").default>} [controls]\n * Controls initially added to the map. If not specified,\n * {@link module:ol/control~defaults} is used.\n * @property {number} [pixelRatio=window.devicePixelRatio] The ratio between\n * physical pixels and device-independent pixels (dips) on the device.\n * @property {Collection<import(\"./interaction/Interaction.js\").default>|Array<import(\"./interaction/Interaction.js\").default>} [interactions]\n * Interactions that are initially added to the map. If not specified,\n * {@link module:ol/interaction~defaults} is used.\n * @property {HTMLElement|Document|string} [keyboardEventTarget] The element to\n * listen to keyboard events on. This determines when the `KeyboardPan` and\n * `KeyboardZoom` interactions trigger. For example, if this option is set to\n * `document` the keyboard interactions will always trigger. If this option is\n * not specified, the element the library listens to keyboard events on is the\n * map target (i.e. the user-provided div for the map). If this is not\n * `document`, the target element needs to be focused for key events to be\n * emitted, requiring that the target element has a `tabindex` attribute.\n * @property {Array<import(\"./layer/Base.js\").default>|Collection<import(\"./layer/Base.js\").default>|LayerGroup} [layers]\n * Layers. If this is not defined, a map with no layers will be rendered. Note\n * that layers are rendered in the order supplied, so if you want, for example,\n * a vector layer to appear on top of a tile layer, it must come after the tile\n * layer.\n * @property {number} [maxTilesLoading=16] Maximum number tiles to load\n * simultaneously.\n * @property {number} [moveTolerance=1] The minimum distance in pixels the\n * cursor must move to be detected as a map move event instead of a click.\n * Increasing this value can make it easier to click on the map.\n * @property {Collection<import(\"./Overlay.js\").default>|Array<import(\"./Overlay.js\").default>} [overlays]\n * Overlays initially added to the map. By default, no overlays are added.\n * @property {HTMLElement|string} [target] The container for the map, either the\n * element itself or the `id` of the element. If not specified at construction\n * time, {@link module:ol/Map~Map#setTarget} must be called for the map to be\n * rendered.\n * @property {View} [view] The map's view.  No layer sources will be\n * fetched unless this is specified at construction time or through\n * {@link module:ol/Map~Map#setView}.\n */\n\n/**\n * @fires import(\"./MapBrowserEvent.js\").MapBrowserEvent\n * @fires import(\"./MapEvent.js\").MapEvent\n * @fires import(\"./render/Event.js\").default#precompose\n * @fires import(\"./render/Event.js\").default#postcompose\n * @fires import(\"./render/Event.js\").default#rendercomplete\n * @api\n */\nclass PluggableMap extends BaseObject {\n  /**\n   * @param {MapOptions} options Map options.\n   */\n  constructor(options) {\n    super();\n\n    const optionsInternal = createOptionsInternal(options);\n\n    /** @private */\n    this.boundHandleBrowserEvent_ = this.handleBrowserEvent.bind(this);\n\n    /**\n     * @type {number}\n     * @private\n     */\n    this.maxTilesLoading_ =\n      options.maxTilesLoading !== undefined ? options.maxTilesLoading : 16;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.pixelRatio_ =\n      options.pixelRatio !== undefined\n        ? options.pixelRatio\n        : DEVICE_PIXEL_RATIO;\n\n    /**\n     * @private\n     * @type {*}\n     */\n    this.postRenderTimeoutHandle_;\n\n    /**\n     * @private\n     * @type {number|undefined}\n     */\n    this.animationDelayKey_;\n\n    /**\n     * @private\n     */\n    this.animationDelay_ = function () {\n      this.animationDelayKey_ = undefined;\n      this.renderFrame_(Date.now());\n    }.bind(this);\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.coordinateToPixelTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {import(\"./transform.js\").Transform}\n     */\n    this.pixelToCoordinateTransform_ = createTransform();\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.frameIndex_ = 0;\n\n    /**\n     * @private\n     * @type {?FrameState}\n     */\n    this.frameState_ = null;\n\n    /**\n     * The extent at the previous 'moveend' event.\n     * @private\n     * @type {import(\"./extent.js\").Extent}\n     */\n    this.previousExtent_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewPropertyListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?import(\"./events.js\").EventsKey}\n     */\n    this.viewChangeListenerKey_ = null;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.layerGroupPropertyListenerKeys_ = null;\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.viewport_ = document.createElement('div');\n    this.viewport_.className =\n      'ol-viewport' + ('ontouchstart' in window ? ' ol-touch' : '');\n    this.viewport_.style.position = 'relative';\n    this.viewport_.style.overflow = 'hidden';\n    this.viewport_.style.width = '100%';\n    this.viewport_.style.height = '100%';\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainer_ = document.createElement('div');\n    this.overlayContainer_.style.position = 'absolute';\n    this.overlayContainer_.style.zIndex = '0';\n    this.overlayContainer_.style.width = '100%';\n    this.overlayContainer_.style.height = '100%';\n    this.overlayContainer_.style.pointerEvents = 'none';\n    this.overlayContainer_.className = 'ol-overlaycontainer';\n    this.viewport_.appendChild(this.overlayContainer_);\n\n    /**\n     * @private\n     * @type {!HTMLElement}\n     */\n    this.overlayContainerStopEvent_ = document.createElement('div');\n    this.overlayContainerStopEvent_.style.position = 'absolute';\n    this.overlayContainerStopEvent_.style.zIndex = '0';\n    this.overlayContainerStopEvent_.style.width = '100%';\n    this.overlayContainerStopEvent_.style.height = '100%';\n    this.overlayContainerStopEvent_.style.pointerEvents = 'none';\n    this.overlayContainerStopEvent_.className = 'ol-overlaycontainer-stopevent';\n    this.viewport_.appendChild(this.overlayContainerStopEvent_);\n\n    /**\n     * @private\n     * @type {MapBrowserEventHandler}\n     */\n    this.mapBrowserEventHandler_ = null;\n\n    /**\n     * @private\n     * @type {number}\n     */\n    this.moveTolerance_ = options.moveTolerance;\n\n    /**\n     * @private\n     * @type {HTMLElement|Document}\n     */\n    this.keyboardEventTarget_ = optionsInternal.keyboardEventTarget;\n\n    /**\n     * @private\n     * @type {?Array<import(\"./events.js\").EventsKey>}\n     */\n    this.keyHandlerKeys_ = null;\n\n    /**\n     * @type {Collection<import(\"./control/Control.js\").default>}\n     * @protected\n     */\n    this.controls = optionsInternal.controls || new Collection();\n\n    /**\n     * @type {Collection<import(\"./interaction/Interaction.js\").default>}\n     * @protected\n     */\n    this.interactions = optionsInternal.interactions || new Collection();\n\n    /**\n     * @type {Collection<import(\"./Overlay.js\").default>}\n     * @private\n     */\n    this.overlays_ = optionsInternal.overlays;\n\n    /**\n     * A lookup of overlays by id.\n     * @private\n     * @type {Object<string, import(\"./Overlay.js\").default>}\n     */\n    this.overlayIdIndex_ = {};\n\n    /**\n     * @type {import(\"./renderer/Map.js\").default}\n     * @private\n     */\n    this.renderer_ = null;\n\n    /**\n     * @type {undefined|function(Event): void}\n     * @private\n     */\n    this.handleResize_;\n\n    /**\n     * @private\n     * @type {!Array<PostRenderFunction>}\n     */\n    this.postRenderFunctions_ = [];\n\n    /**\n     * @private\n     * @type {TileQueue}\n     */\n    this.tileQueue_ = new TileQueue(\n      this.getTilePriority.bind(this),\n      this.handleTileChange_.bind(this)\n    );\n\n    this.addEventListener(\n      getChangeEventType(MapProperty.LAYERGROUP),\n      this.handleLayerGroupChanged_\n    );\n    this.addEventListener(\n      getChangeEventType(MapProperty.VIEW),\n      this.handleViewChanged_\n    );\n    this.addEventListener(\n      getChangeEventType(MapProperty.SIZE),\n      this.handleSizeChanged_\n    );\n    this.addEventListener(\n      getChangeEventType(MapProperty.TARGET),\n      this.handleTargetChanged_\n    );\n\n    // setProperties will trigger the rendering of the map if the map\n    // is \"defined\" already.\n    this.setProperties(optionsInternal.values);\n\n    this.controls.forEach(\n      /**\n       * @param {import(\"./control/Control.js\").default} control Control.\n       * @this {PluggableMap}\n       */\n      function (control) {\n        control.setMap(this);\n      }.bind(this)\n    );\n\n    this.controls.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.controls.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.interactions.forEach(\n      /**\n       * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction.\n       * @this {PluggableMap}\n       */\n      function (interaction) {\n        interaction.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(this);\n      }.bind(this)\n    );\n\n    this.interactions.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        event.element.setMap(null);\n      }.bind(this)\n    );\n\n    this.overlays_.forEach(this.addOverlayInternal_.bind(this));\n\n    this.overlays_.addEventListener(\n      CollectionEventType.ADD,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        this.addOverlayInternal_(\n          /** @type {import(\"./Overlay.js\").default} */ (event.element)\n        );\n      }.bind(this)\n    );\n\n    this.overlays_.addEventListener(\n      CollectionEventType.REMOVE,\n      /**\n       * @param {import(\"./Collection.js\").CollectionEvent} event CollectionEvent.\n       */\n      function (event) {\n        const overlay = /** @type {import(\"./Overlay.js\").default} */ (event.element);\n        const id = overlay.getId();\n        if (id !== undefined) {\n          delete this.overlayIdIndex_[id.toString()];\n        }\n        event.element.setMap(null);\n      }.bind(this)\n    );\n  }\n\n  /**\n   * @abstract\n   * @return {import(\"./renderer/Map.js\").default} The map renderer\n   */\n  createRenderer() {\n    throw new Error('Use a map type that has a createRenderer method');\n  }\n\n  /**\n   * Add the given control to the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @api\n   */\n  addControl(control) {\n    this.getControls().push(control);\n  }\n\n  /**\n   * Add the given interaction to the map. If you want to add an interaction\n   * at another point of the collection use `getInteraction()` and the methods\n   * available on {@link module:ol/Collection~Collection}. This can be used to\n   * stop the event propagation from the handleEvent function. The interactions\n   * get to handle the events in the reverse order of this collection.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to add.\n   * @api\n   */\n  addInteraction(interaction) {\n    this.getInteractions().push(interaction);\n  }\n\n  /**\n   * Adds the given layer to the top of this map. If you want to add a layer\n   * elsewhere in the stack, use `getLayers()` and the methods available on\n   * {@link module:ol/Collection~Collection}.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @api\n   */\n  addLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    layers.push(layer);\n  }\n\n  /**\n   * Add the given overlay to the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @api\n   */\n  addOverlay(overlay) {\n    this.getOverlays().push(overlay);\n  }\n\n  /**\n   * This deals with map's overlay collection changes.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @private\n   */\n  addOverlayInternal_(overlay) {\n    const id = overlay.getId();\n    if (id !== undefined) {\n      this.overlayIdIndex_[id.toString()] = overlay;\n    }\n    overlay.setMap(this);\n  }\n\n  /**\n   *\n   * Clean up.\n   */\n  disposeInternal() {\n    this.setTarget(null);\n    super.disposeInternal();\n  }\n\n  /**\n   * Detect features that intersect a pixel on the viewport, and execute a\n   * callback with each intersecting feature. Layers included in the detection can\n   * be configured through the `layerFilter` option in `opt_options`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./Feature.js\").FeatureLike,\n   *     import(\"./layer/Layer.js\").default): T} callback Feature callback. The callback will be\n   *     called with two arguments. The first argument is one\n   *     {@link module:ol/Feature feature} or\n   *     {@link module:ol/render/Feature render feature} at the pixel, the second is\n   *     the {@link module:ol/layer/Layer layer} of the feature and will be null for\n   *     unmanaged layers. To stop detection, callback functions can return a\n   *     truthy value.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  forEachFeatureAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    const hitTolerance =\n      opt_options.hitTolerance !== undefined\n        ? opt_options.hitTolerance * this.frameState_.pixelRatio\n        : 0;\n    const layerFilter =\n      opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    const checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.forEachFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      callback,\n      null,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Get all features that intersect a pixel on the viewport.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {Array<import(\"./Feature.js\").FeatureLike>} The detected features or\n   * an empty array if none were found.\n   * @api\n   */\n  getFeaturesAtPixel(pixel, opt_options) {\n    const features = [];\n    this.forEachFeatureAtPixel(\n      pixel,\n      function (feature) {\n        features.push(feature);\n      },\n      opt_options\n    );\n    return features;\n  }\n\n  /**\n   * Detect layers that have a color value at a pixel on the viewport, and\n   * execute a callback with each matching layer. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   *\n   * Note: this may give false positives unless the map layers have had different `className`\n   * properties assigned to them.\n   *\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {function(this: S, import(\"./layer/Layer.js\").default, (Uint8ClampedArray|Uint8Array)): T} callback\n   *     Layer callback. This callback will receive two arguments: first is the\n   *     {@link module:ol/layer/Layer layer}, second argument is an array representing\n   *     [R, G, B, A] pixel values (0 - 255) and will be `null` for layer types\n   *     that do not currently support this argument. To stop detection, callback\n   *     functions can return a truthy value.\n   * @param {AtPixelOptions=} opt_options Configuration options.\n   * @return {T|undefined} Callback result, i.e. the return value of last\n   * callback execution, or the first truthy callback return value.\n   * @template S,T\n   * @api\n   */\n  forEachLayerAtPixel(pixel, callback, opt_options) {\n    if (!this.frameState_) {\n      return;\n    }\n    const options = opt_options || {};\n    const hitTolerance =\n      options.hitTolerance !== undefined\n        ? options.hitTolerance * this.frameState_.pixelRatio\n        : 0;\n    const layerFilter = options.layerFilter || TRUE;\n    return this.renderer_.forEachLayerAtPixel(\n      pixel,\n      this.frameState_,\n      hitTolerance,\n      callback,\n      layerFilter\n    );\n  }\n\n  /**\n   * Detect if features intersect a pixel on the viewport. Layers included in the\n   * detection can be configured through `opt_layerFilter`.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel.\n   * @param {AtPixelOptions=} opt_options Optional options.\n   * @return {boolean} Is there a feature at the given pixel?\n   * @api\n   */\n  hasFeatureAtPixel(pixel, opt_options) {\n    if (!this.frameState_) {\n      return false;\n    }\n    const coordinate = this.getCoordinateFromPixelInternal(pixel);\n    opt_options = opt_options !== undefined ? opt_options : {};\n    const layerFilter =\n      opt_options.layerFilter !== undefined ? opt_options.layerFilter : TRUE;\n    const hitTolerance =\n      opt_options.hitTolerance !== undefined\n        ? opt_options.hitTolerance * this.frameState_.pixelRatio\n        : 0;\n    const checkWrapped = opt_options.checkWrapped !== false;\n    return this.renderer_.hasFeatureAtCoordinate(\n      coordinate,\n      this.frameState_,\n      hitTolerance,\n      checkWrapped,\n      layerFilter,\n      null\n    );\n  }\n\n  /**\n   * Returns the coordinate in user projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   * @api\n   */\n  getEventCoordinate(event) {\n    return this.getCoordinateFromPixel(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the coordinate in view projection for a browser event.\n   * @param {MouseEvent} event Event.\n   * @return {import(\"./coordinate.js\").Coordinate} Coordinate.\n   */\n  getEventCoordinateInternal(event) {\n    return this.getCoordinateFromPixelInternal(this.getEventPixel(event));\n  }\n\n  /**\n   * Returns the map pixel position for a browser event relative to the viewport.\n   * @param {UIEvent} event Event.\n   * @return {import(\"./pixel.js\").Pixel} Pixel.\n   * @api\n   */\n  getEventPixel(event) {\n    const viewportPosition = this.viewport_.getBoundingClientRect();\n    const eventPosition =\n      //FIXME Are we really calling this with a TouchEvent anywhere?\n      'changedTouches' in event\n        ? /** @type {TouchEvent} */ (event).changedTouches[0]\n        : /** @type {MouseEvent} */ (event);\n\n    return [\n      eventPosition.clientX - viewportPosition.left,\n      eventPosition.clientY - viewportPosition.top,\n    ];\n  }\n\n  /**\n   * Get the target in which this map is rendered.\n   * Note that this returns what is entered as an option or in setTarget:\n   * if that was an element, it returns an element; if a string, it returns that.\n   * @return {HTMLElement|string|undefined} The Element or id of the Element that the\n   *     map is rendered in.\n   * @observable\n   * @api\n   */\n  getTarget() {\n    return /** @type {HTMLElement|string|undefined} */ (this.get(\n      MapProperty.TARGET\n    ));\n  }\n\n  /**\n   * Get the DOM element into which this map is rendered. In contrast to\n   * `getTarget` this method always return an `Element`, or `null` if the\n   * map has no target.\n   * @return {HTMLElement} The element that the map is rendered in.\n   * @api\n   */\n  getTargetElement() {\n    const target = this.getTarget();\n    if (target !== undefined) {\n      return typeof target === 'string'\n        ? document.getElementById(target)\n        : target;\n    } else {\n      return null;\n    }\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * user projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   * @api\n   */\n  getCoordinateFromPixel(pixel) {\n    return toUserCoordinate(\n      this.getCoordinateFromPixelInternal(pixel),\n      this.getView().getProjection()\n    );\n  }\n\n  /**\n   * Get the coordinate for a given pixel.  This returns a coordinate in the\n   * map view projection.\n   * @param {import(\"./pixel.js\").Pixel} pixel Pixel position in the map viewport.\n   * @return {import(\"./coordinate.js\").Coordinate} The coordinate for the pixel position.\n   */\n  getCoordinateFromPixelInternal(pixel) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.pixelToCoordinateTransform,\n        pixel.slice()\n      );\n    }\n  }\n\n  /**\n   * Get the map controls. Modifying this collection changes the controls\n   * associated with the map.\n   * @return {Collection<import(\"./control/Control.js\").default>} Controls.\n   * @api\n   */\n  getControls() {\n    return this.controls;\n  }\n\n  /**\n   * Get the map overlays. Modifying this collection changes the overlays\n   * associated with the map.\n   * @return {Collection<import(\"./Overlay.js\").default>} Overlays.\n   * @api\n   */\n  getOverlays() {\n    return this.overlays_;\n  }\n\n  /**\n   * Get an overlay by its identifier (the value returned by overlay.getId()).\n   * Note that the index treats string and numeric identifiers as the same. So\n   * `map.getOverlayById(2)` will return an overlay with id `'2'` or `2`.\n   * @param {string|number} id Overlay identifier.\n   * @return {import(\"./Overlay.js\").default} Overlay.\n   * @api\n   */\n  getOverlayById(id) {\n    const overlay = this.overlayIdIndex_[id.toString()];\n    return overlay !== undefined ? overlay : null;\n  }\n\n  /**\n   * Get the map interactions. Modifying this collection changes the interactions\n   * associated with the map.\n   *\n   * Interactions are used for e.g. pan, zoom and rotate.\n   * @return {Collection<import(\"./interaction/Interaction.js\").default>} Interactions.\n   * @api\n   */\n  getInteractions() {\n    return this.interactions;\n  }\n\n  /**\n   * Get the layergroup associated with this map.\n   * @return {LayerGroup} A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  getLayerGroup() {\n    return /** @type {LayerGroup} */ (this.get(MapProperty.LAYERGROUP));\n  }\n\n  /**\n   * Get the collection of layers associated with this map.\n   * @return {!Collection<import(\"./layer/Base.js\").default>} Layers.\n   * @api\n   */\n  getLayers() {\n    const layers = this.getLayerGroup().getLayers();\n    return layers;\n  }\n\n  /**\n   * @return {boolean} Layers have sources that are still loading.\n   */\n  getLoading() {\n    const layerStatesArray = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\n      const layer = layerStatesArray[i].layer;\n      const source = /** @type {import(\"./layer/Layer.js\").default} */ (layer).getSource();\n      if (source && source.loading) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the user\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   * @api\n   */\n  getPixelFromCoordinate(coordinate) {\n    const viewCoordinate = fromUserCoordinate(\n      coordinate,\n      this.getView().getProjection()\n    );\n    return this.getPixelFromCoordinateInternal(viewCoordinate);\n  }\n\n  /**\n   * Get the pixel for a coordinate.  This takes a coordinate in the map view\n   * projection and returns the corresponding pixel.\n   * @param {import(\"./coordinate.js\").Coordinate} coordinate A map coordinate.\n   * @return {import(\"./pixel.js\").Pixel} A pixel position in the map viewport.\n   */\n  getPixelFromCoordinateInternal(coordinate) {\n    const frameState = this.frameState_;\n    if (!frameState) {\n      return null;\n    } else {\n      return applyTransform(\n        frameState.coordinateToPixelTransform,\n        coordinate.slice(0, 2)\n      );\n    }\n  }\n\n  /**\n   * Get the map renderer.\n   * @return {import(\"./renderer/Map.js\").default} Renderer\n   */\n  getRenderer() {\n    return this.renderer_;\n  }\n\n  /**\n   * Get the size of this map.\n   * @return {import(\"./size.js\").Size|undefined} The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  getSize() {\n    return /** @type {import(\"./size.js\").Size|undefined} */ (this.get(\n      MapProperty.SIZE\n    ));\n  }\n\n  /**\n   * Get the view associated with this map. A view manages properties such as\n   * center and resolution.\n   * @return {View} The view that controls this map.\n   * @observable\n   * @api\n   */\n  getView() {\n    return /** @type {View} */ (this.get(MapProperty.VIEW));\n  }\n\n  /**\n   * Get the element that serves as the map viewport.\n   * @return {HTMLElement} Viewport.\n   * @api\n   */\n  getViewport() {\n    return this.viewport_;\n  }\n\n  /**\n   * Get the element that serves as the container for overlays.  Elements added to\n   * this container will let mousedown and touchstart events through to the map,\n   * so clicks and gestures on an overlay will trigger {@link module:ol/MapBrowserEvent~MapBrowserEvent}\n   * events.\n   * @return {!HTMLElement} The map's overlay container.\n   */\n  getOverlayContainer() {\n    return this.overlayContainer_;\n  }\n\n  /**\n   * Get the element that serves as a container for overlays that don't allow\n   * event propagation. Elements added to this container won't let mousedown and\n   * touchstart events through to the map, so clicks and gestures on an overlay\n   * don't trigger any {@link module:ol/MapBrowserEvent~MapBrowserEvent}.\n   * @return {!HTMLElement} The map's overlay container that stops events.\n   */\n  getOverlayContainerStopEvent() {\n    return this.overlayContainerStopEvent_;\n  }\n\n  /**\n   * @param {import(\"./Tile.js\").default} tile Tile.\n   * @param {string} tileSourceKey Tile source key.\n   * @param {import(\"./coordinate.js\").Coordinate} tileCenter Tile center.\n   * @param {number} tileResolution Tile resolution.\n   * @return {number} Tile priority.\n   */\n  getTilePriority(tile, tileSourceKey, tileCenter, tileResolution) {\n    return getTilePriority(\n      this.frameState_,\n      tile,\n      tileSourceKey,\n      tileCenter,\n      tileResolution\n    );\n  }\n\n  /**\n   * @param {UIEvent} browserEvent Browser event.\n   * @param {string=} opt_type Type.\n   */\n  handleBrowserEvent(browserEvent, opt_type) {\n    const type = opt_type || browserEvent.type;\n    const mapBrowserEvent = new MapBrowserEvent(type, this, browserEvent);\n    this.handleMapBrowserEvent(mapBrowserEvent);\n  }\n\n  /**\n   * @param {MapBrowserEvent} mapBrowserEvent The event to handle.\n   */\n  handleMapBrowserEvent(mapBrowserEvent) {\n    if (!this.frameState_) {\n      // With no view defined, we cannot translate pixels into geographical\n      // coordinates so interactions cannot be used.\n      return;\n    }\n    const originalEvent = /** @type {PointerEvent} */ (mapBrowserEvent.originalEvent);\n    const eventType = originalEvent.type;\n    if (\n      eventType === PointerEventType.POINTERDOWN ||\n      eventType === EventType.WHEEL ||\n      eventType === EventType.KEYDOWN\n    ) {\n      const rootNode = this.viewport_.getRootNode\n        ? this.viewport_.getRootNode()\n        : document;\n      const target =\n        rootNode === document\n          ? /** @type {Node} */ (originalEvent.target)\n          : /** @type {ShadowRoot} */ (rootNode).elementFromPoint(\n              originalEvent.clientX,\n              originalEvent.clientY\n            );\n      if (\n        // Abort if the target is a child of the container for elements whose events are not meant\n        // to be handled by map interactions.\n        this.overlayContainerStopEvent_.contains(target) ||\n        // Abort if the event target is a child of the container that is no longer in the page.\n        // It's possible for the target to no longer be in the page if it has been removed in an\n        // event listener, this might happen in a Control that recreates it's content based on\n        // user interaction either manually or via a render in something like https://reactjs.org/\n        !(rootNode === document ? document.documentElement : rootNode).contains(\n          target\n        )\n      ) {\n        return;\n      }\n    }\n    mapBrowserEvent.frameState = this.frameState_;\n    const interactionsArray = this.getInteractions().getArray();\n    if (this.dispatchEvent(mapBrowserEvent) !== false) {\n      for (let i = interactionsArray.length - 1; i >= 0; i--) {\n        const interaction = interactionsArray[i];\n        if (!interaction.getActive()) {\n          continue;\n        }\n        const cont = interaction.handleEvent(mapBrowserEvent);\n        if (!cont) {\n          break;\n        }\n      }\n    }\n  }\n\n  /**\n   * @protected\n   */\n  handlePostRender() {\n    const frameState = this.frameState_;\n\n    // Manage the tile queue\n    // Image loads are expensive and a limited resource, so try to use them\n    // efficiently:\n    // * When the view is static we allow a large number of parallel tile loads\n    //   to complete the frame as quickly as possible.\n    // * When animating or interacting, image loads can cause janks, so we reduce\n    //   the maximum number of loads per frame and limit the number of parallel\n    //   tile loads to remain reactive to view changes and to reduce the chance of\n    //   loading tiles that will quickly disappear from view.\n    const tileQueue = this.tileQueue_;\n    if (!tileQueue.isEmpty()) {\n      let maxTotalLoading = this.maxTilesLoading_;\n      let maxNewLoads = maxTotalLoading;\n      if (frameState) {\n        const hints = frameState.viewHints;\n        if (hints[ViewHint.ANIMATING] || hints[ViewHint.INTERACTING]) {\n          const lowOnFrameBudget =\n            !IMAGE_DECODE && Date.now() - frameState.time > 8;\n          maxTotalLoading = lowOnFrameBudget ? 0 : 8;\n          maxNewLoads = lowOnFrameBudget ? 0 : 2;\n        }\n      }\n      if (tileQueue.getTilesLoading() < maxTotalLoading) {\n        tileQueue.reprioritize(); // FIXME only call if view has changed\n        tileQueue.loadMoreTiles(maxTotalLoading, maxNewLoads);\n      }\n    }\n\n    if (\n      frameState &&\n      this.hasListener(RenderEventType.RENDERCOMPLETE) &&\n      !frameState.animate &&\n      !this.tileQueue_.getTilesLoading() &&\n      !this.getLoading()\n    ) {\n      this.renderer_.dispatchRenderEvent(\n        RenderEventType.RENDERCOMPLETE,\n        frameState\n      );\n    }\n\n    const postRenderFunctions = this.postRenderFunctions_;\n    for (let i = 0, ii = postRenderFunctions.length; i < ii; ++i) {\n      postRenderFunctions[i](this, frameState);\n    }\n    postRenderFunctions.length = 0;\n  }\n\n  /**\n   * @private\n   */\n  handleSizeChanged_() {\n    if (this.getView() && !this.getView().getAnimating()) {\n      this.getView().resolveConstraints(0);\n    }\n\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleTargetChanged_() {\n    // target may be undefined, null, a string or an Element.\n    // If it's a string we convert it to an Element before proceeding.\n    // If it's not now an Element we remove the viewport from the DOM.\n    // If it's an Element we append the viewport element to it.\n\n    let targetElement;\n    if (this.getTarget()) {\n      targetElement = this.getTargetElement();\n    }\n\n    if (this.mapBrowserEventHandler_) {\n      for (let i = 0, ii = this.keyHandlerKeys_.length; i < ii; ++i) {\n        unlistenByKey(this.keyHandlerKeys_[i]);\n      }\n      this.keyHandlerKeys_ = null;\n      this.viewport_.removeEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_\n      );\n      this.viewport_.removeEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_\n      );\n      if (this.handleResize_ !== undefined) {\n        removeEventListener(EventType.RESIZE, this.handleResize_, false);\n        this.handleResize_ = undefined;\n      }\n      this.mapBrowserEventHandler_.dispose();\n      this.mapBrowserEventHandler_ = null;\n      removeNode(this.viewport_);\n    }\n\n    if (!targetElement) {\n      if (this.renderer_) {\n        clearTimeout(this.postRenderTimeoutHandle_);\n        this.postRenderFunctions_.length = 0;\n        this.renderer_.dispose();\n        this.renderer_ = null;\n      }\n      if (this.animationDelayKey_) {\n        cancelAnimationFrame(this.animationDelayKey_);\n        this.animationDelayKey_ = undefined;\n      }\n    } else {\n      targetElement.appendChild(this.viewport_);\n      if (!this.renderer_) {\n        this.renderer_ = this.createRenderer();\n      }\n\n      this.mapBrowserEventHandler_ = new MapBrowserEventHandler(\n        this,\n        this.moveTolerance_\n      );\n      for (const key in MapBrowserEventType) {\n        this.mapBrowserEventHandler_.addEventListener(\n          MapBrowserEventType[key],\n          this.handleMapBrowserEvent.bind(this)\n        );\n      }\n      this.viewport_.addEventListener(\n        EventType.CONTEXTMENU,\n        this.boundHandleBrowserEvent_,\n        false\n      );\n      this.viewport_.addEventListener(\n        EventType.WHEEL,\n        this.boundHandleBrowserEvent_,\n        PASSIVE_EVENT_LISTENERS ? {passive: false} : false\n      );\n\n      const keyboardEventTarget = !this.keyboardEventTarget_\n        ? targetElement\n        : this.keyboardEventTarget_;\n      this.keyHandlerKeys_ = [\n        listen(\n          keyboardEventTarget,\n          EventType.KEYDOWN,\n          this.handleBrowserEvent,\n          this\n        ),\n        listen(\n          keyboardEventTarget,\n          EventType.KEYPRESS,\n          this.handleBrowserEvent,\n          this\n        ),\n      ];\n\n      if (!this.handleResize_) {\n        this.handleResize_ = this.updateSize.bind(this);\n        window.addEventListener(EventType.RESIZE, this.handleResize_, false);\n      }\n    }\n\n    this.updateSize();\n    // updateSize calls setSize, so no need to call this.render\n    // ourselves here.\n  }\n\n  /**\n   * @private\n   */\n  handleTileChange_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewPropertyChanged_() {\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleViewChanged_() {\n    if (this.viewPropertyListenerKey_) {\n      unlistenByKey(this.viewPropertyListenerKey_);\n      this.viewPropertyListenerKey_ = null;\n    }\n    if (this.viewChangeListenerKey_) {\n      unlistenByKey(this.viewChangeListenerKey_);\n      this.viewChangeListenerKey_ = null;\n    }\n    const view = this.getView();\n    if (view) {\n      this.updateViewportSize_();\n\n      this.viewPropertyListenerKey_ = listen(\n        view,\n        ObjectEventType.PROPERTYCHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n      this.viewChangeListenerKey_ = listen(\n        view,\n        EventType.CHANGE,\n        this.handleViewPropertyChanged_,\n        this\n      );\n\n      view.resolveConstraints(0);\n    }\n    this.render();\n  }\n\n  /**\n   * @private\n   */\n  handleLayerGroupChanged_() {\n    if (this.layerGroupPropertyListenerKeys_) {\n      this.layerGroupPropertyListenerKeys_.forEach(unlistenByKey);\n      this.layerGroupPropertyListenerKeys_ = null;\n    }\n    const layerGroup = this.getLayerGroup();\n    if (layerGroup) {\n      this.layerGroupPropertyListenerKeys_ = [\n        listen(layerGroup, ObjectEventType.PROPERTYCHANGE, this.render, this),\n        listen(layerGroup, EventType.CHANGE, this.render, this),\n      ];\n    }\n    this.render();\n  }\n\n  /**\n   * @return {boolean} Is rendered.\n   */\n  isRendered() {\n    return !!this.frameState_;\n  }\n\n  /**\n   * Requests an immediate render in a synchronous manner.\n   * @api\n   */\n  renderSync() {\n    if (this.animationDelayKey_) {\n      cancelAnimationFrame(this.animationDelayKey_);\n    }\n    this.animationDelay_();\n  }\n\n  /**\n   * Redraws all text after new fonts have loaded\n   */\n  redrawText() {\n    const layerStates = this.getLayerGroup().getLayerStatesArray();\n    for (let i = 0, ii = layerStates.length; i < ii; ++i) {\n      const layer = layerStates[i].layer;\n      if (layer.hasRenderer()) {\n        layer.getRenderer().handleFontsChanged();\n      }\n    }\n  }\n\n  /**\n   * Request a map rendering (at the next animation frame).\n   * @api\n   */\n  render() {\n    if (this.renderer_ && this.animationDelayKey_ === undefined) {\n      this.animationDelayKey_ = requestAnimationFrame(this.animationDelay_);\n    }\n  }\n\n  /**\n   * Remove the given control from the map.\n   * @param {import(\"./control/Control.js\").default} control Control.\n   * @return {import(\"./control/Control.js\").default|undefined} The removed control (or undefined\n   *     if the control was not found).\n   * @api\n   */\n  removeControl(control) {\n    return this.getControls().remove(control);\n  }\n\n  /**\n   * Remove the given interaction from the map.\n   * @param {import(\"./interaction/Interaction.js\").default} interaction Interaction to remove.\n   * @return {import(\"./interaction/Interaction.js\").default|undefined} The removed interaction (or\n   *     undefined if the interaction was not found).\n   * @api\n   */\n  removeInteraction(interaction) {\n    return this.getInteractions().remove(interaction);\n  }\n\n  /**\n   * Removes the given layer from the map.\n   * @param {import(\"./layer/Base.js\").default} layer Layer.\n   * @return {import(\"./layer/Base.js\").default|undefined} The removed layer (or undefined if the\n   *     layer was not found).\n   * @api\n   */\n  removeLayer(layer) {\n    const layers = this.getLayerGroup().getLayers();\n    return layers.remove(layer);\n  }\n\n  /**\n   * Remove the given overlay from the map.\n   * @param {import(\"./Overlay.js\").default} overlay Overlay.\n   * @return {import(\"./Overlay.js\").default|undefined} The removed overlay (or undefined\n   *     if the overlay was not found).\n   * @api\n   */\n  removeOverlay(overlay) {\n    return this.getOverlays().remove(overlay);\n  }\n\n  /**\n   * @param {number} time Time.\n   * @private\n   */\n  renderFrame_(time) {\n    const size = this.getSize();\n    const view = this.getView();\n    const previousFrameState = this.frameState_;\n    /** @type {?FrameState} */\n    let frameState = null;\n    if (size !== undefined && hasArea(size) && view && view.isDef()) {\n      const viewHints = view.getHints(\n        this.frameState_ ? this.frameState_.viewHints : undefined\n      );\n      const viewState = view.getState();\n      frameState = {\n        animate: false,\n        coordinateToPixelTransform: this.coordinateToPixelTransform_,\n        declutterItems: previousFrameState\n          ? previousFrameState.declutterItems\n          : [],\n        extent: getForViewAndSize(\n          viewState.center,\n          viewState.resolution,\n          viewState.rotation,\n          size\n        ),\n        index: this.frameIndex_++,\n        layerIndex: 0,\n        layerStatesArray: this.getLayerGroup().getLayerStatesArray(),\n        pixelRatio: this.pixelRatio_,\n        pixelToCoordinateTransform: this.pixelToCoordinateTransform_,\n        postRenderFunctions: [],\n        size: size,\n        tileQueue: this.tileQueue_,\n        time: time,\n        usedTiles: {},\n        viewState: viewState,\n        viewHints: viewHints,\n        wantedTiles: {},\n      };\n    }\n\n    this.frameState_ = frameState;\n    this.renderer_.renderFrame(frameState);\n\n    if (frameState) {\n      if (frameState.animate) {\n        this.render();\n      }\n      Array.prototype.push.apply(\n        this.postRenderFunctions_,\n        frameState.postRenderFunctions\n      );\n\n      if (previousFrameState) {\n        const moveStart =\n          !this.previousExtent_ ||\n          (!isEmpty(this.previousExtent_) &&\n            !equals(frameState.extent, this.previousExtent_));\n        if (moveStart) {\n          this.dispatchEvent(\n            new MapEvent(MapEventType.MOVESTART, this, previousFrameState)\n          );\n          this.previousExtent_ = createOrUpdateEmpty(this.previousExtent_);\n        }\n      }\n\n      const idle =\n        this.previousExtent_ &&\n        !frameState.viewHints[ViewHint.ANIMATING] &&\n        !frameState.viewHints[ViewHint.INTERACTING] &&\n        !equals(frameState.extent, this.previousExtent_);\n\n      if (idle) {\n        this.dispatchEvent(\n          new MapEvent(MapEventType.MOVEEND, this, frameState)\n        );\n        clone(frameState.extent, this.previousExtent_);\n      }\n    }\n\n    this.dispatchEvent(new MapEvent(MapEventType.POSTRENDER, this, frameState));\n\n    this.postRenderTimeoutHandle_ = setTimeout(\n      this.handlePostRender.bind(this),\n      0\n    );\n  }\n\n  /**\n   * Sets the layergroup of this map.\n   * @param {LayerGroup} layerGroup A layer group containing the layers in this map.\n   * @observable\n   * @api\n   */\n  setLayerGroup(layerGroup) {\n    this.set(MapProperty.LAYERGROUP, layerGroup);\n  }\n\n  /**\n   * Set the size of this map.\n   * @param {import(\"./size.js\").Size|undefined} size The size in pixels of the map in the DOM.\n   * @observable\n   * @api\n   */\n  setSize(size) {\n    this.set(MapProperty.SIZE, size);\n  }\n\n  /**\n   * Set the target element to render this map into.\n   * @param {HTMLElement|string|undefined} target The Element or id of the Element\n   *     that the map is rendered in.\n   * @observable\n   * @api\n   */\n  setTarget(target) {\n    this.set(MapProperty.TARGET, target);\n  }\n\n  /**\n   * Set the view for this map.\n   * @param {View} view The view that controls this map.\n   * @observable\n   * @api\n   */\n  setView(view) {\n    this.set(MapProperty.VIEW, view);\n  }\n\n  /**\n   * Force a recalculation of the map viewport size.  This should be called when\n   * third-party code changes the size of the map viewport.\n   * @api\n   */\n  updateSize() {\n    const targetElement = this.getTargetElement();\n\n    if (!targetElement) {\n      this.setSize(undefined);\n    } else {\n      const computedStyle = getComputedStyle(targetElement);\n      this.setSize([\n        targetElement.offsetWidth -\n          parseFloat(computedStyle['borderLeftWidth']) -\n          parseFloat(computedStyle['paddingLeft']) -\n          parseFloat(computedStyle['paddingRight']) -\n          parseFloat(computedStyle['borderRightWidth']),\n        targetElement.offsetHeight -\n          parseFloat(computedStyle['borderTopWidth']) -\n          parseFloat(computedStyle['paddingTop']) -\n          parseFloat(computedStyle['paddingBottom']) -\n          parseFloat(computedStyle['borderBottomWidth']),\n      ]);\n    }\n\n    this.updateViewportSize_();\n  }\n\n  /**\n   * Recomputes the viewport size and save it on the view object (if any)\n   * @private\n   */\n  updateViewportSize_() {\n    const view = this.getView();\n    if (view) {\n      let size = undefined;\n      const computedStyle = getComputedStyle(this.viewport_);\n      if (computedStyle.width && computedStyle.height) {\n        size = [\n          parseInt(computedStyle.width, 10),\n          parseInt(computedStyle.height, 10),\n        ];\n      }\n      view.setViewportSize(size);\n    }\n  }\n}\n\n/**\n * @param {MapOptions} options Map options.\n * @return {MapOptionsInternal} Internal map options.\n */\nfunction createOptionsInternal(options) {\n  /**\n   * @type {HTMLElement|Document}\n   */\n  let keyboardEventTarget = null;\n  if (options.keyboardEventTarget !== undefined) {\n    keyboardEventTarget =\n      typeof options.keyboardEventTarget === 'string'\n        ? document.getElementById(options.keyboardEventTarget)\n        : options.keyboardEventTarget;\n  }\n\n  /**\n   * @type {Object<string, *>}\n   */\n  const values = {};\n\n  const layerGroup =\n    options.layers &&\n    typeof (/** @type {?} */ (options.layers).getLayers) === 'function'\n      ? /** @type {LayerGroup} */ (options.layers)\n      : new LayerGroup({layers: /** @type {Collection} */ (options.layers)});\n  values[MapProperty.LAYERGROUP] = layerGroup;\n\n  values[MapProperty.TARGET] = options.target;\n\n  values[MapProperty.VIEW] =\n    options.view !== undefined ? options.view : new View();\n\n  let controls;\n  if (options.controls !== undefined) {\n    if (Array.isArray(options.controls)) {\n      controls = new Collection(options.controls.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.controls).getArray) === 'function',\n        47\n      ); // Expected `controls` to be an array or an `import(\"./Collection.js\").Collection`\n      controls = /** @type {Collection} */ (options.controls);\n    }\n  }\n\n  let interactions;\n  if (options.interactions !== undefined) {\n    if (Array.isArray(options.interactions)) {\n      interactions = new Collection(options.interactions.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.interactions).getArray) ===\n          'function',\n        48\n      ); // Expected `interactions` to be an array or an `import(\"./Collection.js\").Collection`\n      interactions = /** @type {Collection} */ (options.interactions);\n    }\n  }\n\n  let overlays;\n  if (options.overlays !== undefined) {\n    if (Array.isArray(options.overlays)) {\n      overlays = new Collection(options.overlays.slice());\n    } else {\n      assert(\n        typeof (/** @type {?} */ (options.overlays).getArray) === 'function',\n        49\n      ); // Expected `overlays` to be an array or an `import(\"./Collection.js\").Collection`\n      overlays = options.overlays;\n    }\n  } else {\n    overlays = new Collection();\n  }\n\n  return {\n    controls: controls,\n    interactions: interactions,\n    keyboardEventTarget: keyboardEventTarget,\n    overlays: overlays,\n    values: values,\n  };\n}\nexport default PluggableMap;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}