{"ast":null,"code":"/**\n * @module ol/functions\n */\nimport { equals as arrayEquals } from './array.js';\n/**\n * Always returns true.\n * @returns {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n/**\n * Always returns false.\n * @returns {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  var called = false;\n  /** @type {ReturnType} */\n  var lastResult;\n  /** @type {Array<any>} */\n  var lastArgs;\n  var lastThis;\n  return function () {\n    var nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}","map":{"version":3,"names":["equals","arrayEquals","TRUE","FALSE","VOID","memoizeOne","fn","called","lastResult","lastArgs","lastThis","nextArgs","Array","prototype","slice","call","arguments","apply"],"sources":["/Users/mariovicky/Skripsi_OpenLayers/node_modules/ol/src/functions.js"],"sourcesContent":["/**\n * @module ol/functions\n */\n\nimport {equals as arrayEquals} from './array.js';\n\n/**\n * Always returns true.\n * @returns {boolean} true.\n */\nexport function TRUE() {\n  return true;\n}\n\n/**\n * Always returns false.\n * @returns {boolean} false.\n */\nexport function FALSE() {\n  return false;\n}\n\n/**\n * A reusable function, used e.g. as a default for callbacks.\n *\n * @return {void} Nothing.\n */\nexport function VOID() {}\n\n/**\n * Wrap a function in another function that remembers the last return.  If the\n * returned function is called twice in a row with the same arguments and the same\n * this object, it will return the value from the first call in the second call.\n *\n * @param {function(...any): ReturnType} fn The function to memoize.\n * @return {function(...any): ReturnType} The memoized function.\n * @template ReturnType\n */\nexport function memoizeOne(fn) {\n  let called = false;\n\n  /** @type {ReturnType} */\n  let lastResult;\n\n  /** @type {Array<any>} */\n  let lastArgs;\n\n  let lastThis;\n\n  return function () {\n    const nextArgs = Array.prototype.slice.call(arguments);\n    if (!called || this !== lastThis || !arrayEquals(nextArgs, lastArgs)) {\n      called = true;\n      lastThis = this;\n      lastArgs = nextArgs;\n      lastResult = fn.apply(this, arguments);\n    }\n    return lastResult;\n  };\n}\n"],"mappings":"AAAA;;;AAIA,SAAQA,MAAM,IAAIC,WAAW,QAAO,YAAY;AAEhD;;;;AAIA,OAAM,SAAUC,IAAIA,CAAA;EAClB,OAAO,IAAI;AACb;AAEA;;;;AAIA,OAAM,SAAUC,KAAKA,CAAA;EACnB,OAAO,KAAK;AACd;AAEA;;;;;AAKA,OAAM,SAAUC,IAAIA,CAAA,GAAI;AAExB;;;;;;;;;AASA,OAAM,SAAUC,UAAUA,CAACC,EAAE;EAC3B,IAAIC,MAAM,GAAG,KAAK;EAElB;EACA,IAAIC,UAAU;EAEd;EACA,IAAIC,QAAQ;EAEZ,IAAIC,QAAQ;EAEZ,OAAO;IACL,IAAMC,QAAQ,GAAGC,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACC,SAAS,CAAC;IACtD,IAAI,CAACT,MAAM,IAAI,IAAI,KAAKG,QAAQ,IAAI,CAACT,WAAW,CAACU,QAAQ,EAAEF,QAAQ,CAAC,EAAE;MACpEF,MAAM,GAAG,IAAI;MACbG,QAAQ,GAAG,IAAI;MACfD,QAAQ,GAAGE,QAAQ;MACnBH,UAAU,GAAGF,EAAE,CAACW,KAAK,CAAC,IAAI,EAAED,SAAS,CAAC;;IAExC,OAAOR,UAAU;EACnB,CAAC;AACH"},"metadata":{},"sourceType":"module","externalDependencies":[]}